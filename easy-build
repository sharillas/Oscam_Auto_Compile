#!/bin/bash
# easy-build-script
EASYVERSION="v0.8.3"
OSCAMDIR=`pwd`
MAINDIR="${OSCAMDIR%/oscam-svn}"
PLATFORM=`uname -m`
EASYDIR="$OSCAMDIR/EasyBuildScript"
EASYCONF="$EASYDIR/EasyBuild.conf"
EASYINFO="$EASYDIR/EasyBuild.info"
MYBUILDDIR="$OSCAMDIR/BUILD"
MYCHAINS="$OSCAMDIR/toolchains"
MYLIBS="$OSCAMDIR/external_LIBS"
MYDLDIR="$OSCAMDIR/Download"
MYPLATFORMS="DREAMBOX AZBOX COOLSTREAM DDWRT DOCKSTAR FONERA FRITZBOX FRITZBOX_7390 NSLU2UNSLUNG $PLATFORM-PC PPC_DREAM PPC_DB2_DREAM_OLD SH4-DVBAPI SH4-STAPI TPLINK ASUSWL"
MYEASY="LOGFILES ESAYINFO"
MYBUILDS="DREAMBOX AZBOX COOLSTREAM DOCKSTAR FONERA FRITZBOX FRITZBOX_7390 NSLU2UNSLUNG $PLATFORM-PC PPC_DREAM PPC_DB2_DREAM_OLD SH4-DVBAPI SH4-STAPI TPLINK ASUSWL"
MYDDWRT="3.4.6-uclibc-0.9.28 4.1.0-uclibc-0.9.28"
MYFINISHEDCAMFOLDER="DEFAULT DEFAULT/LIBUSB DEFAULT/PCSC DEFAULT/WEBIF DEFAULT/LIBUSB/WEBIF DEFAULT/PCSC/WEBIF ONEINALL ONEINALL/WEBIF ONEINALL/LIBUSB ONEINALL/PCSC ONEINALL/LIBUSB/WEBIF ONEINALL/PCSC/WEBIF"
MYCCIDFILE="lib/pcsc/drivers/ifd-ccid.bundle/Contents/Linux/libccid.so"
MYLIBUSBFILE="lib/libusb-1.0.a"
MYPCSCFILE="lib/libpcsclite.so"
MYWEBIFLOGO="http://tinyurl.com/69v5jqq"
### unstable-trunk or dynamic-threads SVN ###
#MYSVN="branches/dynamic-threads"
MYSVN="trunk"
#############################################
ORIG_PATH="$PATH"
VERSION=`svnversion | cut -d M -f1`

# old fritzgcc version was 4.2.4
# if you have always old ones build set it again to 4.2.4-uClibc!!
FRITZGCCVERSION="4.4.6_uClibc"
LIBSTAPIFILE="lib_stapi28a.tar.gz"
LIBOSCAM_STAPIVER="v0.08a"
# openssl v1.0.0d not working @all #
OPENSSLVER="0.9.8"
#openssl for ddwrt 4.1.0 - openssl 1.0.0 not working!
OPENSSLDDWRTVER="0.9.8"
MYLIBCRYPTOS="libcrypto.so libcrypto.so.$OPENSSLVER libcrypto.so.$OPENSSLDDWRTVER libssl.so libssl.so.$OPENSSLVER libssl.so.$OPENSSLDDWRTVER"
# MYLIBCRYPTOS="libusb-1.0.so.0.0.0 libusb-1.0.so.0 libusb-1.0.so libcrypto.so libcrypto.so.$OPENSSLVER libcrypto.so.$OPENSSLDDWRTVER libssl.so libssl.so .$OPENSSLVER libssl.so.$OPENSSLDDWRTVER"
LIBUSBVER="1.0.8"
#svn online check
HAVETESTET=0
STREAMSVN="http://streamboard.gmc.to/svn/oscam/$MYSVN"
if [ -z "`cat ./oscam-config.h | grep "//#define DO_ONLINECHECK"`" ]; then
	if [ "$HAVETESTET" != "1" ]; then
	STREAMSVNONLINE=`wget --no-cache -T5 -t2 -q -O- "$STREAMSVN" | head -n 1 | sed "s/.*Revision //" | sed "s/:.*//"`
	#STREAMSVNONLINE=`ping -c2 $STREAMSVN >/dev/null 2>&1`
	fi
	if [ ! -z "$STREAMSVNONLINE" ] && [ "$HAVETESTET" != "1" ]; then
		echo -e "\033[1;37;42m SVN IS ONLINE...\033[0m"
		sed "s/^HAVETESTET=0/HAVETESTET=1/g" -i $0
	elif [ -z "$STREAMSVNONLINE" ] && [ "$HAVETESTET" != "1" ]; then
		echo -e "\033[1;37;41m SVN OFFLINE...\033[0m"
		sed "s/^HAVETESTET=0/HAVETESTET=1/g" -i $0
	fi
fi

spinner() {
	if [ -n "$1" ]; then
		echo -en ""
		while ps -p $1 > /dev/null 
		do
		echo -en "\b/"
		sleep 0.333
		echo -en "\b-"
		sleep 0.333
		if ! ps -p $1 > /dev/null
 			then
				break
		fi
		echo -en "\b\\"
		sleep 0.333
		echo -en "\b|"
		sleep 0.333
		done
		echo -en "\n"
	fi
}

spinner_small () {
spinner
make >/dev/null 2>&1 &
spinner $! 
spinner
}

success () {
echo -e "\033[1;37;42mSUCCESS!!!
OSCam found:
.."$OSCAMPATH"
OSCam-Version: $VERSION\033[0m"
echo ""
}

error () {
echo -e "\033[1;37;41mB U I L D  -  E R R O R
FOR DEATAILS WATCH YOUR
TERMINAL-OUTPUT
GO BACK TO MAIN-MENU\033[0m"
sed "s@BUILDALL=.*@BUILDALL=0@g" -i "$EASYCONF"
make clean >/dev/null 2>&1
cd "$OSCAMDIR"
. "$EASYCONF"
sleep 10
$0
exit
}

error_chain () {
echo ""
echo -e "\033[1;37;43m TOOLCHAIN NOT FOUND OR TO OLD!!! 
GO BACK TO MAIN-MENU NOW\033[0m"
sleep 2
$0
exit
}

note_chain () {
echo -e "\033[1;37;43mPLEASE INSTALL TOOLCHAIN FIRST ...\033[0m"
sleep 2
$0 2
exit
}

goback () {
echo -e "\033[1;37;42mGO BACK TO SINGLE-BUILD-MENU\033[0m"
cd "$OSCAMDIR"
make clean >/dev/null 2>&1
sleep 2
$0 2
exit
}

goback_main () {
echo -e "\033[1;37;46mGO BACK TO MAIN-MENU NOW...\033[0m"
sleep 3
cd "$OSCAMDIR"
$0
exit
}

goto () {
echo -e "\033[1;37;42mGO TO '$GO_TO' NOW...\033[0m"
$0 2 $GO_TO
exit
}

make_install () {
make
make install
make clean >/dev/null 2>&1
export PATH="$ORIG_PATH"
}

prepare_openssl () {
cd "$MYDLDIR"
if [ ! -e "$MYDLDIR/openssl-$OPENSSLVER.tar.gz" ]; then
	echo -e "\033[1;37;42mDOWNLOAD OPENSSL-$OPENSSLVER\033[0m"
	echo -e "\033[1;37;42m....... 3,8 MB ...........\033[0m"
	spinner
	wget -q -c http://www.openssl.org/source/"openssl-$OPENSSLVER.tar.gz" &
	spinner $! 
fi
if [ ! -e "$OSCAMDIR/openssl-$OPENSSLVER" ]; then
	echo -e "\033[1;37;42mEXTRACT OPENSSL-$OPENSSLVER\033[0m"
	tar -xzvf "openssl-$OPENSSLVER.tar.gz" -C "$OSCAMDIR" >/dev/null 2>&1 
fi 
cd "$OSCAMDIR/openssl-$OPENSSLVER"
}

install_openssl () {
if [ "$FOR_PLATFORM" == "ASUSWL" ]; then
	if [ ! -e "$MYLIBS/$FOR_PLATFORM/opt/lib/libcrypto.a" ]; then
		prepare_openssl
		echo -e "\033[1;37;42m$FOR_PLATFORM:\033[0m"
		echo -e "\033[1;37;42mBUILD LIBCRYPTO-$OPENSSLVER\033[0m"
		export PATH="$MYCHAINPATH:$PATH"
		./config --prefix="$MYLIBS/$FOR_PLATFORM/opt" shared no-asm
		sed "s@^CFLAG= .*@CFLAG= -O -fPIC@g" -i Makefile
		sed "s@^SHARED_LDFLAGS=-m64@SHARED_LDFLAGS=@g" -i Makefile
		sed "s@CC= gcc@CC= $MYHOST_TARGET-gcc@g" -i Makefile
		sed "s@AR=ar.*@AR= $MYHOST_TARGET-ar \$\(ARFLAGS) r@g" -i Makefile
		sed "s@RANLIB= \/usr.*@RANLIB= $MYHOST_TARGET-ranlib@g" -i Makefile
		sed "s@MAKEDEPPROG= gcc@MAKEDEPPROG= $MYHOST_TARGET-gcc@g" -i Makefile
		make_install
		if [ -e "$MYLIBS/$FOR_PLATFORM/opt/lib/libcrypto.a" ]; then
			ok_openssl
		else
			error_openssl
		fi
	fi
else
	if [ ! -e "$MYLIBS/$FOR_PLATFORM/lib/libcrypto.a" ]; then
		prepare_openssl
		echo -e "\033[1;37;42m$FOR_PLATFORM:\033[0m"
		echo -e "\033[1;37;42mBUILD LIBCRYPTO-$OPENSSLVER\033[0m"
		export PATH="$MYCHAINPATH:$PATH"
		if [ "$OPENSSLVER" == "1.0.0d" ]; then
			./config --prefix="$MYLIBS/$FOR_PLATFORM" --cross-compile-prefix="$MYHOST_TARGET-" shared no-asm
			sed "s@^CFLAG= .*@CFLAG= -O -fPIC@g" -i Makefile
			sed "s@^SHARED_LDFLAGS=-m64@SHARED_LDFLAGS=@g" -i Makefile
		else
			./config --prefix="$MYLIBS/$FOR_PLATFORM" shared no-asm
			sed "s@^CFLAG= .*@CFLAG= -O -fPIC@g" -i Makefile
			sed "s@^SHARED_LDFLAGS=-m64@SHARED_LDFLAGS=@g" -i Makefile
			sed "s@CC= gcc@CC= $MYHOST_TARGET-gcc@g" -i Makefile
			sed "s@AR=ar.*@AR= $MYHOST_TARGET-ar \$\(ARFLAGS) r@g" -i Makefile
			sed "s@RANLIB= \/usr.*@RANLIB= $MYHOST_TARGET-ranlib@g" -i Makefile
			sed "s@MAKEDEPPROG= gcc@MAKEDEPPROG= $MYHOST_TARGET-gcc@g" -i Makefile
		fi
		make_install
		if [ -e "$MYLIBS/$FOR_PLATFORM/lib/libcrypto.a" ]; then
			ok_openssl
		else
			error_openssl
		fi
	fi
fi
}

check_ssl () {
if [ -z "`cat ./oscam-config.h | grep "//#define WITH_SSL"`" ]; then
	if [ "$FOR_PLATFORM" == "SH4-STAPI" ]; then
		sed "s@OS_LIBS=.* \\\@OS_LIBS=\"-lssl -lcrypto -lm -L./stapi -loscam_stapi\" \\\\@g" -i "$OSCAMDIR/Makefile"
	elif [ "$FOR_PLATFORM" == "COOLSTREAM" ]; then
		sed "s@OS_LIBS=.* \\\@OS_LIBS=\"-lssl -lcrypto -lm -lrt -lnxp\" \\\\@g" -i "$OSCAMDIR/Makefile"
	else
		sed "s@OS_LIBS=.* \\\@OS_LIBS=\"-lssl -lcrypto -lm\" \\\\@g" -i "$OSCAMDIR/Makefile"
	fi
else
	if [ "$FOR_PLATFORM" == "SH4-STAPI" ]; then
		sed "s@OS_LIBS=.* \\\@OS_LIBS=\"-lcrypto -lm -L./stapi -loscam_stapi\" \\\\@g" -i "$OSCAMDIR/Makefile"
	elif [ "$FOR_PLATFORM" == "COOLSTREAM" ]; then
		sed "s@OS_LIBS=.* \\\@OS_LIBS=\"-lcrypto -lm -lrt -lnxp\" \\\\@g" -i "$OSCAMDIR/Makefile"
	else
		sed "s@OS_LIBS=.* \\\@OS_LIBS=\"-lcrypto -lm\" \\\\@g" -i "$OSCAMDIR/Makefile"
	fi
fi
}

ok_openssl () {
echo -e "\033[1;37;42mLIBCRYPTO-$OPENSSLVER SUCCESSFULL BUILD\033[0m"
}

error_openssl () {
echo -e "\033[1;37;41mLIBCRYPTO-$OPENSSLVER BUILD-ERROR\033[0m"
sleep 5
cd "$OSCAMDIR"
$0
exit
}

prepare_pcsc () {
if [ ! -e "$MYDLDIR/pcsc-lite-$PCSCVERSION.tar.bz2" ]; then
	cd "$MYDLDIR"
	spinner
	wget -q -c http://alioth.debian.org/frs/download.php/"$PCSCDLID" &
	spinner $! 
	if [ -e "$MYDLDIR/$PCSCDLID" ]; then
		mv "$MYDLDIR/$PCSCDLID" "$MYDLDIR/pcsc-lite-$PCSCVERSION.tar.bz2"
	fi
fi
if [ ! -e "$OSCAMDIR/pcsc-lite-$PCSCVERSION" ]; then
	tar -xvf "$MYDLDIR/pcsc-lite-$PCSCVERSION.tar.bz2" -C "$OSCAMDIR/" >/dev/null 2>&1 
fi
export PATH="$MYCHAINPATH:$PATH"
cd "$OSCAMDIR/pcsc-lite-$PCSCVERSION"
if [ "$FOR_PLATFORM" == "ASUSWL" ]; then
	if [ "$PCSCVERSION" == "1.7.0" ] || [ "$PCSCVERSION" == "1.7.2" ]; then
		sed "s/as_fn_error \$? \"libusb not found/\$as_echo \$? \"libusb not found/" -i configure
		./configure --host="$MYHOST_TARGET" --target="$MYHOST_TARGET" --enable-static --disable-libudev LIBUSB_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/opt/include/libusb-1.0" LIBUSB_LIBS="$MYLIBS/$FOR_PLATFORM/opt/lib/libusb-1.0.so" --prefix="$MYLIBS/$FOR_PLATFORM/opt"
	else
		sed "s/as_fn_error \"libusb not found/\$as_echo \$? \"libusb not found/" -i configure
		./configure --host="$MYHOST_TARGET" --target="$MYHOST_TARGET" --enable-static --disable-libhal LIBUSB_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/opt/include" LIBUSB_LIBS="$MYLIBS/$FOR_PLATFORM/opt/lib/libusb-1.0.so" --prefix="$MYLIBS/$FOR_PLATFORM/opt"
	fi
else
	if [ "$PCSCVERSION" == "1.7.0" ] || [ "$PCSCVERSION" == "1.7.2" ]; then
		./configure --host="$MYHOST_TARGET" --target="$MYHOST_TARGET" --enable-static --disable-libudev LIBUSB_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/include/libusb-1.0" LIBUSB_LIBS="$MYLIBS/$FOR_PLATFORM/lib/libusb-1.0.so" --prefix="$MYLIBS/$FOR_PLATFORM"
	else
		./configure --host="$MYHOST_TARGET" --target="$MYHOST_TARGET" --enable-static --disable-libhal LIBUSB_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/include" LIBUSB_LIBS="$MYLIBS/$FOR_PLATFORM/lib/libusb-1.0.so" --prefix="$MYLIBS/$FOR_PLATFORM"
	fi
fi
make_install
}

prepare_pcsc_special () {
if [ ! -e "$MYDLDIR/pcsc-lite-$PCSCVERSION.tar.bz2" ]; then
	cd "$MYDLDIR"
	spinner
	wget -q -c http://alioth.debian.org/frs/download.php/"$PCSCDLID" &
	spinner $! 
	if [ -e "$MYDLDIR/$PCSCDLID" ]; then
		mv "$MYDLDIR/$PCSCDLID" "$MYDLDIR/pcsc-lite-$PCSCVERSION.tar.bz2"
	fi
fi
if [ ! -e "$OSCAMDIR/pcsc-lite-$PCSCVERSION" ]; then
	tar -xvf "$MYDLDIR/pcsc-lite-$PCSCVERSION.tar.bz2" -C "$OSCAMDIR/" >/dev/null 2>&1 
fi
export PATH="$MYCHAINPATH:$PATH"
cd "$OSCAMDIR/pcsc-lite-$PCSCVERSION"
if [ "$FOR_PLATFORM" == "DDWRT" ]; then
	if [ "$PCSCVERSION" == "1.7.0" ] || [ "$PCSCVERSION" == "1.7.2" ]; then
		sed "s/as_fn_error \$? \"libusb not found/\$as_echo \$? \"libusb not found/" -i configure
		./configure --host="$MYHOST_TARGET" --target="$MYHOST_TARGET" --enable-static --disable-libudev LIBUSB_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/include/libusb-1.0" LIBUSB_LIBS="$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/lib/libusb-1.0.so" --prefix="$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt"
	else
		sed "s/as_fn_error \"libusb not found/\$as_echo \"libusb not found/" -i configure
		./configure --host="$MYHOST_TARGET" --target="$MYHOST_TARGET" --enable-static --disable-libhal LIBUSB_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/include" LIBUSB_LIBS="$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/lib/libusb-1.0.so" --prefix="$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt"
	fi
else
	if [ "$PCSCVERSION" == "1.7.0" ] || [ "$PCSCVERSION" == "1.7.2" ]; then
		sed "s/as_fn_error \$? \"libusb not found/\$as_echo \$? \"libusb not found/" -i configure
	./configure --host="$MYHOST_TARGET" --target="$MYHOST_TARGET" --enable-static --disable-libudev LIBUSB_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/include/libusb-1.0" LIBUSB_LIBS="$MYLIBS/$FOR_PLATFORM/lib/libusb-1.0.so" --prefix="$MYLIBS/$FOR_PLATFORM"
	else
		sed "s/as_fn_error \"libusb not found/\$as_echo \$? \"libusb not found/" -i configure
	./configure --host="$MYHOST_TARGET" --target="$MYHOST_TARGET" --enable-static --disable-libhal LIBUSB_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/include" LIBUSB_LIBS="$MYLIBS/$FOR_PLATFORM/lib/libusb-1.0.so" --prefix="$MYLIBS/$FOR_PLATFORM"
	fi
fi
make_install
make_clean_pcsc_ccid
}

prepare_ccid () {
if [ ! -e "$MYDLDIR/ccid-$CCIDVERSION.tar.bz2" ]; then
	cd "$MYDLDIR"
	spinner
	wget -q -c http://alioth.debian.org/frs/download.php/"$CCIDDLID" &
	spinner $! 
	if [ -e "$MYDLDIR/$CCIDDLID" ]; then
		mv "$MYDLDIR/$CCIDDLID" "$MYDLDIR/ccid-$CCIDVERSION.tar.bz2"
	fi
fi
if [ ! -e "$OSCAMDIR/ccid-$CCIDVERSION" ]; then
	tar -xvf "$MYDLDIR/ccid-$CCIDVERSION.tar.bz2" -C "$OSCAMDIR/" >/dev/null 2>&1 
fi
export PATH="$MYCHAINPATH:$PATH"
cd "$OSCAMDIR/ccid-$CCIDVERSION"
if [ "$CCIDVERSION" == "1.4.2" ] || [ "$CCIDVERSION" == "1.4.3" ]; then
	./configure --host="$MYHOST_TARGET" --target="$MYHOST_TARGET" --prefix= LIBS=-lpthread --enable-usbdropdir=/lib/pcsc/drivers --enable-ccidtwindir=/lib/pcsc/drivers/serial LIBUSB_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/include/libusb-1.0" LIBUSB_LIBS="$MYLIBS/$FOR_PLATFORM/lib/libusb-1.0.so" PCSC_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/include/PCSC" PCSC_LIBS="$MYLIBS/$FOR_PLATFORM/$MYPCSCFILE"
else
	./configure --host="$MYHOST_TARGET" --target="$MYHOST_TARGET" --prefix= LIBS=-lpthread --enable-usbdropdir=/lib/pcsc/drivers --enable-ccidtwindir=/lib/pcsc/drivers/serial LIBUSB_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/include" LIBUSB_LIBS="$MYLIBS/$FOR_PLATFORM/lib/libusb-1.0.so" PCSC_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/include/PCSC" PCSC_LIBS="$MYLIBS/$FOR_PLATFORM/$MYPCSCFILE"
fi
make
make DESTDIR="$MYLIBS/$FOR_PLATFORM" install
make clean >/dev/null 2>&1
export PATH="$ORIG_PATH"
}

prepare_ccid_special () {
if [ ! -e "$MYDLDIR/ccid-$CCIDVERSION.tar.bz2" ]; then
	cd "$MYDLDIR"
	spinner
	wget -q -c http://alioth.debian.org/frs/download.php/"$CCIDDLID" &
	spinner $! 
	if [ -e "$MYDLDIR/$CCIDDLID" ]; then
		mv "$MYDLDIR/$CCIDDLID" "$MYDLDIR/ccid-$CCIDVERSION.tar.bz2"
	fi
fi
if [ ! -e "$OSCAMDIR/ccid-$CCIDVERSION" ]; then
	tar -xvf "$MYDLDIR/ccid-$CCIDVERSION.tar.bz2" -C "$OSCAMDIR/" >/dev/null 2>&1 
fi
export PATH="$MYCHAINPATH:$PATH"
cd "$OSCAMDIR/ccid-$CCIDVERSION"
if [ "$FOR_PLATFORM" == "ASUSWL" ]; then
		if [ "$CCIDVERSION" == "1.4.2" ] || [ "$CCIDVERSION" == "1.4.3" ]; then
			sed "s/as_fn_error \$? \"libusb not found/\$as_echo \$? \"libusb not found/" -i configure
			./configure --host="$MYHOST_TARGET" --target="$MYHOST_TARGET" --prefix= LIBS=-lpthread --enable-usbdropdir=/opt/lib/pcsc/drivers --enable-ccidtwindir=/opt/lib/pcsc/drivers/serial LIBUSB_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/opt/include/libusb-1.0" LIBUSB_LIBS="$MYLIBS/$FOR_PLATFORM/opt/lib/libusb-1.0.so" PCSC_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/opt/include/PCSC" PCSC_LIBS="$MYLIBS/$FOR_PLATFORM/opt/$MYPCSCFILE"
		else
			sed "s/as_fn_error \"libusb not found/\$as_echo \"libusb not found/" -i configure
			./configure --host=mipsel-linux-uclibc --target=mipsel-linux-uclibc --prefix= LIBS=-lpthread --enable-usbdropdir=/opt/lib/pcsc/drivers --enable-ccidtwindir=/opt/lib/pcsc/drivers/serial LIBUSB_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/opt/include" LIBUSB_LIBS="$MYLIBS/$FOR_PLATFORM/opt/lib/libusb-1.0.so" PCSC_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/opt/include/PCSC" PCSC_LIBS="$MYLIBS/$FOR_PLATFORM/opt/$MYPCSCFILE"
		fi
		make
		make DESTDIR="$MYLIBS/$FOR_PLATFORM" install
else
	if [ "$FOR_PLATFORM" == "DDWRT" ]; then
		if [ "$CCIDVERSION" == "1.4.2" ] || [ "$CCIDVERSION" == "1.4.3" ]; then
			sed "s/as_fn_error \$? \"libusb not found/\$as_echo \$? \"libusb not found/" -i configure
			./configure --host="$MYHOST_TARGET" --target="$MYHOST_TARGET" --prefix= LIBS=-lpthread --enable-usbdropdir=/opt/lib/pcsc/drivers --enable-ccidtwindir=/opt/lib/pcsc/drivers/serial LIBUSB_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/include/libusb-1.0" LIBUSB_LIBS="$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/lib/libusb-1.0.so" PCSC_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/include/PCSC" PCSC_LIBS="$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/$MYPCSCFILE"
		else
			sed "s/as_fn_error \"libusb not found/\$as_echo \"libusb not found/" -i configure
			./configure --host=mipsel-linux-uclibc --target=mipsel-linux-uclibc --prefix= LIBS=-lpthread --enable-usbdropdir=/opt/lib/pcsc/drivers --enable-ccidtwindir=/opt/lib/pcsc/drivers/serial LIBUSB_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/include" LIBUSB_LIBS="$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/lib/libusb-1.0.so" PCSC_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/include/PCSC" PCSC_LIBS="$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/$MYPCSCFILE"
		fi
		make
		make DESTDIR="$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28" install
	else
		if [ "$CCIDVERSION" == "1.4.2" ] || [ "$CCIDVERSION" == "1.4.3" ]; then
			sed "s/as_fn_error \$? \"libusb not found/\$as_echo \$? \"libusb not found/" -i configure
			./configure --host="$MYHOST_TARGET" --target="$MYHOST_TARGET" --prefix= LIBS=-lpthread --enable-usbdropdir=/lib/pcsc/drivers --enable-ccidtwindir=/lib/pcsc/drivers/serial LIBUSB_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/include/libusb-1.0" LIBUSB_LIBS="$MYLIBS/$FOR_PLATFORM/lib/libusb-1.0.so" PCSC_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/include/PCSC" PCSC_LIBS="$MYLIBS/$FOR_PLATFORM/$MYPCSCFILE"
		else
			sed "s/as_fn_error \"libusb not found/\$as_echo \"libusb not found/" -i configure
			./configure --host="$MYHOST_TARGET" --target="$MYHOST_TARGET" --prefix= LIBS=-lpthread --enable-usbdropdir=/lib/pcsc/drivers --enable-ccidtwindir=/lib/pcsc/drivers/serial LIBUSB_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/include" LIBUSB_LIBS="$MYLIBS/$FOR_PLATFORM/lib/libusb-1.0.so" PCSC_CFLAGS=-I"$MYLIBS/$FOR_PLATFORM/include/PCSC" PCSC_LIBS="$MYLIBS/$FOR_PLATFORM/$MYPCSCFILE"
		fi
		make
		make DESTDIR="$MYLIBS/$FOR_PLATFORM" install
	fi
fi
make clean >/dev/null 2>&1
export PATH="$ORIG_PATH"
make_clean_pcsc_ccid
}

make_clean_pcsc_ccid () {
if [ "$PCSCVERSION" == "1.7.0" ] || [ "$PCSCVERSION" == "1.7.0" ] || [ "$CCIDVERSION" == "1.4.2" ] || [ "$CCIDVERSION" == "1.4.3" ]; then
	sed "s/\$as_echo \$? \"libusb not found/as_fn_error \$? \"libusb not found/" -i configure
else
	sed "s/\$as_echo \"libusb not found/as_fn_error \"libusb not found/" -i configure
fi
}

prepare_libusb () {
echo -e "DOWNLOAD/Prepare LIBUSB..."
if [ ! -e "$MYDLDIR/libusb-$LIBUSBVER.tar.bz2" ]; then
	cd "$MYDLDIR"
	spinner
	wget -q -c http://downloads.sourceforge.net/project/libusb/libusb-1.0/libusb-"$LIBUSBVER"/libusb-"$LIBUSBVER".tar.bz2 &
	spinner $! 
fi
if [ ! -e "$OSCAMDIR/libusb-$LIBUSBVER" ]; then
	tar -xvf "$MYDLDIR/libusb-$LIBUSBVER.tar.bz2" -C "$OSCAMDIR/" >/dev/null 2>&1
fi
cd "$OSCAMDIR/libusb-$LIBUSBVER"
export PATH="$MYCHAINPATH:$PATH"
if [ "$FOR_PLATFORM" == "NSLU2UNSLUNG" ] || [ "$FOR_PLATFORM" == "AZBOX" ]; then
	sed "s/#define __LIBUSB_USBFS_H__/#define __LIBUSB_USBFS_H__\n#define CLOCK_MONOTONIC 1/" -i libusb/os/linux_usbfs.h
fi
if [ "$FOR_PLATFORM" == "DDWRT" ]; then
	./configure --host="$MYHOST_TARGET" --target="$MYHOST_TARGET" --prefix="$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt"
elif [ "$FOR_PLATFORM" == "ASUSWL" ]; then
	./configure --host="$MYHOST_TARGET" --target="$MYHOST_TARGET" --prefix="$MYLIBS/$FOR_PLATFORM/opt"
else
	./configure --host="$MYHOST_TARGET" --target="$MYHOST_TARGET" --prefix="$MYLIBS/$FOR_PLATFORM"
fi
make_install
if [ "$FOR_PLATFORM" == "NSLU2UNSLUNG" ] || [ "$FOR_PLATFORM" == "AZBOX" ]; then
	sed "/#define CLOCK_MONOTONIC 1/d" -i libusb/os/linux_usbfs.h
fi
}

prepare_ext () {
if [ "$LBUSB" == "y" ]; then
	if [ ! -e "$MYLIBS/$FOR_PLATFORM/$MYLIBUSBFILE" ]; then
		prepare_libusb
	fi
	if [ "$SMARTREADER" == "y" ]; then
		if [ ! -e "$MYLIBS/$FOR_PLATFORM/$MYPCSCFILE" ]; then
			prepare_pcsc
		fi
		if [ ! -e "$MYLIBS/$FOR_PLATFORM/$MYCCIDFILE" ]; then
			prepare_ccid
		fi
	fi
fi
cd "$OSCAMDIR"
}

prepare_ext_spec () {
if [ "$LBUSB" == "y" ]; then
	if [ "$FOR_PLATFORM" == "ASUSWL" ]; then
		if [ ! -e "$MYLIBS/$FOR_PLATFORM/opt/$MYLIBUSBFILE" ]; then
			prepare_libusb
			cd "$OSCAMDIR"
		fi
	else
		if [ ! -e "$MYLIBS/$FOR_PLATFORM/$MYLIBUSBFILE" ]; then
			prepare_libusb
			cd "$OSCAMDIR"
		fi
	fi
	if [ "$SMARTREADER" == "y" ]; then
		if [ "$FOR_PLATFORM" == "ASUSWL" ]; then
			if [ ! -e "$MYLIBS/$FOR_PLATFORM/opt/$MYPCSCFILE" ]; then
				prepare_pcsc
			fi
		elif [ ! -e "$MYLIBS/$FOR_PLATFORM/$MYPCSCFILE" ]; then
				prepare_pcsc_special
		fi
		if [ "$FOR_PLATFORM" == "ASUSWL" ]; then
			if [ ! -e "$MYLIBS/$FOR_PLATFORM/opt/$MYCCIDFILE" ]; then
				prepare_ccid_special
			fi
		else
			if [ ! -e "$MYLIBS/$FOR_PLATFORM/$MYCCIDFILE" ]; then
				prepare_ccid_special
			fi
		fi
	fi
fi
cd "$OSCAMDIR"
}

chain_error () {
echo ""
echo -e "\033[1;37;43mTOOLCHAIN NOT FOUND!!! 
GO BACK TO MAIN-MENU NOW\033[0m"
sleep 2
$0
exit
}

prepare_build () {
if [ "$WEBIF" == "y" ] && [ "$LBUSB" == "y" ] && [ "$SMARTREADER" == "n" ] && [ "$ONEINALLCONF" == "n" ]; then
	echo -e "\033[1;37;42mBuild $FOR_PLATFORM-libusb-Webif-Default\033[0m"
	INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/DEFAULT/LIBUSB/WEBIF"
	CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-DEFAULT-LIBUSB-WEBIF"
elif [ "$WEBIF" == "y" ] && [ "$SMARTREADER" == "y" ] && [ "$ONEINALLCONF" == "n" ]; then
	echo -e "\033[1;37;42mBuild $FOR_PLATFORM-pcsc-Webif-Default\033[0m"
	INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/DEFAULT/PCSC/WEBIF"
	CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-DEFAULT-PCSC-WEBIF"
elif [ "$WEBIF" == "y" ] && [ "$LBUSB" == "y" ] && [ "$SMARTREADER" == "n" ] && [ "$ONEINALLCONF" == "y" ]; then
	echo -e "\033[1;37;42mBuild $FOR_PLATFORM-libusb-Webif-OneInAll\033[0m"
	INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/ONEINALL/LIBUSB/WEBIF"
	CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-ONEINALL-LIBUSB-WEBIF"
elif [ "$WEBIF" == "y" ] && [ "$SMARTREADER" == "y" ] && [ "$ONEINALLCONF" == "y" ]; then
	echo -e "\033[1;37;42mBuild $FOR_PLATFORM-pcsc-Webif-OneInAll\033[0m"
	INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/ONEINALL/PCSC/WEBIF"
	CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-ONEINALL-PCSC-WEBIF"
elif [ "$WEBIF" == "n" ] && [ "$LBUSB" == "y" ] && [ "$SMARTREADER" == "n" ] && [ "$ONEINALLCONF" == "n" ]; then
	echo -e "\033[1;37;42mBuild $FOR_PLATFORM-libusb-Default\033[0m"
	INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/DEFAULT/LIBUSB"
	CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-DEFAULT-LIBUSB"
elif [ "$WEBIF" == "n" ] && [ "$SMARTREADER" == "y" ] && [ "$ONEINALLCONF" == "n" ]; then
	echo -e "\033[1;37;42mBuild $FOR_PLATFORM-pcsc-Default\033[0m"
	INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/DEFAULT/PCSC"
	CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-DEFAULT-PCSC"
elif [ "$WEBIF" == "n" ] && [ "$LBUSB" == "y" ] && [ "$SMARTREADER" == "n" ] && [ "$ONEINALLCONF" == "y" ]; then
	echo -e "\033[1;37;42mBuild $FOR_PLATFORM-libusb-OneInAll\033[0m"
	INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/ONEINALL/LIBUSB"
	CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-ONEINALL-LIBUSB"
elif [ "$WEBIF" == "n" ] && [ "$SMARTREADER" == "y" ] && [ "$ONEINALLCONF" == "y" ]; then
	echo -e "\033[1;37;42mBuild $FOR_PLATFORM-pcsc-OneInAll\033[0m"
	INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/ONEINALL/PCSC"
	CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-ONEINALL-PCSC"
elif [ "$WEBIF" == "y" ] && [ "$LBUSB" == "n" ] && [ "$ONEINALLCONF" == "n" ]; then
	echo -e "\033[1;37;42mBuild $FOR_PLATFORM-Webif-Default\033[0m"
	INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/DEFAULT/WEBIF"
	CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-DEFAULT-WEBIF"
elif [ "$WEBIF" == "y" ] && [ "$LBUSB" == "n" ] && [ "$ONEINALLCONF" == "y" ]; then
	echo -e "\033[1;37;42mBuild $FOR_PLATFORM-Webif-OneInAll\033[0m"
	INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/ONEINALL/WEBIF"
	CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-ONEINALL-WEBIF"
elif [ "$WEBIF" == "n" ] && [ "$LBUSB" == "n" ] && [ "$ONEINALLCONF" == "y" ]; then
	echo -e "\033[1;37;42mBuild $FOR_PLATFORM-Default-OneInAll\033[0m"
	INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/ONEINALL"
	CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-ONEINALL"
else
	echo -e "\033[1;37;42mBuild $FOR_PLATFORM-Default\033[0m"
	INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/DEFAULT"
	CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-DEFAULT"
fi
}

do_it () {
if [ "$LBUSB" == "y" ]; then
	if [ "$FOR_PLATFORM" == "ASUSWL" ]; then
		if [ "$SMARTREADER" == "y" ]; then
			sed "s@OS_PTLI=.* \\\@OS_PTLI=\"-lpthread -lpcsclite -lusb-1.0 -lrt -ldl\" \\\\@g" -i "$OSCAMDIR/Makefile"
			sed "s@DS_CFLAGS=.* \\\@DS_CFLAGS=\"-c -I$MYLIBS/$FOR_PLATFORM/opt/include -I$MYLIBS/$FOR_PLATFORM/opt/include/PCSC\" \\\\@g" -i "$OSCAMDIR/Makefile"
			sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"-L$MYLIBS/$FOR_PLATFORM/opt/lib $ISSTATIC -I$MYLIBS/$FOR_PLATFORM/opt/include/PCSC -I$MYLIBS/$FOR_PLATFORM/opt/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
		else
			sed "s@OS_PTLI=.* \\\@OS_PTLI=\"-lpthread -lusb-1.0 -lrt -ldl\" \\\\@g" -i "$OSCAMDIR/Makefile"
			sed "s@DS_CFLAGS=\"-c\" \\\@DS_CFLAGS=\"-c -I$MYLIBS/$FOR_PLATFORM/opt/include -I$MYLIBS/$FOR_PLATFORM/opt/include/libusb-1.0\" \\\\@g" -i "$OSCAMDIR/Makefile"
			sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"-L$MYLIBS/$FOR_PLATFORM/opt/lib $ISSTATIC -I$MYLIBS/$FOR_PLATFORM/opt/include -I$MYLIBS/$FOR_PLATFORM/opt/include/libusb-1.0\" \\\\@g" -i "$OSCAMDIR/Makefile"
		fi
	else
		if [ "$SMARTREADER" == "y" ]; then
			if [ "$FOR_PLATFORM" == "COOLSTREAM" ]; then
				sed  "s@^#ifndef BYTE@#ifndef __BYTE__\n#define __BYTE__@g" -i "$OSCAMDIR/external_LIBS/COOLSTREAM/include/PCSC/wintypes.h"
				sed  "s@^#ifndef BYTE@#ifndef __BYTE__\n#define __BYTE__@g" -i "$OSCAMDIR/csctapi/defines.h"
			fi
				sed "s@OS_PTLI=.* \\\@OS_PTLI=\"-lpthread -lpcsclite -lusb-1.0 -lrt -ldl\" \\\\@g" -i "$OSCAMDIR/Makefile"
				sed "s@DS_CFLAGS=.* \\\@DS_CFLAGS=\"-c -I$MYLIBS/$FOR_PLATFORM/include -I$MYLIBS/$FOR_PLATFORM/include/PCSC\" \\\\@g" -i "$OSCAMDIR/Makefile"
				sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"-L$MYLIBS/$FOR_PLATFORM/lib -I$MYLIBS/$FOR_PLATFORM/include/PCSC $ISSTATIC -I$MYLIBS/$FOR_PLATFORM/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
		else
			sed "s@OS_PTLI=.* \\\@OS_PTLI=\"-lpthread -lusb-1.0 -lrt -ldl\" \\\\@g" -i "$OSCAMDIR/Makefile"
			sed "s@DS_CFLAGS=\"-c\" \\\@DS_CFLAGS=\"-c -I$MYLIBS/$FOR_PLATFORM/include -I$MYLIBS/$FOR_PLATFORM/include/libusb-1.0\" \\\\@g" -i "$OSCAMDIR/Makefile"
			sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"-L$MYLIBS/$FOR_PLATFORM/lib -I$MYLIBS/$FOR_PLATFORM/include $ISSTATIC -I$MYLIBS/$FOR_PLATFORM/include/libusb-1.0\" \\\\@g" -i "$OSCAMDIR/Makefile"
		fi
	fi
	make $MYCROSS
	if [ "$SMARTREADER" == "y" ]; then
		if [ "$FOR_PLATFORM" == "COOLSTREAM" ]; then
			sed  "s@^#ifndef __BYTE__@#ifndef BYTE@g" -i "$OSCAMDIR/external_LIBS/COOLSTREAM/include/PCSC/wintypes.h"
			sed "/#define __BYTE__/d" -i "$OSCAMDIR/external_LIBS/COOLSTREAM/include/PCSC/wintypes.h"
			sed  "s@^#ifndef __BYTE__@#ifndef BYTE@g" -i "$OSCAMDIR/csctapi/defines.h"
			sed "/#define __BYTE__/d" -i "$OSCAMDIR/csctapi/defines.h"
		fi
	fi
else
	if [ "$FOR_PLATFORM" == "ASUSWL" ]; then
		sed "s@OS_PTLI=.* \\\@OS_PTLI=\"-lpthread\" \\\\@g" -i "$OSCAMDIR/Makefile"
		sed "s@DS_CFLAGS=.* \\\@DS_CFLAGS=\"-c -I$MYLIBS/$FOR_PLATFORM/opt/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
		sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"-L$MYLIBS/$FOR_PLATFORM/opt/lib $ISSTATIC -I$MYLIBS/$FOR_PLATFORM/opt/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
		make $MYCROSS
	else
		sed "s@OS_PTLI=.* \\\@OS_PTLI=\"-lpthread\" \\\\@g" -i "$OSCAMDIR/Makefile"
		sed "s@DS_CFLAGS=.* \\\@DS_CFLAGS=\"-c -I$MYLIBS/$FOR_PLATFORM/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
		sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"-L$MYLIBS/$FOR_PLATFORM/lib $ISSTATIC -I$MYLIBS/$FOR_PLATFORM/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
		make $MYCROSS
	fi
fi
}

allready_exist () {
COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME"`
OSCAMPATH="${INSTALLDIR##*$HOME}"
if [ ! -z "$COPIED" ]; then
	echo -e "\033[1;37;42mALREADY EXISTS!!!\033[0m"
fi
}

do_reset () {
cd "$INSTALLDIR"
for i in "$CAMNAME"; do rm "$i"; done >/dev/null 2>&1
cd "$OSCAMDIR"
sed "/LIBUSB=/d" -i "$OSCAMDIR/Makefile"
sed "s@OS_PTLI=.*\\\\@OS_PTLI=\"-lpthread\" \\\@g" -i "$OSCAMDIR/Makefile"
sed "s@DS_CFLAGS=.*\\\\@DS_CFLAGS=\"-c\" \\\\@g" -i "$OSCAMDIR/Makefile"
sed "s@DS_LDFLAGS=.*\\\\@DS_LDFLAGS=\"\" \\\\@g" -i "$OSCAMDIR/Makefile"
if [ "$FOR_PLATFORM" == "DDWRT" ]; then
	sed "s@linux-uclibc-gcc-$DDWRTPATH \\\@linux-uclibc-gcc \\\\@g" -i "$OSCAMDIR/Makefile"
	sed "s/FRITZUCLIBC=.*/FRITZUCLIBC=$FRITZUCLIBCOLD/g" -i "$EASYCONF"
fi
cp "$OSCAMDIR"/Distribution/oscam* "$INSTALLDIR"
cd "$INSTALLDIR"
for i in *oscam-*svn"$VERSION"*; do mv "$i" ""${i/oscam-*svn"$VERSION"*}"$CAMNAME"; done
cd "$OSCAMDIR"
}

check_build_all () {
COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME"`
		OSCAMPATH="${INSTALLDIR##*$HOME}"
		if [ ! -z "$COPIED" ]; then
			success
			if [ "$BUILDALL" == "1" ] || [ "$BUILDALL" == "2" ] || [ "$BUILDALL" == "3" ] || [ "$BUILDALL" == "4" ] || [ "$BUILDALL" == "5" ] || [ "$BUILDALL" == "6" ] || [ "$BUILDALL" == "7" ] || [ "$BUILDALL" == "8" ] || [ "$BUILDALL" == "9" ] || [ "$BUILDALL" == "10" ] || [ "$BUILDALL" == "11" ] || [ "$BUILDALL" == "12" ] || [ "$BUILDALL" == "13" ] || [ "$BUILDALL" == "14" ]; then
				. "$EASYCONF"
				cd "$OSCAMDIR"
				$0 2 "$GO_TO"
				exit
			else
				goback
			fi
		else
			error
		fi
}

check_myconf () {
if [ -z "`cat ./oscam-config.h | grep "//#define OIA"`" ]; then
	ONEINALLCONF="y"
else
	ONEINALLCONF="n"
fi
if [ -z "`cat ./oscam-config.h | grep "//#define WEBIF"`" ]; then
	WEBIF="y"
else
	WEBIF="n"
fi
if [ -z "`cat ./oscam-config.h | grep "//#define HAVE_LIBUSB"`" ]; then
	LBUSB="y"
else
	LBUSB="n"
fi
if [ -z "`cat ./oscam-config.h | grep "//#define WITH_PCSC"`" ]; then
	SMARTREADER="y"
else
	SMARTREADER="n"
fi
if [ -z "`cat "$OSCAMDIR/oscam-config.h" | grep "//#define FB7390"`" ]; then
	FB7390="y"
	sed "s@FRITZUCLIBC=.*@FRITZUCLIBC=mips@g" -i "$EASYCONF"
	sed "s@FRITZVERSION=.*@FRITZVERSION=-DMIPS@g" -i "$EASYCONF"
else
	FB7390="n"
	sed "s@FRITZUCLIBC=.*@FRITZUCLIBC=mipsel@g" -i "$EASYCONF"
	sed "s@FRITZVERSION=.*@FRITZVERSION=-DMIPSEL@g" -i "$EASYCONF"
fi
if [ -z "`cat ./oscam-config.h | grep "//#define DDWRT346"`" ]; then
	DDWRT346="y"
else
	DDWRT346="n"
fi
if [ "$FOR_PLATFORM" == "ASUSWL" ] || [ "$FOR_PLATFORM" == "DOCKSTAR" ]; then
	ISSTATIC="-static"
else
	if [ -z "`cat ./oscam-config.h | grep "//#define BUILD_STATIC"`" ]; then
		ISSTATIC="-static"
	else
		ISSTATIC=""
	fi
fi
}

turn_api () {
if [ "$1" == "ON" ]; then
	if [ "$FOR_PLATFORM" == "DREAMBOX" ] || [ "$FOR_PLATFORM" == "COOLSTREAM" ] || [ "$FOR_PLATFORM" == "AZBOX" ] || [ "$FOR_PLATFORM" == "PPC_DREAM" ] || [ "$FOR_PLATFORM" == "PPC_DB2_DREAM_OLD" ] || [ "$FOR_PLATFORM" == "SH4-DVBAPI" ]; then
		sed "s@.*#define HAVE_DVBAPI@#define HAVE_DVBAPI@g" -i "$OSCAMDIR/oscam-config.h"
		sed "s@.*#define WITH_STAPI@\/\/#define WITH_STAPI@g" -i "$OSCAMDIR/oscam-config.h"
	elif [ "$FOR_PLATFORM" == "SH4-STAPI" ]; then
		sed "s@.*#define WITH_STAPI@#define WITH_STAPI@g" -i "$OSCAMDIR/oscam-config.h"
		sed "s@.*#define HAVE_DVBAPI@#define HAVE_DVBAPI@g" -i "$OSCAMDIR/oscam-config.h"
	fi
# turn all off
else
	sed "s@.*#define WITH_STAPI@\/\/#define WITH_STAPI@g" -i "$OSCAMDIR/oscam-config.h"
	sed "s@.*#define HAVE_DVBAPI@\/\/#define HAVE_DVBAPI@g" -i "$OSCAMDIR/oscam-config.h"
fi
}

# originally created by schischu and konfetti
# fedora parts prepared by lareq
# fedora/suse/ubuntu scripts merged by kire pudsje (kpc)

# make sure defines have not already been defined
UBUNTU=
FEDORA=
SUSE=

# Try to detect the distribution
if `which lsb_release > /dev/null 2>&1`; then 
	case `lsb_release -s -i` in
		Debian*) UBUNTU=1; INSTALL="apt-get -y install"; PDF="evince"; USERS="su -c";;
		Fedora*) FEDORA=1; INSTALL="yum install -y";     PDF="evince"; USERS="sudo";;
		SUSE*)   SUSE=1;   INSTALL="zypper install -y";  PDF="kpdf";   USERS="su";;
		Ubuntu*) UBUNTU=1; INSTALL="apt-get -y install"; PDF="evince"; USERS="sudo";;
	esac
fi

# Not detected by lsb_release, try release files
if [ -z "$FEDORA$SUSE$UBUNTU" ]; then
	if   [ -f /etc/redhat-release ]; then FEDORA=1; PDF="evince"; INSTALL="yum install -y";     USERS="sudo"; 
	elif [ -f /etc/fedora-release ]; then FEDORA=1; PDF="evince"; INSTALL="yum install -y";     USERS="sudo"; 
	elif [ -f /etc/SuSE-release ];   then SUSE=1;   PDF="kpdf";   INSTALL="zypper install -y";  USERS="su";
	elif [ -f /etc/debian_version ]; then UBUNTU=1; PDF="evince"; INSTALL="apt-get -y install"; USERS="su -c";
	fi
fi

if [ -e "$MAINDIR/oscam-svn" ]; then
	if [ -e "$MYLIBS" ]; then
		chmod 777 -R "$MYLIBS"
		LIBSOK=`find "$MYLIBS" -name "libcrypto.so*"`
		LIBSA=`find "$MYLIBS" -name "libcrypto.a"`
		if [ -z	"$LIBSOK" ] && [ ! -z "$LIBSA" ]; then
			echo -e "\033[1;37;43mExternal_LIBS: No libcrypto.so found!
Please del them and rebuild!\033[0m"
			read -p "Should i del folder yor you now? (y/N) "
			if [ "$REPLY" == "y" ] || [ "$REPLY" == "Y" ]; then
				rm -rf "$MYLIBS"
			fi
		fi
	fi
	for i in $MYPLATFORMS
	do
		if [ ! -e "$MYLIBS/$i" ]; then
			mkdir -p "$MYLIBS/$i"
		fi
	done
	for a in $MYDDWRT
	do
		if [ ! -e "$MYLIBS/DDWRT/$a" ]; then
			mkdir -p "$MYLIBS/DDWRT/$a/opt"
		fi
	done
	if [ ! -e "$MYLIBS/ASUSWL/opt" ]; then
		mkdir -p "$MYLIBS/ASUSWL/opt"
	fi
	for b in $MYEASY
	do
		mkdir -p "$EASYDIR/$b"
	done
	if [ -e "$MYCHAINS/dd-wrt" ] && [ ! -e "$MYCHAINS/DDWRT" ]; then
		mv "$MYCHAINS/dd-wrt" "$MYCHAINS/DDWRT"
	fi
	if [ ! -z "`cat ./oscam-config.h | grep "//#define WITH_LIBCRYPTO_SO"`" ]; then
		for l in $MYLIBCRYPTOS
		do
			for i in $MYPLATFORMS
			do
				if [ ! -z "`find "$MYLIBS/"$i"/lib" -name "$l"`" ]; then
					find "$MYLIBS/"$i"/lib" -name "$l" -exec mv {} "$MYLIBS/"$i"/lib/"$l.off"" \;

				fi
			done
			for a in $MYDDWRT
			do
				if [ ! -z "`find "$MYLIBS/DDWRT/"$a"/opt/lib" -name "$l"`" ]; then
					find "$MYLIBS/DDWRT/"$a"/opt/lib" -name "$l" -exec mv {} "$MYLIBS/DDWRT/"$a"/opt/lib/"$l.off"" \;
				fi
			done
		done > /dev/null 2>&1
		chmod 777 -R "$MYLIBS"
	elif [ -z "`cat ./oscam-config.h | grep "//#define WITH_LIBCRYPTO_SO"`" ]; then
		for l in $MYLIBCRYPTOS
		do
			for i in $MYPLATFORMS
			do
				if [ ! -z "`find "$MYLIBS/"$i"/lib" -name "$l.off"`" ]; then
					find "$MYLIBS/"$i"/lib" -name "$l.off" -exec mv {} "$MYLIBS/"$i"/lib/"$l"" \;
				fi
			done
			for a in $MYDDWRT
			do
				if [ ! -z "`find "$MYLIBS/DDWRT/"$a"/opt/lib" -name "$l.off"`" ]; then
					find "$MYLIBS/DDWRT/"$a"/opt/lib" -name "$l.off" -exec mv {} "$MYLIBS/DDWRT/"$a"/opt/lib/"$l"" \;
				fi
			done
		done > /dev/null 2>&1
		chmod 777 -R "$MYLIBS"
	fi
	# check if EasyBuild.conf is actual
	if [ -e "$EASYCONF" ] && [ -z "`cat "$EASYCONF" | grep "PPC_DREAMCONFIG="`" ]; then
		echo -e "\033[1;37;43mEasyBuild.conf NOT ACTUAL..
set them now NEW...
move old conf to EasyBuild.conf.old \033[0m"
		mv "$EASYCONF" "$EASYCONF".old
		if [ -e "$EASYINFO" ]; then
			rm "$EASYINFO"
		fi
		if [ -e "$OSCAMDIR/Makefile.save" ]; then
			rm "$OSCAMDIR/Makefile"
			mv "$OSCAMDIR/Makefile.save" "$OSCAMDIR/Makefile"
		fi
		if [ -e "$MYBUILDDIR/PPC_DB2_DREAM" ]; then
			mv "$MYBUILDDIR/PPC_DB2_DREAM" "$MYBUILDDIR/PPC_DREAM"
		fi
		if [ -e "$MYLIBS/PPC_DB2_DREAM" ]; then
			if [ -e "$MYLIBS/PPC_DREAM" ]; then
				rm -rf "$MYLIBS/PPC_DREAM"
			fi
			mv "$MYLIBS/PPC_DB2_DREAM" "$MYLIBS/PPC_DREAM"
		fi
		sleep 2
		$0
		exit
	fi
	if [ ! -e "$EASYCONF" ]; then
		touch "$EASYCONF"
		if [ -z "`cat "$OSCAMDIR/oscam-config.h" | grep "//#define FB7390"`" ]; then
			MYFREETZ="freetz-trunk7390"
		else
			MYFREETZ="freetz-trunk"
		fi
		echo "DREAMCHAIN=$MYCHAINS/mipsel-unknown-linux-gnu/bin
FRITZCHAIN=$MYCHAINS/$MYFREETZ/toolchain/build/gcc-$FRITZGCCVERSION-0.9.29/mipsel-linux-uclibc/bin
SH4CHAIN=$MYCHAINS/devkit_sh4/tdt/tdt/tufsbox/devkit/sh4/bin
COOLSTREAMCHAIN=$MYCHAINS/COOLSTREAM-git/cross/bin
NSLU2UNSLUNGCHAIN=$MYCHAINS/armv5b-softfloat-linux/gcc-3.3.5-glibc-2.2.5/bin
PPCDMCHAIN=$MYCHAINS/powerpc-tuxbox-linux-gnu/bin
PPCDMOLDCHAIN=$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2/dbox2/cdk/bin
FONERACHAIN=$MYCHAINS/OpenWrt-SDK-atheros-2.6-for-Linux-i686/staging_dir_mips/bin
AZBOXCHAIN=$MYCHAINS/AZBOX-git/smp86xx_toolchain.20080505/build_mipsel_nofpu/staging_dir/bin
DOCKSTARCHAIN=$MYCHAINS/DockStar/backfire/staging_dir/toolchain-arm_v5te_gcc-4.3.3+cs_uClibc-0.9.30.1_eabi/usr/bin
TPLINKCHAIN=$MYCHAINS/OpenWrt-SDK-ar71xx/staging_dir/toolchain-mips_r2_gcc-4.3.3+cs_uClibc-0.9.30.1/bin
ASUSWLCHAIN=$MYCHAINS/ASUSWL/MYASUS/bin
###PCSC##########
PCSCVERSION=1.7.2
PCSCDLID=3533
CCIDVERSION=1.4.3
CCIDDLID=3535
###OLD PCSC 2##########
#PCSCVERSION=1.7.0
#PCSCDLID=3527
#CCIDVERSION=1.4.2
#CCIDDLID=3518
###OLD_PCSC#######
#PCSCVERSION=1.6.4
#PCSCDLID=3337
#CCIDVERSION=1.4.0
#CCIDDLID=3333
##################" >> "$EASYCONF"
		if [ -e "$MYCHAINS/devkit_sh4" ] && [ -e "$MYCHAINS/devkit_sh4/tdt/tdt/cvs/cdk/.deps/libstdc++" ]; then
			echo "SH4TOOLCHAINBUILD=y" >> "$EASYCONF"
		else
			echo "SH4TOOLCHAINBUILD=n" >> "$EASYCONF"
		fi
		if [ -e "$MYCHAINS/COOLSTREAM-git" ] && [ -e "$MYCHAINS/COOLSTREAM-git/cross/bin/arm-nevis-strip" ]; then
			echo "COOLSTREAMTOOLCHAINBUILD=y" >> "$EASYCONF"
		else
			echo "COOLSTREAMTOOLCHAINBUILD=n" >> "$EASYCONF"
		fi
		if [ -e "$MYCHAINS/$MYFREETZ" ] && [ -e "$MYCHAINS/$MYFREETZ/toolchain/.target" ]; then
			echo "FRITZBOXTOOLCHAINBUILD=y" >> "$EASYCONF"
		else
			echo "FRITZBOXTOOLCHAINBUILD=n" >> "$EASYCONF"
		fi
		if [ -e "$MYCHAINS/powerpc-tuxbox-linux-gnu" ]; then
			echo "PPCDREAMBOXTOOLCHAINBUILD=y" >> "$EASYCONF"
		else
			echo "PPCDREAMBOXTOOLCHAINBUILD=n" >> "$EASYCONF"
		fi
		if [ -e "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2" ] && [ -e "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2/dbox2/cdk/bin/powerpc-tuxbox-linux-gnu-gcc" ]; then
			echo "PPCDB2DREAMBOXOLDTOOLCHAINBUILD=y" >> "$EASYCONF"
		else
			echo "PPCDB2DREAMBOXOLDTOOLCHAINBUILD=n" >> "$EASYCONF"
		fi
		if [ -e '$MYCHAINS/"OpenWrt-SDK-atheros-2.6-for-Linux-i686"' ]; then
			echo "FONERATOOLCHAINBUILD=y" >> "$EASYCONF"
		else
			echo "FONERATOOLCHAINBUILD=n" >> "$EASYCONF"
		fi
		if [ -e "$MYCHAINS/AZBOX-git" ] && [ -e "$MYCHAINS/AZBOX-git/smp86xx_toolchain.20080505/build_mipsel_nofpu/staging_dir/bin/mipsel-linux-gcc" ]; then
			echo "AZBOXTOOLCHAINBUILD=y" >> "$EASYCONF"
		else
			echo "AZBOXTOOLCHAINBUILD=n" >> "$EASYCONF"
		fi
		if [ -e "$MYCHAINS/DockStar/backfire" ] && [ -e "$MYCHAINS/DockStar/backfire/staging_dir/toolchain-arm_v5te_gcc-4.3.3+cs_uClibc-0.9.30.1_eabi/usr/bin/arm-openwrt-linux-uclibcgnueabi-gcc-4.3.3" ]; then
			echo "DOCKSTARTOOLCHAINBUILD=y" >> "$EASYCONF"
		else
			echo "DOCKSTARTOOLCHAINBUILD=n" >> "$EASYCONF"
		fi
		if [ -e "$MYCHAINS/OpenWrt-SDK-ar71xx/staging_dir" ]; then
			echo "TPLINKTOOLCHAINBUILD=y" >> "$EASYCONF"
		else
			echo "TPLINKTOOLCHAINBUILD=n" >> "$EASYCONF"
		fi
		if [ -e "$MYCHAINS/ASUSWL/MYASUS/bin" ]; then
			echo "ASUSWLTOOLCHAINBUILD=y" >> "$EASYCONF"
		else
			echo "ASUSWLTOOLCHAINBUILD=n" >> "$EASYCONF"
		fi
		echo "FRITZUCLIBC=mipsel
FRITZVERSION=-DMIPSEL
BUILDALL=0
SMARTREADERON=
PCSCON=
###########################################################
### setup here your default oscam-config paths....      ###
### (default path to oscam.conf/user/server...          ###
###########################################################
DEFAULTCONFIG=/var/keys
DREAMBOXCONFIG=/var/keys
AZBOXCONFIG=/var/keys
COOLSTREAMCONFIG=/var/tuxbox/config
DDWRTCONFIG=/usr/local/etc
DOCKSTARCONFIG=/usr/local/etc
FONERACONFIG=/usr/local/etc
FRITZBOXCONFIG=/var/media/ftp/uStor01/addons/oscam
NSLU2UNSLUNGCONFIG=/usr/local/etc
PCCONFIG=/usr/local/etc
PPC_DREAMCONFIG=/var/tuxbox/config
PPC_DB2_DREAM_OLDCONFIG=/var/tuxbox/config
SH4_DVBAPICONFIG=/var/keys
SH4_STAPICONFIG=/data/keys
TPLINKCONFIG=/usr/local/etc
ASUSWLCONFIG=/opt/etc
###########################################################" >> "$EASYCONF"
		if [ -e /etc/apt/sources.list ];then
			JAUNTY=`cat /etc/apt/sources.list | grep -m1 jaunty | cut -d " " -f3`
			if [ "$JAUNTY" == "jaunty" ]; then
				echo "JAUNTYSRC=y" >> "$EASYCONF"
			else
				echo "JAUNTYSRC=n" >> "$EASYCONF"
			fi
			if [ -e /usr/bin/gcc-3.4 ]; then
				echo "DAPPERSRC=y" >> "$EASYCONF"
			else
				echo "DAPPERSRC=n" >> "$EASYCONF"
			fi
		else
			echo "JAUNTYSRC=n
DAPPERSRC=n" >> "$EASYCONF"
		fi
		PACKINSTALL=`find /usr/bin -name cmake`
		if [ ! -z "$PACKINSTALL" ]; then
			echo "PACKAGES=y" >> "$EASYCONF"
		else
			echo "PACKAGES=n" >> "$EASYCONF"
		fi
		echo "PDFVIEWER=$PDF" >> "$EASYCONF"
	fi
	if [ ! -e "$EASYINFO" ]; then
		touch "$EASYINFO"
		echo "PLATFORM-OVERWIEW-DETAILS:

1) Build MIPSEL-DREAMBOX
DM800/SE/8000/500hd...

2) Build MIPS(EL)-ROUTER-FRITZBOX
Fritzbox 7140/7170/7240/7270/7390...

3) Build SH4-DVBAPI(Enigma2)
UFS910/912/922/Atevio7000/7500,Abcom...

4) Build SH4-STAPI
UFS910/912/922/Atevio7000/7500,Abcom...

5) Build PPC-DREAMBOX
DM7020/600...

6) Build ARM-Coolstream
Coolstream SE/ZEE

7) Build NSLU2-UNSLUNG
NSLU2

8) Build MIPSEL-AZBOX
Azbox

9) Build MIPSEL-ROUTER-DDWRT
Router with DDWRT

10) Build MIPSEL-ROUTER-FONERA
Router with Fonera

11) Build ARM-DOCKSTAR
Dockstar

12) Build MIPS-AR71xx-TP-LINK
TPLINK Router

13) Build MIPSEL-ASUS-WL
ASUS-WL Router

14) Build PPC-DBOX2/DREAMBOX-OLD
DBOX2/DM500...

15) Build i386/x64 LINUX-PC
PC
" > "$EASYINFO"
	fi
	chmod 755 "$EASYCONF"
	. "$EASYCONF"
	make clean >/dev/null 2>&1
	for c in $MYBUILDS
	do
		if [ ! -e "$MYBUILDDIR/$c" ]; then
			mkdir -p "$MYBUILDDIR/$c/DEFAULT/WEBIF" \
				"$MYBUILDDIR/$c/ONEINALL/WEBIF" \
				"$MYBUILDDIR/$c/DEFAULT/LIBUSB/WEBIF" \
				"$MYBUILDDIR/$c/ONEINALL/LIBUSB/WEBIF" \
				"$MYBUILDDIR/$c/DEFAULT/PCSC/WEBIF" \
				"$MYBUILDDIR/$c/ONEINALL/PCSC/WEBIF"
		fi
	done
	for d in $MYDDWRT
	do
		if [ ! -e "$MYBUILDDIR/DDWRT/$d" ]; then
			mkdir -p "$MYBUILDDIR/DDWRT/$d/DEFAULT/WEBIF" \
				"$MYBUILDDIR/DDWRT/$d/ONEINALL/WEBIF" \
				"$MYBUILDDIR/DDWRT/$d/DEFAULT/LIBUSB/WEBIF" \
				"$MYBUILDDIR/DDWRT/$d/ONEINALL/LIBUSB/WEBIF" \
				"$MYBUILDDIR/DDWRT/$d/DEFAULT/PCSC/WEBIF" \
				"$MYBUILDDIR/DDWRT/$d/ONEINALL/PCSC/WEBIF"
		fi
	done
	if [ ! -e "$MYDLDIR" ]; then
		mkdir -p "$MYDLDIR"
	fi

	if [ -e "$MYCHAINS/COOLSTREAM-git/build_tmp/oscam-svn" ]; then
		VERSIONCOOLIE=`cd "$MYCHAINS/COOLSTREAM-git/build_tmp/oscam-svn" && svnversion | cut -d M -f1`
	fi
	if [ -e "$MYCHAINS/AZBOX-git/smp86xx_toolchain.20080505/build_tmp/oscam-svn" ]; then
		VERSIONAZBOX=`cd "$MYCHAINS/AZBOX-git/smp86xx_toolchain.20080505/build_tmp/oscam-svn" && svnversion | cut -d M -f1`
	fi

	if [ ! -e "$OSCAMDIR/oscam-config.c.save" ]; then
		cp "$OSCAMDIR/oscam-config.c" "$OSCAMDIR/oscam-config.c.save"
		VERSION=`svnversion | cut -d M -f1`
		if [ "$VERSION" > 5385 ]; then
			sed "s/#define MAXLINESIZE 1024/#define MAXLINESIZE 1024\n\n#ifdef OIA\nstatic const char *cs_conf=\"oscam.conf\";\nstatic const char *cs_user=\"oscam.conf\";\nstatic const char *cs_srvr=\"oscam.conf\";\nstatic const char *cs_srid=\"oscam.conf\";\nstatic const char *cs_trid=\"oscam.conf\";\nstatic const char *cs_l4ca=\"oscam.conf\";\nstatic const char *cs_cert=\"oscam.conf\";\nstatic const char *cs_sidt=\"oscam.conf\";\n#ifdef CS_ANTICASC\nstatic const char *cs_ac=\"oscam.conf\";\n#endif\n\nstatic const char *cs_provid=\"oscam.conf\";\n\n#ifdef IRDETO_GUESSING\nstatic const char *cs_ird=\"oscam.conf\";\n#endif\n#else/"  -i "$OSCAMDIR/oscam-config.c"
		else
			sed "s/#define CONFVARWIDTH 30/#define CONFVARWIDTH 30\n\n#ifdef OIA\nstatic const char *cs_conf=\"oscam.conf\";\nstatic const char *cs_user=\"oscam.conf\";\nstatic const char *cs_srvr=\"oscam.conf\";\nstatic const char *cs_srid=\"oscam.conf\";\nstatic const char *cs_trid=\"oscam.conf\";\nstatic const char *cs_l4ca=\"oscam.conf\";\nstatic const char *cs_cert=\"oscam.conf\";\nstatic const char *cs_sidt=\"oscam.conf\";\n#ifdef CS_ANTICASC\nstatic const char *cs_ac=\"oscam.conf\";\n#endif\n\nstatic const char *cs_provid=\"oscam.conf\";\n\n#ifdef IRDETO_GUESSING\nstatic const char *cs_ird=\"oscam.conf\";\n#endif\n#else/"  -i "$OSCAMDIR/oscam-config.c"
		fi
		sed "s/.*oscam.ird.*/static const char *cs_ird=\"oscam.ird\";\n#endif/"  -i "$OSCAMDIR/oscam-config.c"
	fi
	if [ ! -e "$OSCAMDIR/oscam-config.h.save" ]; then
		cp "$OSCAMDIR/oscam-config.h" "$OSCAMDIR/oscam-config.h.save"
		sed "s/\/\/ ADDONS/\/\/ EasyScript\n#ifndef OIA\n\/\/#define OIA\n#endif\n\n#ifndef DO_ONLINECHECK\n#define DO_ONLINECHECK\n#endif\n\n#ifndef FB7390\n\/\/#define FB7390\n#endif\n\n#ifndef ASUSWL_K26\n\/\/#define ASUSWL_K26\n#endif\n\n#ifndef SHOW_MEM\n\/\/#define SHOW_MEM\n#endif\n\n#ifndef WITH_WEBLOGO\n\/\/#define WITH_WEBLOGO\n#endif\n\n#ifndef ANTI_DISCONNECT_CLIENT\n\/\/#define ANTI_DISCONNECT_CLIENT\n#endif\n\n#ifndef BUILD_STATIC\n\/\/#define BUILD_STATIC\n#endif\n\n\/\/ ADDONS\n#ifndef HAVE_LIBUSB\n\/\/#define HAVE_LIBUSB\n#endif\n\n#ifdef WITH_PCSC\n\/\/#define WITH_PCSC\n#endif\n\n#ifndef WITH_STAPI\n\/\/#define WITH_STAPI\n#endif\n\n#ifndef WITH_LIBCRYPTO_SO\n#define WITH_LIBCRYPTO_SO\n#endif\n\n#ifndef SCSI_DEV\n\/\/#define SCSI_DEV\n#endif\n\n#ifndef liboscam_stapi_v0_06b4\n\/\/#define liboscam_stapi_v0_06b4\n#endif\n\n#ifndef liboscam_stapi_v0_07\n\/\/#define liboscam_stapi_v0_07\n#endif\n\n#ifndef liboscam_stapi_v0_07c\n\/\/#define liboscam_stapi_v0_07c\n#endif\n\n#ifndef liboscam_stapi_v0_07e\n\/\/#define liboscam_stapi_v0_07e\n#endif\n\n#ifndef liboscam_stapi_v0_08\n\/\/#define liboscam_stapi_v0_08\n#endif\n\n#ifndef liboscam_stapi_v0_08a\n#define liboscam_stapi_v0_08a\n#endif\n\n#ifndef liboscam_stapi_AMINO_old\n\/\/#define liboscam_stapi_AMINO_old\n#endif\n\n#ifndef liboscam_stapi_UFS_old\n\/\/#define liboscam_stapi_UFS_old\n#endif\n\n#ifndef liboscam_stapi_OWN\n\/\/#define liboscam_stapi_OWN\n#endif\n\n#ifndef DDWRT346\n\/\/#define DDWRT346\n#endif\n\n#ifndef SHOW_DREAMBOX_BUILD\n#define SHOW_DREAMBOX_BUILD\n#endif\n\n#ifndef SHOW_SH4_DVBAPI_BUILD\n#define SHOW_SH4_DVBAPI_BUILD\n#endif\n\n#ifndef SHOW_COOLSTREAM_BUILD\n#define SHOW_COOLSTREAM_BUILD\n#endif\n\n#ifndef SHOW_SH4_STAPI_BUILD\n#define SHOW_SH4_STAPI_BUILD\n#endif\n\n#ifndef SHOW_FRITZBOX_BUILD\n#define SHOW_FRITZBOX_BUILD\n#endif\n\n#ifndef SHOW_DDWRT_BUILD\n#define SHOW_DDWRT_BUILD\n#endif\n\n#ifndef SHOW_ASUSWL_BUILD\n#define SHOW_ASUSWL_BUILD\n#endif\n\n#ifndef SHOW_PC_BUILD\n#define SHOW_PC_BUILD\n#endif\n\n#ifndef SHOW_AZBOX_BUILD\n#define SHOW_AZBOX_BUILD\n#endif\n\n#ifndef SHOW_NSLU2UNSLUNG_BUILD\n#define SHOW_NSLU2UNSLUNG_BUILD\n#endif\n\n#ifndef SHOW_PPC_DREAMBOX_BUILD\n#define SHOW_PPC_DREAMBOX_BUILD\n#endif\n\n#ifndef SHOW_PPC_DREAMBOX_OLD_BUILD\n#define SHOW_PPC_DREAMBOX_OLD_BUILD\n#endif\n\n#ifndef SHOW_FONERA_BUILD\n#define SHOW_FONERA_BUILD\n#endif\n\n#ifndef SHOW_DOCKSTAR_BUILD\n#define SHOW_DOCKSTAR_BUILD\n#endif\n\n#ifndef SHOW_TPLINK_BUILD\n#define SHOW_TPLINK_BUILD\n#endif\n/" -i "$OSCAMDIR/oscam-config.h"
		sed "s/#define CS_ANTICASC/\/\/#define CS_ANTICASC/g" -i "$OSCAMDIR/oscam-config.h"
		sed "s/#  if !defined(COOL) .*/#  ifdef SCSI_DEV/g" -i "$OSCAMDIR/oscam-config.h"
		sed "s/#    define HAVE_DVBAPI/\/\/#define HAVE_DVBAPI/g" -i "$OSCAMDIR/oscam-config.h"
		sed "s@.*#define MODULE_GBOX@\/\/#define MODULE_GBOX@g" -i "$OSCAMDIR/oscam-config.h"
	fi
	if [ ! -e "$OSCAMDIR/oscam-http.c.save" ]; then
		cp "$OSCAMDIR/oscam-http.c" "$OSCAMDIR/oscam-http.c.save"
		sed "s@^#include <sys\/socket.h>@#include <sys\/socket.h>\n#ifdef SHOW_MEM\n#include <sys\/sysinfo.h>\n#include <stdint.h>\n#endif@g" -i "$OSCAMDIR/oscam-http.c"
		sed "s@snprintf(targetfile, 255,\"%s%s\", get_tmp_dir(), \"/oscam.version\");@snprintf(targetfile, 255,\"%s%s\", get_tmp_dir(), \"/oscam.version\");\n#ifndef OIA@g" -i "$OSCAMDIR/oscam-http.c"
		sed "s@.*else if (strcmp(getParam(params, \"part\"), \"logfile\") == 0) {@#endif\n\telse if (strcmp(getParam(params, \"part\"), \"logfile\") == 0) {@g" -i "$OSCAMDIR/oscam-http.c"
		sed "s@.*tpl_addVar(vars, TPLADD, \"CS_VERSION\", CS_VERSION);@#ifdef SHOW_MEM\n\t\t\/\/meminfo.mod\n\t\tstruct sysinfo sys_info;\n\t\tif(sysinfo(\&sys_info) != 0)\n\t\t\t\perror(\"sysinfo\");\n\t\t\t{\n\t\t\ttpl_printf(vars, TPLADD, \"MEM_INFO\",\"Total Ram: %lluMB\tFree: %lluMB\tUsed: %lluMB\\\n\",\n\t\t\tsys_info.totalram *(uint64_t)sys_info.mem_unit / (1024*1024),\n\t\t\tsys_info.freeram *(uint64_t)sys_info.mem_unit/ (1024*1024),\n\t\t\t(sys_info.totalram *(uint64_t)sys_info.mem_unit-sys_info.freeram *(uint64_t)sys_info.mem_unit)/ (1024*1024));\n\t\t\t}\n#endif\n\t\ttpl_addVar(vars, TPLADD, \"CS_VERSION\", CS_VERSION);@g" -i "$OSCAMDIR/oscam-http.c"
	fi
	if [ ! -e "$OSCAMDIR/oscam-http.h.save" ]; then
		cp "$OSCAMDIR/oscam-http.h" "$OSCAMDIR/oscam-http.h.save"
		sed "s@#define TPLFOOTER \"\\\@#ifdef SHOW_MEM\n#define TPLFOOTER \"\\\\\n\t<BR><HR><BR>\\\\n\\\\\n\t<DIV CLASS=\\\\\"footer\\\\\">\\\\n\\\\\n\t\t<H4 CLASS=\\\\\"footline1\\\\\">OSCAM Webinterface developed by Streamboard Team - ##CURDATE## ##CURTIME## | Access from ##CURIP##</H4>\\\\n\\\\\n\t\t<H4 CLASS=\\\\\"footline1\\\\\">Memory Information: ##MEM_INFO##</H4>\\\\n\\\\\n\t\t<H4 CLASS=\\\\\"footline2\\\\\">Start: ##STARTDATE## - ##STARTTIME## | UpTime: ##UPTIME## | Process ID: ##PROCESSID##</H4>\\\\n\\\\\n\t\t<H4 CLASS=\\\\\"styleauthor\\\\\">WebIf Style by </H4>\\\\n\\\\\n\t<\/DIV>\\\\n\\\\\n<\/BODY>\\\\n\\\\\n<\/HTML>\"\n#else\n#define TPLFOOTER \"\\\\@g" -i "$OSCAMDIR/oscam-http.h"
		sed "s@#define TPLAPIFOOTER \"<\/oscam>\"@#endif\n\n#define TPLAPIFOOTER \"<\/oscam>\"@g" -i "$OSCAMDIR/oscam-http.h"
		sed "s@#define TPLMENU \"\\\@#ifdef OIA\n#define TPLMENU \"\\\\\n\t<TABLE border=0 class=\\\\\"menu\\\\\">\\\\n\\\\\n\t\t<TR>\\\\n\\\\\n\t\t\t<TD CLASS=\\\\\"menu\\\\\"><A HREF=\\\\\"status.html\\\\\">STATUS<\/A><\/TD>\\\\n\\\\\n\t\t\t<TD CLASS=\\\\\"menu\\\\\"><A HREF=\\\\\"files.html\\\\\">CONFIGURATION<\/A><\/TD>\\\\n\\\\\n\t\t\t<TD CLASS=\\\\\"menu\\\\\"><A HREF=\\\\\"failban.html\\\\\">FAILBAN<\/A><\/TD>\\\\n\\\\\n\t\t\t<TD CLASS=\\\\\"script\\\\\"><A HREF=\\\\\"script.html\\\\\">SCRIPT<\/A><\/TD>\\\\n\\\\\n\t\t\t<TD CLASS=\\\\\"shutdown\\\\\"><A HREF=\\\\\"shutdown.html\\\\\">SHUTDOWN<\/A><\/TD>\\\\n\\\\\n\t\t<\/TR>\\\\n\\\\\n\t</TABLE>\\\\n\"\n#else\n#define TPLMENU \"\\\\@g" -i "$OSCAMDIR/oscam-http.h"
		sed "s@#define TPLCONFIGMENU \"\\\@#endif\n\n#define TPLCONFIGMENU \"\\\@g" -i "$OSCAMDIR/oscam-http.h"
	fi
	if [ ! -e "$OSCAMDIR/module-camd35.c.save" ]; then
		cp "$OSCAMDIR/module-camd35.c" "$OSCAMDIR/module-camd35.c.save"
		if [ "$MYSVN" == "trunk" ]; then
			sed "s@MOD_CONN_UDP);@MOD_CONN_UDP);\n\n#ifdef ANTI_DISCONNECT_CLIENT\n  do\n  {\n    n = process_input(mbuf, sizeof(mbuf), cfg.cmaxidle);\n\tif(n > 0)\n	\t{\n\t\tswitch(mbuf[0])\n\t\t{\n\t\t  case  0:\n\t\t  case  3:\n\t\t\tcamd35_process_ecm(mbuf);\n\t\t\tbreak;\n\t\t  case  6:\n\t\t  case 19:\n\t\t\tcamd35_process_emm(mbuf);\n\t\t\tbreak;\n\t\t  default:\n\t\t\tcs_log(\"unknown camd35 command! (%d)\", mbuf[0]);\n\t\t}\n\t}\n\telse if(n == -9)\n\t{\n\t\tif(1)\n\t\t{\n\t\t\tn = 1;\n\t\t}\n\t}\n  }while( n > 0);\n\n#else@g" -i "$OSCAMDIR/module-camd35.c"
			sed "s@  NULLFREE(client->req);@#endif\n\n  NULLFREE(client->req);@g" -i "$OSCAMDIR/module-camd35.c"
		fi
	fi
	if [ ! -e "$OSCAMDIR/Makefile.save" ]; then
		cp "$OSCAMDIR/Makefile" "$OSCAMDIR/Makefile.save"
		sed "s/SHELL.*/SHELL = \/bin\/sh\nFritzChain =\`cat \.\/EasyBuildScript\/EasyBuild.conf | grep FRITZCHAIN | cut -d = -f2\`\nAzboxChain =\`cat \.\/EasyBuildScript\/EasyBuild.conf | grep AZBOXCHAIN | cut -d = -f2\`\nDreamChain =\`cat \.\/EasyBuildScript\/EasyBuild.conf | grep DREAMCHAIN | cut -d = -f2\`\nDockstarChain =\`cat \.\/EasyBuildScript\/EasyBuild.conf | grep DOCKSTARCHAIN | cut -d = -f2\`\nDDWRTChain =\`cat \.\/EasyBuildScript\/EasyBuild.conf | grep FRITZCHAIN | cut -d = -f2\`\nNSLU2UNSLUNGchain =\`cat \.\/EasyBuildScript\/EasyBuild.conf | grep NSLU2UNSLUNGCHAIN | cut -d = -f2\`\nPPCDreamChain =\`cat \.\/EasyBuildScript\/EasyBuild.conf | grep PPCDMCHAIN | cut -d = -f2\`\nPPCDreamOldChain =\`cat \.\/EasyBuildScript\/EasyBuild.conf | grep PPCDMOLDCHAIN | cut -d = -f2\`\nFoneraChain =\`cat \.\/EasyBuildScript\/EasyBuild.conf | grep FONERACHAIN | cut -d = -f2\`\nTPLinkChain =\`cat \.\/EasyBuildScript\/EasyBuild.conf | grep TPLINKCHAIN | cut -d = -f2\`\nASUSwlChain =\`cat \.\/EasyBuildScript\/EasyBuild.conf | grep ASUSWLCHAIN | cut -d = -f2\`\nFritzUclibc =\`cat \.\/EasyBuildScript\/EasyBuild.conf | grep FRITZUCLIBC | cut -d = -f2\`\nFritzVersion =\`cat \.\/EasyBuildScript\/EasyBuild.conf | grep FRITZVERSION | cut -d = -f2\`\nCoolstreamChain =\`cat \.\/EasyBuildScript\/EasyBuild.conf | grep COOLSTREAMCHAIN | cut -d = -f2\`\nWITHSMARTREADER =\`cat \.\/EasyBuildScript\/EasyBuild.conf | grep SMARTREADERON | cut -d = -f2\`\nWITHPCSC =\`cat \.\/EasyBuildScript\/EasyBuild.conf | grep PCSCON | cut -d = -f2\`\nSH4Chain =\`cat \.\/EasyBuildScript\/EasyBuild.conf | grep SH4CHAIN | cut -d = -f2\`\n/"  -i "$OSCAMDIR/Makefile"
		# set default config path
		sed "s@CS_CONFDIR = .*@CS_CONFDIR = '\\\\\"$DEFAULTCONFIG\\\\\"'@g" -i "$OSCAMDIR/Makefile"
		# dreambox
		sed "s/-O2 -DOS_LINUX -DTUXBOX -DWITH_LIBCRYPTO -DMIPSEL.*/-O2 -DOS_LINUX -DTUXBOX \"\$(WITHSMARTREADER\)\" -DMIPSEL \"\$(WITHPCSC\)\" -DCS_CONFDIR=\${CS_CONFDIR} -D\'CS_SVN_VERSION=\"\\\\\"\$\(SVN_REV\)\\\\\"\"\'\" \\\/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_CC=mipsel-linux\(-glibc\)*-gcc/\DS_CC=\$\(DreamChain\)\/mipsel-unknown-linux-gnu-gcc-4.3.2/" -i "$OSCAMDIR/Makefile"
		sed "s/DS_AR=mipsel-linux\(-glibc\)*-ar/\DS_AR=\$\(DreamChain\)\/mipsel-unknown-linux-gnu-ar/" -i "$OSCAMDIR/Makefile"
		sed "s/DS_LD=mipsel-linux\(-glibc\)*-ld/\DS_LD=\$\(DreamChain\)\/mipsel-unknown-linux-gnu-ld/" -i "$OSCAMDIR/Makefile"
		sed "s/DS_RL=mipsel-linux\(-glibc\)*-ranlib/\DS_RL=\$\(DreamChain\)\/mipsel-unknown-linux-gnu-ranlib/" -i "$OSCAMDIR/Makefile"
		sed "s/DS_ST=mipsel-linux\(-glibc\)*-strip/\DS_ST=\$\(DreamChain\)\/mipsel-unknown-linux-gnu-strip/" -i "$OSCAMDIR/Makefile"
		#FRITZBOX replace sed for makefile
		sed "s@-O2 -DOS_LINUX -DMIPSEL -DWITH_LIBCRYPTO -DUCLIBC -DUSE_GPIO .*@-O2 -DOS_LINUX \"\$(WITHPCSC\)\" -DTUXBOX \"\$(WITHSMARTREADER\)\" -DUCLIBC \"\$\(FritzVersion\)\" -DUSE_GPIO -DCS_CONFDIR=\${CS_CONFDIR} -D\'CS_SVN_VERSION=\"\\\\\"\$\(SVN_REV\)\\\\\"\"\'\" \\\@g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_CC=mipsel-linux-uclibc-gcc/DS_CC=\$\(FritzChain\)\/\$\(FritzUclibc\)-linux-uclibc-gcc/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_AR=mipsel-linux-uclibc-ar/DS_AR=\$\(FritzChain\)\/\$\(FritzUclibc\)-linux-uclibc-ar/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_LD=mipsel-linux-uclibc-ld/DS_LD=\$\(FritzChain\)\/\$\(FritzUclibc\)-linux-uclibc-ld/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_RL=mipsel-linux-uclibc-ranlib/DS_RL=\$\(FritzChain\)\/\$\(FritzUclibc\)-linux-uclibc-ranlib/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_ST=mipsel-linux-uclibc-strip/DS_ST=\$\(FritzChain\)\/\$\(FritzUclibc\)-linux-uclibc-strip/g" -i "$OSCAMDIR/Makefile"
		# fix fritzbox
		sed "/@-mipsel-linux-uclibc-setlib/d" -i "$OSCAMDIR/Makefile"
		sed "/LIBUSB=/d" -i "$OSCAMDIR/Makefile"
		# sh4
		sed "s/-O2 -DOS_LINUX -DSH4 -DTUXBOX .*/-O2 -DOS_LINUX -DSH4 \"\$(WITHPCSC\)\" -DTUXBOX \"\$(WITHSMARTREADER\)\" -DCS_CONFDIR=\${CS_CONFDIR} -D\'CS_SVN_VERSION=\"\\\\\"\$\(SVN_REV\)\\\\\"\"\'\" \\\/g" -i "$OSCAMDIR/Makefile"
		sed "s/-O2 -DOS_LINUX -DSH4 -DWITH_STAPI -DWITH_LIBCRYPTO -DTUXBOX .*/-O2 -DOS_LINUX -DSH4 \"\$(WITHPCSC\)\" -DTUXBOX \"\$(WITHSMARTREADER\)\" -DCS_CONFDIR=\${CS_CONFDIR} -D\'CS_SVN_VERSION=\"\\\\\"\$\(SVN_REV\)\\\\\"\"\'\" \\\/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_CC=\/opt\/STM\/STLinux-2\.[03]\/devkit\/sh4\/bin\/sh4-linux-gcc/DS_CC=\$\(SH4Chain\)\/sh4-linux-gcc/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_AR=\/opt\/STM\/STLinux-2\.[03]\/devkit\/sh4\/bin\/sh4-linux-ar/DS_AR=\$\(SH4Chain\)\/sh4-linux-ar/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_LD=\/opt\/STM\/STLinux-2\.[03]\/devkit\/sh4\/bin\/sh4-linux-ld/DS_LD=\$\(SH4Chain\)\/sh4-linux-ld/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_RL=\/opt\/STM\/STLinux-2\.[03]\/devkit\/sh4\/bin\/sh4-linux-ranlib/DS_RL=\$\(SH4Chain\)\/sh4-linux-ranlib/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_ST=\/opt\/STM\/STLinux-2\.[03]\/devkit\/sh4\/bin\/sh4-linux-strip/DS_ST=\$\(SH4Chain\)\/sh4-linux-strip/g" -i "$OSCAMDIR/Makefile"
		# i383/x64PC
		sed "s/-O2 -DOS_LINUX -DLIBUSB -DCS_CONFDIR=\${CS_CONFDIR} -DWITH_LIBCRYPTO -pthread -Winline.*/-O2 -DOS_LINUX \"\$(WITHSMARTREADER\)\" -DCS_CONFDIR=\${CS_CONFDIR} -D\'CS_SVN_VERSION=\"\\\\\"\$\(SVN_REV\)\\\\\"\"\'\ -I\/usr\/local\/include\" \\\\\n\t\t\OS_PTLI=\"-lpthread\" \\\/g" -i "$OSCAMDIR/Makefile"
		sed "s/-O2 -DOS_LINUX -DLIBUSB -DCS_CONFDIR=\${CS_CONFDIR} -DWITH_LIBCRYPTO -pthread -DHAVE_PCSC=1.*/-O2 \"\$(WITHPCSC\)\" -DOS_LINUX \"\$(WITHSMARTREADER\)\" -DCS_CONFDIR=\${CS_CONFDIR} -I\/usr\/include\/PCSC -D\'CS_SVN_VERSION=\"\\\\\"\$\(SVN_REV\)\\\\\"\"\'\ -I\/usr\/local\/include\" \\\/g" -i "$OSCAMDIR/Makefile"
		sed "s/-O2 -DOS_LINUX -DCS_CONFDIR=\${CS_CONFDIR} -DWITH_LIBCRYPTO -pthread -DHAVE_PCSC=1.*/-O2 \"\$(WITHPCSC\)\" -DOS_LINUX -DCS_CONFDIR=\${CS_CONFDIR} -D\'CS_SVN_VERSION=\"\\\\\"\$\(SVN_REV\)\\\\\"\"\'\ -I\/usr\/include\/PCSC\" \\\/g" -i "$OSCAMDIR/Makefile"
		sed "s/-O2 -DOS_LINUX -DWEBIF.*/-O2 \"\$(WITHPCSC\)\" -pthread -DOS_LINUX \"\$(WITHSMARTREADER\)\" -DCS_CONFDIR=\${CS_CONFDIR} -D\'CS_SVN_VERSION=\"\\\\\"\$\(SVN_REV\)\\\\\"\"\'\" \\\/g" -i "$OSCAMDIR/Makefile"
		sed "s/-O2 -DOS_LINUX -DCS_CONFDIR=\${CS_CONFDIR} -DWITH_LIBCRYPTO -pthread -Winline -Wall -Wextra.*/-O2 -DOS_LINUX -DCS_CONFDIR=\${CS_CONFDIR} -D\'CS_SVN_VERSION=\"\\\\\"\$\(SVN_REV\)\\\\\"\"\'\" \\\\\n\t\t\OS_PTLI=\"-lpthread\" \\\/g" -i "$OSCAMDIR/Makefile"
		#NSLU2UNSLUNG replace sed for makefile
		sed "s/-DOS_LINUX -O2 -DARM .*/-DOS_LINUX -O2 \"\$(WITHPCSC\)\" -DARM \"\$(WITHSMARTREADER\)\" -DALIGNMENT -DCS_CONFDIR=\${CS_CONFDIR} -D\'CS_SVN_VERSION=\"\\\\\"\$\(SVN_REV\)\\\\\"\"\'\" \\\/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_CC=\"armv5b-softfloat-linux-gcc\"/DS_CC=\$\(NSLU2UNSLUNGchain\)\/armv5b-softfloat-linux-gcc/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_AR=\"armv5b-softfloat-linux-ar\"/DS_AR=\$\(NSLU2UNSLUNGchain\)\/armv5b-softfloat-linux-ar/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_LD=\"armv5b-softfloat-linux-ld\"/DS_LD=\$\(NSLU2UNSLUNGchain\)\/armv5b-softfloat-linux-ld/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_RL=\"armv5b-softfloat-linux-ranlib\"/DS_RL=\$\(NSLU2UNSLUNGchain\)\/armv5b-softfloat-linux-ranlib/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_ST=\"armv5b-softfloat-linux-strip\"/DS_ST=\$\(NSLU2UNSLUNGchain\)\/armv5b-softfloat-linux-strip/g" -i "$OSCAMDIR/Makefile"
		#PPC DREAMBOX replace sed for makefile
		sed "s/-O2 -DOS_LINUX -DTUXBOX -DPPC .*/-O2 -DOS_LINUX -DPPC \"\$(WITHPCSC\)\" -DTUXBOX \"\$(WITHSMARTREADER\)\" -DCS_CONFDIR=\${CS_CONFDIR} -D\'CS_SVN_VERSION=\"\\\\\"\$\(SVN_REV\)\\\\\"\"\'\" \\\/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_CC=powerpc-tuxbox-linux-gnu-gcc/DS_CC=\$\(PPCDreamChain\)\/powerpc-linux-gcc/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_AR=powerpc-tuxbox-linux-gnu-ar/DS_AR=\$\(PPCDreamChain\)\/powerpc-linux-ar/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_LD=powerpc-tuxbox-linux-gnu-ld/DS_LD=\$\(PPCDreamChain\)\/powerpc-linux-ld/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_RL=powerpc-tuxbox-linux-gnu-ranlib/DS_RL=\$\(PPCDreamChain\)\/powerpc-linux-ranlib/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_ST=powerpc-tuxbox-linux-gnu-strip/DS_ST=\$\(PPCDreamChain\)\/powerpc-linux-strip/g" -i "$OSCAMDIR/Makefile"
		#FONERA sed for makefile
		sed "s/-Iopenssl-include -O2 -DOS_LINUX -DWITH_LIBCRYPTO -DMIPSEL -DUCLIBC .*/-Iopenssl-include -O2 \"\$(WITHPCSC\)\" -DOS_LINUX -DMIPSEL \"\$(WITHSMARTREADER\)\" -DUCLIBC -DCS_CONFDIR=\${CS_CONFDIR} -D\'CS_SVN_VERSION=\"\\\\\"\$\(SVN_REV\)\\\\\"\"\'\" \\\/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_CC=mips-linux-gcc/DS_CC=\$\(FoneraChain\)\/mips-linux-gcc/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_AR=mips-linux-ar/DS_AR=\$\(FoneraChain\)\/mips-linux-ar/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_LD=mips-linux-ld/DS_LD=\$\(FoneraChain\)\/mips-linux-ld/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_RL=mips-linux-ranlib/DS_RL=\$\(FoneraChain\)\/mips-linux-ranlib/g" -i "$OSCAMDIR/Makefile"
		sed "s/DS_ST=mips-linux-strip/DS_ST=\$\(FoneraChain\)\/mips-linux-strip/g" -i "$OSCAMDIR/Makefile"
		# DOCKSTAR insert to makefile
		echo "" >> "$OSCAMDIR/Makefile"
		echo "######################################################################" >> "$OSCAMDIR/Makefile"
		echo "#" >> "$OSCAMDIR/Makefile"
		echo -e "#\tOPENWRT-LINUX native DOCKSTAR" >> "$OSCAMDIR/Makefile"
		echo "#" >> "$OSCAMDIR/Makefile"
		echo "######################################################################" >> "$OSCAMDIR/Makefile"
		echo "cross-openwrt-linux:" >> "$OSCAMDIR/Makefile"
		echo -e '\t@-$(MAKE) --no-print-directory \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\t-f Maketype TYP=$(subst cross-,,$@) \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_LIBS="-lcrypto -lm" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_CULI="-lncurses" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_PTLI="-lpthread" \' >> "$OSCAMDIR/Makefile"
		echo -e "\t\tDS_OPTS=\"-O2 \"\$(WITHPCSC)\" -DOS_LINUX \"\$(WITHSMARTREADER)\" -DCS_CONFDIR=\${CS_CONFDIR} -D'CS_SVN_VERSION=\"\\\"\$(SVN_REV)\\\"\"'\" \\" >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_CFLAGS="-c" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_LDFLAGS="" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_ARFLAGS="-rvsl" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_CC=$(DockstarChain)/arm-openwrt-linux-uclibcgnueabi-gcc-4.3.3 \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_AR=$(DockstarChain)/arm-openwrt-linux-uclibcgnueabi-ar \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_LD=$(DockstarChain)/arm-openwrt-linux-uclibcgnueabi-ld \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_RL=$(DockstarChain)/arm-openwrt-linux-uclibcgnueabi-ranlib \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_ST=$(DockstarChain)/arm-openwrt-linux-uclibcgnueabi-strip' >> "$OSCAMDIR/Makefile"
		echo "" >> "$OSCAMDIR/Makefile"
		# coolstream insert to makefile
		echo "######################################################################" >> "$OSCAMDIR/Makefile"
		echo "#" >> "$OSCAMDIR/Makefile"
		echo -e "#\tARM crosscompiler (little-endian) COOLSTREAM" >> "$OSCAMDIR/Makefile"
		echo "#" >> "$OSCAMDIR/Makefile"
		echo "######################################################################" >> "$OSCAMDIR/Makefile"
		echo "cross-armLE-coolstream-linux:" >> "$OSCAMDIR/Makefile"
		echo -e '\t@-$(MAKE) --no-print-directory \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\t-f Maketype TYP=$(subst cross-,,$@) \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_LIBS="-lcrypto -lm -lrt -lnxp" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_CULI="-lncurses" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_PTLI="-lpthread" \' >> "$OSCAMDIR/Makefile"
		echo -e "\t\tDS_OPTS=\"-DOS_LINUX -O2 \"\$(WITHPCSC)\" -DCOOL -DTUXBOX -DARM \"\$(WITHSMARTREADER)\" -DALIGNMENT -DCS_CONFDIR=\${CS_CONFDIR} -D'CS_SVN_VERSION=\"\\\"\$(SVN_REV)\\\"\"'\" \\" >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_CFLAGS="-c -lcoolstream" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_LDFLAGS="" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_ARFLAGS="-rvsl" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_AWK="awk" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_CC=$(CoolstreamChain)/arm-cx2450x-linux-gnueabi-gcc-4.3.2 -mlittle-endian \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_AR=$(CoolstreamChain)/arm-cx2450x-linux-gnueabi-ar \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_LD=$(CoolstreamChain)/arm-cx2450x-linux-gnueabi-ld \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_RL=$(CoolstreamChain)/arm-cx2450x-linux-gnueabi-ranlib \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_ST=$(CoolstreamChain)/arm-cx2450x-linux-gnueabi-strip' >> "$OSCAMDIR/Makefile"
		echo "" >> "$OSCAMDIR/Makefile"
		# azbox
		echo "######################################################################" >> "$OSCAMDIR/Makefile"
		echo -e "#\tAZBOX" >> "$OSCAMDIR/Makefile"
		echo -e "#\tLinux MIPSEL crosscompiler with ucLibc 0.9.27" >> "$OSCAMDIR/Makefile"
		echo "#" >> "$OSCAMDIR/Makefile"
		echo "######################################################################" >> "$OSCAMDIR/Makefile"
		echo "cross-mipsel-azbox-uclibc927:" >> "$OSCAMDIR/Makefile"
		echo -e '\t@-$(MAKE) --no-print-directory \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\t-f Maketype TYP=$(subst cross-,,$@) \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_LIBS="-lcrypto -lm" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_CULI="-lncurses" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_PTLI="-lpthread" \' >> "$OSCAMDIR/Makefile"
		echo -e "\t\tDS_OPTS=\"-O2 \"\$(WITHPCSC)\" -DOS_LINUX -DMIPSEL \"\$(WITHSMARTREADER)\" -DUCLIBC -DUSE_GPIO -DCS_CONFDIR=\${CS_CONFDIR} -D'CS_SVN_VERSION=\"\\\"\$(SVN_REV)\\\"\"'\" \\" >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_CFLAGS="-c" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_LDFLAGS="" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_ARFLAGS="-rvsl" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_CC=$(AzboxChain)/mipsel-linux-uclibc-gcc-3.4.2 \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_AR=$(AzboxChain)/mipsel-linux-uclibc-ar \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_LD=$(AzboxChain)/mipsel-linux-uclibc-ld \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_RL=$(AzboxChain)/mipsel-linux-uclibc-ranlib \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_ST=$(AzboxChain)/mipsel-linux-uclibc-strip' >> "$OSCAMDIR/Makefile"
		echo "" >> "$OSCAMDIR/Makefile"
		# TPLINK
		echo "######################################################################" >> "$OSCAMDIR/Makefile"
		echo -e "#\tTP-LINK" >> "$OSCAMDIR/Makefile"
		echo -e "#\tLinux MIPS crosscompiler with ucLibc 0.9.30" >> "$OSCAMDIR/Makefile"
		echo "#" >> "$OSCAMDIR/Makefile"
		echo "######################################################################" >> "$OSCAMDIR/Makefile"
		echo "cross-mips-router-linux-uclibc930:" >> "$OSCAMDIR/Makefile"
		echo -e '\t@-$(MAKE) --no-print-directory \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\t-f Maketype TYP=$(subst cross-,,$@) \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_LIBS="-lcrypto -lm" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_CULI="-lncurses" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_PTLI="-lpthread" \' >> "$OSCAMDIR/Makefile"
		echo -e "\t\tDS_OPTS=\"-O2 \"\$(WITHPCSC)\" -DOS_LINUX -DMIPS \"\$(WITHSMARTREADER)\" -DUCLIBC -DUSE_GPIO -DCS_CONFDIR=\${CS_CONFDIR} -D'CS_SVN_VERSION=\"\\\"\$(SVN_REV)\\\"\"'\" \\" >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_CFLAGS="-c" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_LDFLAGS="" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_ARFLAGS="-rvsl" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_CC=$(TPLinkChain)/mips-openwrt-linux-uclibc-gcc \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_AR=$(TPLinkChain)/mips-openwrt-linux-uclibc-ar \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_LD=$(TPLinkChain)/mips-openwrt-linux-uclibc-ld \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_RL=$(TPLinkChain)/mips-openwrt-linux-uclibc-ranlib \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_ST=$(TPLinkChain)/mips-openwrt-linux-uclibc-strip' >> "$OSCAMDIR/Makefile"
		echo "" >> "$OSCAMDIR/Makefile"
		# ASUSWL
		echo "######################################################################" >> "$OSCAMDIR/Makefile"
		echo -e "#\tASUS-WL**" >> "$OSCAMDIR/Makefile"
		echo -e "#\tLinux MIPSEL crosscompiler" >> "$OSCAMDIR/Makefile"
		echo "#" >> "$OSCAMDIR/Makefile"
		echo "######################################################################" >> "$OSCAMDIR/Makefile"
		echo "cross-mipsel-asuswl-linux:" >> "$OSCAMDIR/Makefile"
		echo -e '\t@-$(MAKE) --no-print-directory \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\t-f Maketype TYP=$(subst cross-,,$@) \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_LIBS="-lcrypto -lm" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_CULI="-lncurses" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_PTLI="-lpthread" \' >> "$OSCAMDIR/Makefile"
		echo -e "\t\tDS_OPTS=\"-O2 \"\$(WITHPCSC)\" -DOS_LINUX -DMIPSEL \"\$(WITHSMARTREADER)\" -DUCLIBC -DUSE_GPIO -DCS_CONFDIR=\${CS_CONFDIR} -D'CS_SVN_VERSION=\"\\\"\$(SVN_REV)\\\"\"'\" \\" >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_CFLAGS="-c" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_LDFLAGS="" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_ARFLAGS="-rvsl" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_CC=$(ASUSwlChain)/mipsel-linux-uclibc-gcc \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_AR=$(ASUSwlChain)/mipsel-linux-uclibc-ar \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_LD=$(ASUSwlChain)/mipsel-linux-uclibc-ld \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_RL=$(ASUSwlChain)/mipsel-linux-uclibc-ranlib \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_ST=$(ASUSwlChain)/mipsel-linux-uclibc-strip' >> "$OSCAMDIR/Makefile"
		echo "" >> "$OSCAMDIR/Makefile"
		# PPC DREAMBOX OLD
		echo "######################################################################" >> "$OSCAMDIR/Makefile"
		echo -e "#\tPPC DREAMBOX OLD**" >> "$OSCAMDIR/Makefile"
		echo -e "#\tLinux TUXBOX crosscompiler" >> "$OSCAMDIR/Makefile"
		echo "#" >> "$OSCAMDIR/Makefile"
		echo "######################################################################" >> "$OSCAMDIR/Makefile"
		echo "cross-powerpc-tuxbox-linux-dbox2:" >> "$OSCAMDIR/Makefile"
		echo -e '\t@-$(MAKE) --no-print-directory \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\t-f Maketype TYP=$(subst cross-,,$@) \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_LIBS="-lcrypto -lm" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_CULI="-lncurses" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tOS_PTLI="-lpthread" \' >> "$OSCAMDIR/Makefile"
		echo -e "\t\tDS_OPTS=\"-O2 -DOS_LINUX -DPPC \"\$(WITHPCSC)\" -DTUXBOX \"\$(WITHSMARTREADER)\" -DCS_CONFDIR=\${CS_CONFDIR} -D'CS_SVN_VERSION=\"\\\"\$(SVN_REV)\\\"\"'\" \\" >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_CFLAGS="-c" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_LDFLAGS="" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_ARFLAGS="-rvsl" \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_CC=$(PPCDreamOldChain)/powerpc-tuxbox-linux-gnu-gcc \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_AR=$(PPCDreamOldChain)/powerpc-tuxbox-linux-gnu-ar \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_LD=$(PPCDreamOldChain)/powerpc-tuxbox-linux-gnu-ld \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_RL=$(PPCDreamOldChain)/powerpc-tuxbox-linux-gnu-ranlib \' >> "$OSCAMDIR/Makefile"
		echo -e '\t\tDS_ST=$(PPCDreamOldChain)/powerpc-tuxbox-linux-gnu-strip' >> "$OSCAMDIR/Makefile"
		echo "" >> "$OSCAMDIR/Makefile"
		# fix "" for all on makefile
		sed "s@-f Maketype TYP=\"\$(subst cross-,,\$\@)\" \\\@-f Maketype TYP=\$(subst cross-,,\$\@) \\\@g" -i "$OSCAMDIR/Makefile"
		sed "s@DS_LDFLAGS=.*\\\\@DS_LDFLAGS=\"$ISSTATIC\" \\\\@g" -i "$OSCAMDIR/Makefile"

	fi
	SMARGO=`ls "$OSCAMDIR/Distribution" | grep list_smargo`
	if [ ! -z "$SMARGO" ]; then
		rm "$OSCAMDIR/Distribution/list_smargo*"
	fi
fi
if [ -e "$MAINDIR/oscam-svn" ]; then
	if [ -z "`cat ./oscam-config.h | grep "//#define SHOW_DREAMBOX_BUILD"`" ]; then
		SHOWDREAMBUILD="ON"
		if [ -e "$MYCHAINS/mipsel-unknown-linux-gnu_off" ] && [ ! -e "$MYCHAINS/mipsel-unknown-linux-gnu" ]; then
			mv "$MYCHAINS/mipsel-unknown-linux-gnu_off" "$MYCHAINS/mipsel-unknown-linux-gnu"
		fi
	else
		SHOWDREAMBUILD="OFF"
		if [ -e "$MYCHAINS/mipsel-unknown-linux-gnu" ] && [ ! -e "$MYCHAINS/mipsel-unknown-linux-gnu_off" ]; then
			mv "$MYCHAINS/mipsel-unknown-linux-gnu" "$MYCHAINS/mipsel-unknown-linux-gnu_off"
		fi
	fi
	if [ -z "`cat ./oscam-config.h | grep "//#define SHOW_SH4_DVBAPI_BUILD"`" ]; then
		SHOWDVBAPIBUILD="ON"
		SHOWSTAPIBUILD="ON"
		if [ -e "$MYCHAINS/devkit_sh4_off" ] && [ ! -e "$MYCHAINS/devkit_sh4" ]; then
			mv "$MYCHAINS/devkit_sh4_off" "$MYCHAINS/devkit_sh4"
		fi
	else
		SHOWDVBAPIBUILD="OFF"
		SHOWSTAPIBUILD="OFF"
		if [ -e "$MYCHAINS/devkit_sh4" ] && [ ! -e "$MYCHAINS/devkit_sh4_off" ]; then
			mv "$MYCHAINS/devkit_sh4" "$MYCHAINS/devkit_sh4_off"
		fi
	fi
	if [ -z "`cat ./oscam-config.h | grep "//#define SHOW_SH4_STAPI_BUILD"`" ]; then
		SHOWSTAPIBUILD="ON"
		SHOWDVBAPIBUILD="ON"
		if [ -e "$MYCHAINS/devkit_sh4_off" ] && [ ! -e "$MYCHAINS/devkit_sh4" ]; then
			mv "$MYCHAINS/devkit_sh4_off" "$MYCHAINS/devkit_sh4"
		fi
	else
		SHOWSTAPIBUILD="OFF"
		SHOWDVBAPIBUILD="OFF"
		if [ -e "$MYCHAINS/devkit_sh4" ] && [ ! -e "$MYCHAINS/devkit_sh4_off" ]; then
			mv "$MYCHAINS/devkit_sh4" "$MYCHAINS/devkit_sh4_off"
		fi
	fi
	if [ -z "`cat ./oscam-config.h | grep "//#define SHOW_COOLSTREAM_BUILD"`" ]; then
		SHOWCOOLIEBUILD="ON"
		if [ -e "$MYCHAINS/COOLSTREAM-git_off" ] && [ ! -e "$MYCHAINS/COOLSTREAM-git" ]; then
			mv "$MYCHAINS/COOLSTREAM-git_off" "$MYCHAINS/COOLSTREAM-git"
		fi
	else
		SHOWCOOLIEBUILD="OFF"
		if [ -e "$MYCHAINS/COOLSTREAM-git" ] && [ ! -e "$MYCHAINS/COOLSTREAM-git_off" ]; then
			mv "$MYCHAINS/COOLSTREAM-git" "$MYCHAINS/COOLSTREAM-git_off"
		fi
	fi
	if [ -z "`cat "$OSCAMDIR/oscam-config.h" | grep "//#define FB7390"`" ]; then
		MYFREETZ="freetz-trunk7390"
		MYFREETZOFF="freetz-trunk7390_off"
	else
		MYFREETZ="freetz-trunk"
		MYFREETZOFF="freetz-trunk_off"
	fi
	if [ -z "`cat ./oscam-config.h | grep "//#define SHOW_FRITZBOX_BUILD"`" ]; then
		SHOWFRITZBUILD="ON"
		if [ -e "$MYCHAINS/$MYFREETZOFF" ] && [ ! -e "$MYCHAINS/$MYFREETZ" ]; then
			mv "$MYCHAINS/$MYFREETZOFF" "$MYCHAINS/$MYFREETZ"
		fi
	else
		SHOWFRITZBUILD="OFF"
		if [ -e "$MYCHAINS/$MYFREETZ" ] && [ ! -e "$MYCHAINS/$MYFREETZOFF" ]; then
			mv "$MYCHAINS/$MYFREETZ" "$MYCHAINS/$MYFREETZOFF"
		fi
	fi
	if [ -z "`cat ./oscam-config.h | grep "//#define SHOW_DDWRT_BUILD"`" ]; then
		SHOWDDWRTBUILD="ON"
		if [ -e "$MYCHAINS/DDWRT_off" ] && [ ! -e "$MYCHAINS/DDWRT" ]; then
			mv "$MYCHAINS/DDWRT_off" "$MYCHAINS/DDWRT"
		fi
	else
		SHOWDDWRTBUILD="OFF"
		if [ -e "$MYCHAINS/DDWRT" ] && [ ! -e "$MYCHAINS/DDWRT_off" ]; then
			mv "$MYCHAINS/DDWRT" "$MYCHAINS/DDWRT_off"
		fi
	fi
	if [ -z "`cat ./oscam-config.h | grep "//#define SHOW_PC_BUILD"`" ]; then
		SHOWPCBUILD="ON"
	else
		SHOWPCBUILD="OFF"
	fi
	if [ -z "`cat ./oscam-config.h | grep "//#define SHOW_AZBOX_BUILD"`" ]; then
		SHOWAZBUILD="ON"
		if [ -e "$MYCHAINS/AZBOX-git_off" ] && [ ! -e "$MYCHAINS/AZBOX-git" ]; then
			mv "$MYCHAINS/AZBOX-git_off" "$MYCHAINS/AZBOX-git"
		fi
	else
		SHOWAZBUILD="OFF"
		if [ -e "$MYCHAINS/AZBOX-git" ] && [ ! -e "$MYCHAINS/AZBOX-git_off" ]; then
			mv "$MYCHAINS/AZBOX-git" "$MYCHAINS/AZBOX-git_off"
		fi
	fi
	if [ -z "`cat ./oscam-config.h | grep "//#define SHOW_NSLU2UNSLUNG_BUILD"`" ]; then
		SHOWNSLU2UNSLUNGBUILD="ON"
		if [ -e "$MYCHAINS/armv5b-softfloat-linux_off" ] && [ ! -e "$MYCHAINS/armv5b-softfloat-linux" ]; then
			mv "$MYCHAINS/armv5b-softfloat-linux_off" "$MYCHAINS/armv5b-softfloat-linux"
		fi
	else
		SHOWNSLU2UNSLUNGBUILD="OFF"
		if [ -e "$MYCHAINS/armv5b-softfloat-linux" ] && [ ! -e "$MYCHAINS/armv5b-softfloat-linux_off" ]; then
			mv "$MYCHAINS/armv5b-softfloat-linux" "$MYCHAINS/armv5b-softfloat-linux_off"
		fi
	fi
	if [ -z "`cat ./oscam-config.h | grep "//#define SHOW_PPC_DREAMBOX_BUILD"`" ]; then
		SHOWPPCDREAMBUILD="ON"
		if [ -e "$MYCHAINS/powerpc-tuxbox-linux-gnu_off" ] && [ ! -e "$MYCHAINS/powerpc-tuxbox-linux-gnu" ]; then
			mv "$MYCHAINS/powerpc-tuxbox-linux-gnu_off" "$MYCHAINS/powerpc-tuxbox-linux-gnu"
		fi
	else
		SHOWPPCDREAMBUILD="OFF"
		if [ -e "$MYCHAINS/powerpc-tuxbox-linux-gnu" ] && [ ! -e "$MYCHAINS/powerpc-tuxbox-linux-gnu_off" ]; then
			mv "$MYCHAINS/powerpc-tuxbox-linux-gnu" "$MYCHAINS/powerpc-tuxbox-linux-gnu_off"
		fi
	fi
	if [ -z "`cat ./oscam-config.h | grep "//#define SHOW_PPC_DREAMBOX_OLD_BUILD"`" ]; then
		SHOWPPCDB2DREAMOLDBUILD="ON"
		if [ -e "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2_off" ] && [ ! -e "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2" ]; then
			mv "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2_off" "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2"
		fi
	else
		SHOWPPCDB2DREAMOLDBUILD="OFF"
		if [ -e "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2" ] && [ ! -e "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2_off" ]; then
			mv "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2" "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2_off"
		fi
	fi
	if [ -z "`cat ./oscam-config.h | grep "//#define SHOW_FONERA_BUILD"`" ]; then
		SHOWFONERABUILD="ON"
		if [ -e '$MYCHAINS/"OpenWrt-SDK-atheros-2.6-for-Linux-i686_off"' ] && [ ! -e '$MYCHAINS/"OpenWrt-SDK-atheros-2.6-for-Linux-i686"' ]; then
			mv '$MYCHAINS/"OpenWrt-SDK-atheros-2.6-for-Linux-i686_off"' '$MYCHAINS/"OpenWrt-SDK-atheros-2.6-for-Linux-i686"'
		fi
	else
		SHOWFONERABUILD="OFF"
		if [ -e '$MYCHAINS/"OpenWrt-SDK-atheros-2.6-for-Linux-i686"' ] && [ ! -e '$MYCHAINS/"OpenWrt-SDK-atheros-2.6-for-Linux-i686_off"' ]; then
			mv '$MYCHAINS/"OpenWrt-SDK-atheros-2.6-for-Linux-i686"' '$MYCHAINS/"OpenWrt-SDK-atheros-2.6-for-Linux-i686_off"'
		fi
	fi
	if [ -z "`cat ./oscam-config.h | grep "//#define SHOW_DOCKSTAR_BUILD"`" ]; then
		SHOWDOCKSTARBUILD="ON"
		if [ -e "$MYCHAINS/DockStar_off" ] && [ ! -e "$MYCHAINS/DockStar" ]; then
			mv "$MYCHAINS/DockStar_off" "$MYCHAINS/DockStar"
		fi
	else
		SHOWDOCKSTARBUILD="OFF"
		if [ -e "$MYCHAINS/DockStar" ] && [ ! -e "$MYCHAINS/DockStar_off" ]; then
			mv "$MYCHAINS/DockStar" "$MYCHAINS/DockStar_off"
		fi
	fi
	if [ -z "`cat ./oscam-config.h | grep "//#define SHOW_TPLINK_BUILD"`" ]; then
		SHOWTPLINKBUILD="ON"
		if [ -e "$MYCHAINS"/"OpenWrt-SDK-ar71xx_off" ] && [ ! -e "$MYCHAINS"/"OpenWrt-SDK-ar71xx" ]; then
			mv "$MYCHAINS"/"OpenWrt-SDK-ar71xx_off" "$MYCHAINS"/"OpenWrt-SDK-ar71xx"
		fi
	else
		SHOWTPLINKBUILD="OFF"
		if [ -e "$MYCHAINS"/"OpenWrt-SDK-ar71xx" ] && [ ! -e "$MYCHAINS"/"OpenWrt-SDK-ar71xx_off" ]; then
			mv "$MYCHAINS"/"OpenWrt-SDK-ar71xx" "$MYCHAINS"/"OpenWrt-SDK-ar71xx_off"
		fi
	fi
	if [ -z "`cat ./oscam-config.h | grep "//#define SHOW_ASUSWL_BUILD"`" ]; then
		SHOWASUSWLBUILD="ON"
		if [ -e "$MYCHAINS/ASUSWL_off" ] && [ ! -e "$MYCHAINS/ASUSWL" ]; then
			mv "$MYCHAINS/ASUSWL_off" "$MYCHAINS/ASUSWL"
		fi
	else
		SHOWASUSWLBUILD="OFF"
		if [ -e "$MYCHAINS/ASUSWL" ] && [ ! -e "$MYCHAINS/ASUSWL_off" ]; then
			mv "$MYCHAINS/ASUSWL" "$MYCHAINS/ASUSWL_off"
		fi
	fi
	if [ "$FOR_PLATFORM" == "ASUSWL" ]; then
		ISSTATIC="-static"
	else
		if [ -z "`cat ./oscam-config.h | grep "//#define BUILD_STATIC"`" ]; then
			ISSTATIC="-static"
		else
			ISSTATIC=""
		fi
	fi
fi

if [ -n "$1" ]; then
	REPLY=$1
else
	clear
	echo "#####################################"
	echo -e "     \033[1;37;44mOSCam-Easy-Script $EASYVERSION\033[0m"
	echo -e "             \033[1;37;44mMain-Menu\033[0m"
	echo "#####################################"
	echo -e "\033[1;37;46m 0) OSCam-Setup\033[0m"
	echo -e "\033[1;37;46m 1) GET OSCam-SVN/UPDATE\033[0m"
	echo -e "\033[1;37;42m 2) BUILD SINGLE-OSCam\033[0m"
	echo -e "\033[1;37;42m 3) BUILD ALL OSCam's\033[0m"
	echo -e "\033[1;37;44m 4) GET TOOLCHAIN(S)\033[0m"
	echo -e "\033[1;37;44m 5) CHECK LINUX PACKAGES\033[0m"
	echo -e "\033[1;37;44m 6) EASY-INFO\033[0m"
	echo -e "\033[1;37;44m 7) EASY-SPECIALS\033[0m"
	echo -e "\033[1;37;41m *) EXIT\033[0m"
	echo ""

	read -p "Select target (0-7)? "
fi
### oscam-config.sh
if [ "$REPLY" == "0" ]; then
	cd "$OSCAMDIR"
	tempfile=/tmp/test$$
	configfile=oscam-config.h
	DIALOG=${DIALOG:-`which dialog`}

	height=30
	width=65
	listheight=13

	if [ -z "${DIALOG}" ]; then 
		echo "Please install -dialog package- first by:
sudo apt-get install dialog" 1>&2
		exit 1
	fi
	showbuilds="SHOW_DREAMBOX_BUILD SHOW_SH4_DVBAPI_BUILD SHOW_COOLSTREAM_BUILD SHOW_SH4_STAPI_BUILD SHOW_FRITZBOX_BUILD SHOW_DDWRT_BUILD SHOW_PC_BUILD SHOW_AZBOX_BUILD SHOW_NSLU2UNSLUNG_BUILD SHOW_PPC_DREAMBOX_BUILD SHOW_PPC_DREAMBOX_OLD_BUILD SHOW_FONERA_BUILD SHOW_DOCKSTAR_BUILD SHOW_TPLINK_BUILD SHOW_ASUSWL_BUILD"
	libstapi="liboscam_stapi_v0_06b4  liboscam_stapi_v0_07 liboscam_stapi_v0_07c liboscam_stapi_v0_07e liboscam_stapi_v0_08  liboscam_stapi_v0_08a liboscam_stapi_AMINO_old liboscam_stapi_UFS_old liboscam_stapi_OWN"
	setup="DO_ONLINECHECK OIA WEBIF WITH_WEBLOGO SHOW_MEM ANTI_DISCONNECT_CLIENT HAVE_LIBUSB WITH_PCSC HAVE_DVBAPI WITH_STAPI WITH_LIBCRYPTO_SO SCSI_DEV FB7390 DDWRT346 IRDETO_GUESSING CS_ANTICASC WITH_DEBUG BUILD_STATIC CS_WITH_DOUBLECHECK CS_LED CS_LOGHISTORY WITH_SSL WITH_LB LCDSUPPORT"
	protocols="MODULE_CAMD33 MODULE_CAMD35 MODULE_CAMD35_TCP MODULE_NEWCAMD MODULE_CCCAM MODULE_GBOX MODULE_RADEGAST MODULE_SERIAL MODULE_MONITOR MODULE_CONSTCW"
	readers="WITH_CARDREADER READER_NAGRA READER_IRDETO READER_CONAX READER_CRYPTOWORKS READER_SECA READER_VIACCESS READER_VIDEOGUARD READER_DRE READER_TONGFANG"

	check_test() {
		if [ "$(cat $configfile | grep "^#define $1$")" != "" ]; then
			echo "on"
		else
			echo "off"
		fi
	}

	disable_all() {
		for i in $1; do
			sed -i "s/^#define ${i}$/\/\/#define ${i}/g" $configfile
		done

	}

	enable_package() {
		for i in $(cat $tempfile); do
			strip=$(echo $i | sed "s/\"//g")
			sed -i "s/\/\/#define ${strip}$/#define ${strip}/g" $configfile
		done
	}

	print_components() {
		clear
		echo "You have selected the following components:"

		echo -e "\nSetup:"
		for i in $setup; do
			printf "\t%-20s: %s\n" $i $(check_test "$i")
		done

		echo -e "\nProtocols:"
		for i in $protocols; do
			printf "\t%-20s: %s\n" $i $(check_test "$i")
		done

		echo -e "\nReaders:"
		for i in $readers; do
			printf "\t%-20s: %s\n" $i $(check_test "$i")
		done

		echo -e "\nLibStapi:"
		for i in $libstapi; do
			printf "\t%-20s: %s\n" $i $(check_test "$i")
		done

		echo -e "\nShowBuilds:"
		for i in $showbuilds; do
			printf "\t%-20s: %s\n" $i $(check_test "$i")
		done
	}

	menu_setup() {
		${DIALOG} --checklist "\nChoose Setup:\n " $height $width $listheight \
			DO_ONLINECHECK		"SVN OnlineCheck"	$(check_test "DO_ONLINECHECK") \
			OIA			"One-In-All-Config"	$(check_test "OIA") \
			WEBIF			"Webinterface"		$(check_test "WEBIF") \
			WITH_WEBLOGO		"Webinterface+SB-Logo"	$(check_test "WITH_WEBLOGO") \
			SHOW_MEM		"Show Memusage Webif"	$(check_test "SHOW_MEM") \
			ANTI_DISCONNECT_CLIENT	"AntiDiscClients->camd35" $(check_test "ANTI_DISCONNECT_CLIENT") \
			HAVE_DVBAPI		"WITH_DVB-API"		$(check_test "HAVE_DVBAPI") \
			WITH_STAPI		"WITH_STAPI"		$(check_test "WITH_STAPI") \
			WITH_LIBCRYPTO_SO	"Use libcrypto/ssl.so"	$(check_test "WITH_LIBCRYPTO_SO") \
			SCSI_DEV		"INT.CARDREADER-SUPPORT" $(check_test "SCSI_DEV") \
			HAVE_LIBUSB		"WITH_LIBUSB(Smargo)"	$(check_test "HAVE_LIBUSB") \
			WITH_PCSC		"WITH_PCSC"		$(check_test "WITH_PCSC") \
			FB7390			"FRITZBOX_7390"		$(check_test "FB7390") \
			DDWRT346		"DDWRT346"		$(check_test "DDWRT346") \
			IRDETO_GUESSING		"Irdeto Guessing"	$(check_test "IRDETO_GUESSING") \
			CS_ANTICASC		"Anti Cascadingg"	$(check_test "CS_ANTICASC") \
			WITH_DEBUG		"Debug messages"	$(check_test "WITH_DEBUG") \
			BUILD_STATIC		"(NOT FOR ALL CHAINS)"	$(check_test "BUILD_STATIC") \
			CS_LOGHISTORY		"Log History"		$(check_test "CS_LOGHISTORY") \
			CS_WITH_DOUBLECHECK	"WITH_DOUBLECHECK"	$(check_test "CS_WITH_DOUBLECHECK") \
			CS_LED			"LED"			$(check_test "CS_LED") \
			QBOXHD_LED		"QboxHD LED"		$(check_test "QBOXHD_LED") \
			WITH_SSL		"Use SSL"		$(check_test "WITH_SSL") \
			WITH_LB			"WITH Loadbalancing"	$(check_test "WITH_LB") \
			LCDSUPPORT              "LCD support"           $(check_test "LCDSUPPORT") \
			2> ${tempfile}

		opt=${?}
		if [ $opt != 0 ]; then return; fi

		disable_all "$setup"
		enable_package
	}

	menu_protocols() {
		${DIALOG} --checklist "\nChoose Protocols:\n " $height $width $listheight \
			MODULE_CAMD33		"Camd3.3"	$(check_test "MODULE_CAMD33") \
			MODULE_CAMD35		"Camd3.5"	$(check_test "MODULE_CAMD35") \
			MODULE_CAMD35_TCP	"Camd3.5 TCP"	$(check_test "MODULE_CAMD35_TCP") \
			MODULE_NEWCAMD		"Newcamd"	$(check_test "MODULE_NEWCAMD") \
			MODULE_CCCAM		"CCCam"		$(check_test "MODULE_CCCAM") \
			MODULE_GBOX		"Gbox"		$(check_test "MODULE_GBOX") \
			MODULE_RADEGAST		"Radegast"	$(check_test "MODULE_RADEGAST") \
			MODULE_SERIAL		"Serial"	$(check_test "MODULE_SERIAL") \
			MODULE_MONITOR		"Monitor"	$(check_test "MODULE_MONITOR") \
			MODULE_CONSTCW		"Constcw"	$(check_test "MODULE_CONSTCW") \
			2> ${tempfile}

		opt=${?}
		if [ $opt != 0 ]; then return; fi

		disable_all "$protocols"
		enable_package
	}

	menu_reader() {
		${DIALOG} --checklist "\nChoose Reader:\n " $height $width $listheight \
			READER_NAGRA		"Nagravision"	$(check_test "READER_NAGRA") \
			READER_IRDETO		"Irdeto"	$(check_test "READER_IRDETO") \
			READER_CONAX		"Conax"		$(check_test "READER_CONAX") \
			READER_CRYPTOWORKS	"Cryptoworks"	$(check_test "READER_CRYPTOWORKS") \
			READER_SECA		"Seca"		$(check_test "READER_SECA") \
			READER_VIACCESS		"Viaccess"	$(check_test "READER_VIACCESS") \
			READER_VIDEOGUARD	"Videoguard"	$(check_test "READER_VIDEOGUARD") \
			READER_DRE		"Dre"		$(check_test "READER_DRE") \
			READER_TONGFANG		"Tongfang"	$(check_test "READER_TONGFANG") \
			2> ${tempfile}

		opt=${?}
		if [ $opt != 0 ]; then return; fi

		menuitem=`cat $tempfile`
		if [ "$menuitem" != "" ]; then
			echo -n " \"WITH_CARDREADER\"" >> ${tempfile}
		fi
		disable_all "$readers"
		enable_package
	}

	menu_libstapi() {
		${DIALOG} --radiolist "Select LIB-STAPI-Version:" $height $width $listheight \
		        liboscam_stapi_v0_06b4 "" $(check_test "liboscam_stapi_v0_06b4") \
		        liboscam_stapi_v0_07 "" $(check_test "liboscam_stapi_v0_07") \
		        liboscam_stapi_v0_07c "" $(check_test "liboscam_stapi_v0_07c") \
		        liboscam_stapi_v0_07e "" $(check_test "liboscam_stapi_v0_07e") \
		        liboscam_stapi_v0_08 "" $(check_test "liboscam_stapi_v0_08") \
		        liboscam_stapi_v0_08a "" $(check_test "liboscam_stapi_v0_08a") \
		        liboscam_stapi_AMINO_old "" $(check_test "liboscam_stapi_AMINO_old") \
		        liboscam_stapi_UFS_old "" $(check_test "liboscam_stapi_UFS_old") \
		        liboscam_stapi_OWN "(liboscam_stapi_OWN.a)" $(check_test "liboscam_stapi_OWN") \
			2> ${tempfile}

		opt=${?}
		if [ $opt != 0 ]; then return; fi

		disable_all "$libstapi"
		enable_package
	}

	menu_showbuilds() {
		${DIALOG} --checklist "Show Builds/Toolchains:" $height $width $listheight \
			SHOW_DREAMBOX_BUILD "" $(check_test "SHOW_DREAMBOX_BUILD") \
			SHOW_SH4_DVBAPI_BUILD "" $(check_test "SHOW_SH4_DVBAPI_BUILD") \
			SHOW_COOLSTREAM_BUILD "" $(check_test "SHOW_COOLSTREAM_BUILD") \
			SHOW_SH4_STAPI_BUILD "" $(check_test "SHOW_SH4_STAPI_BUILD") \
			SHOW_FRITZBOX_BUILD "" $(check_test "SHOW_FRITZBOX_BUILD") \
			SHOW_DDWRT_BUILD "" $(check_test "SHOW_DDWRT_BUILD") \
			SHOW_PC_BUILD "" $(check_test "SHOW_PC_BUILD") \
			SHOW_AZBOX_BUILD "" $(check_test "SHOW_AZBOX_BUILD") \
			SHOW_NSLU2UNSLUNG_BUILD "" $(check_test "SHOW_NSLU2UNSLUNG_BUILD") \
			SHOW_PPC_DREAMBOX_BUILD "" $(check_test "SHOW_PPC_DREAMBOX_BUILD") \
			SHOW_PPC_DREAMBOX_OLD_BUILD "" $(check_test "SHOW_PPC_DREAMBOX_OLD_BUILD") \
			SHOW_FONERA_BUILD "" $(check_test "SHOW_FONERA_BUILD") \
			SHOW_DOCKSTAR_BUILD "" $(check_test "SHOW_DOCKSTAR_BUILD") \
			SHOW_TPLINK_BUILD "" $(check_test "SHOW_TPLINK_BUILD") \
			SHOW_ASUSWL_BUILD "" $(check_test "SHOW_ASUSWL_BUILD") \
			2> ${tempfile}

		opt=${?}
		if [ $opt != 0 ]; then return; fi

		disable_all "$showbuilds"
		enable_package
	}

	while true; do
		${DIALOG} --menu "\nSelect category:\n " $height $width $listheight \
			Main-Setup	"OSCam-Setup" \
			Protocols	"Network Protocols" \
			Reader		"Card Reader" \
			LibStapi	"LibStapi (sh4-STAPI only)" \
			ShowBuilds	"Show Builds/Toolchains" \
			Quit		"Quit" \
			2> ${tempfile}

		opt=${?}
		if [ $opt != 0 ]; then rm $tempfile; print_components; sleep 2; $0; exit; fi

		menuitem=`cat $tempfile`
		case $menuitem in
	       		Main-Setup) menu_setup;;
			Protocols) menu_protocols;;
			Reader) menu_reader;;
			LibStapi) menu_libstapi;;
			ShowBuilds) menu_showbuilds;;
			Quit) rm $tempfile; print_components; sleep 2; $0; exit;;
		esac
	done

### SVN UP ###
elif [ "$REPLY" == "1" ]; then
	STREAMSVN="http://streamboard.gmc.to/svn/oscam/$MYSVN"
	STREAMSVNONLINE=`wget --no-cache -T5 -t2 -q -O- "$STREAMSVN" | head -n 1 | sed "s/.*Revision //" | sed "s/:.*//"`
	if [ -e "$OSCAMDIR/globals.h" ]; then
		clear
		if [ ! -z "$STREAMSVNONLINE" ]; then
			echo ""
			read -p "Start update now ? (y/N) ? "
			if [ "$REPLY" == "Y" ] || [ "$REPLY" == "y" ]; then
				echo -e "\033[1;37;46mDO OSCam-SVN UPDATE NOW...\033[0m"
				rm "$OSCAMDIR/Makefile" \
				"$OSCAMDIR/Makefile.save" \
				"$OSCAMDIR/globals.h" \
				"$OSCAMDIR/oscam-http.c" \
				"$OSCAMDIR/oscam-http.c.save" \
				"$OSCAMDIR/oscam-http.h" \
				"$OSCAMDIR/oscam-http.h.save" \
				"$OSCAMDIR/module-camd35.c" \
				"$OSCAMDIR/module-camd35.c.save" >/dev/null 2>&1
				read -p "update oscam-config-file ? 
(N maybe build not working!) (y/N) ? "
				if [ "$REPLY" == "Y" ] || [ "$REPLY" == "y" ]; then
					rm "$OSCAMDIR/oscam-config.c" \
					"$OSCAMDIR/oscam-config.c.save" \
					"$OSCAMDIR/oscam-config.h" \
					"$OSCAMDIR/oscam-config.h.save" >/dev/null 2>&1
				fi
				svn up
				if [ "$MYSVN" == "trunk" ]; then
					sed "s@^#define CS_VERSION    \"1.00-unstable_svn\"@#define CS_VERSION    \"1.00-unstable_by_EasyBuild_svn\"@g" -i "$OSCAMDIR/globals.h"
				fi
				if [ "$MYSVN" == "branches/dynamic-threads" ]; then
					sed "s@^#define CS_VERSION    \"1.00-dynamic_svn\"@#define CS_VERSION    \"1.00-dynamic_by_EasyBuild_svn\"@g" -i "$OSCAMDIR/globals.h"
				fi
				sed "s@^h2 {color: #F7F7F7; font-family: Arial; font-size: 50px; line-height: 50px; text-align:center; margin-top:0px; margin-bottom:0px}\\\\n\\\\@h2 {color: #D9D9D9; font-family: Arial; font-size: 15px; line-height: 15px; text-align:center; margin-top:0px; margin-bottom:0px}\\\\n\\\\@g" -i "$OSCAMDIR/oscam-http.h"
				sed "s@tpl_printf(vars, TPLADD, \"REFRESHTIME\", \"%d\", 2);@tpl_printf(vars, TPLADD, \"REFRESHTIME\", \"%d\", 5);@g" -i "$OSCAMDIR/oscam-http.c"
				sed "s@tpl_printf(vars, TPLADD, \"SECONDS\", \"%d\", 2);@tpl_printf(vars, TPLADD, \"SECONDS\", \"%d\", 5);@g" -i "$OSCAMDIR/oscam-http.c"
			else
				goback_main
			fi
		else
			echo -e "\033[1;37;46mSVN not responding!!!\033[0m"
			read -p "Wan't download Backup-svn4800 (y/N) ? "
			if [ "$REPLY" == "Y" ] || [ "$REPLY" == "y" ]; then
				echo -e "\033[1;37;44mDOWNLOAD OSCAM-SVN4800\033[0m"
				spinner
				wget -q -c http://tinyurl.com/4zkg2gx &
				spinner $! 
				if [ -e "$MYDLDIR/4zkg2gx" ]; then
					mv "$MYDLDIR/4zkg2gx" "$MYDLDIR/oscam-svn.tar.gz"
					tar -xzvf "$MYDLDIR/oscam-svn.tar.gz" -C "$OSCAMDIR" >/dev/null 2>&1
				fi
				if [ -e "$MYDLDIR/oscam-svn.tar.gz" ]; then
					tar -xzvf "$MYDLDIR/oscam-svn.tar.gz" -C "$OSCAMDIR" >/dev/null 2>&1
				fi
				find "$OSCAMDIR" -name "*.save" -exec rm {} \; >/dev/null 2>&1
				echo -e "\033[1;37;46mSVN REV: 4800 RESTORED!!!\033[0m"
				echo -e "\033[1;37;46mRestart easy-script now...\033[0m"
				sleep 3
				cd "$OSCAMDIR"
				$0
				exit
			else
				goback_main
			fi
		fi
	else
		if [ ! -z "$STREAMSVNONLINE" ]; then
			clear
			echo ""
			echo -e "\033[1;37;43mOSCam-SVN responding...\033[0m"
			read -p "CHECKOUT NOW OSCam-SVN (y/N)? "
			if [ "$REPLY" == "y" ] ||  "$REPLY" == "Y" ]; then
				if [ ! -e "$MAINDIR/oscam-svn" ]; then
					svn co http://streamboard.gmc.to/svn/oscam/$MYSVN "$MAINDIR/oscam-svn" >/dev/null 2>&1
					mv "$MAINDIR/make.sh" "$MAINDIR/oscam-svn/"
				elif [ -e "$MAINDIR/oscam-svn" ]; then
					cd "$MAINDIR/oscam-svn"
					svn co http://streamboard.gmc.to/svn/oscam/tags/1.00 ./ >/dev/null 2>&1
					mv "$MAINDIR/make.sh" "$MAINDIR/oscam-svn/"
				fi
				echo -e "\033[1;37;43mPLEASE START make.sh again by:
	cd "$MAINDIR/oscam-svn"
	./make.sh\033[0m"
				sleep 5
				exit
			else
				$0
				exit
			fi
		else
			echo -e "\033[1;37;46mSVN not responding!!!\033[0m"
			read -p "Want download Backup-svn4800 (y/N) ? "
			if [ "$REPLY" == "Y" ] || [ "$REPLY" == "y" ]; then
				if [ ! -e "$MAINDIR/oscam-svn" ]; then
					mkdir -p "$MAINDIR/oscam-svn/Download"
				fi
				echo -e "\033[1;37;44mDOWNLOAD OSCAM-SVN4800\033[0m"
				spinner
				wget -q -c http://tinyurl.com/4zkg2gx &
				spinner $! 
				if [ -e "$MAINDIR/4zkg2gx" ]; then
					mv "$MAINDIR/4zkg2gx" "$MAINDIR/oscam-svn.tar.gz"
					tar -xzvf "$MAINDIR/oscam-svn.tar.gz" -C "$MAINDIR/oscam-svn/" >/dev/null 2>&1
				fi
				if [ -e "$MAINDIR/oscam-svn.tar.gz" ]; then
					tar -xzvf "$MAINDIR/oscam-svn.tar.gz" -C "$MAINDIR/oscam-svn/" >/dev/null 2>&1
				fi
				rm "$MAINDIR/oscam-svn.tar.gz"
				mv "$MAINDIR/make.sh" "$MAINDIR/oscam-svn/"
				echo -e "\033[1;37;46mSVN REV: 4800 RESTORED!!!\033[0m"
				echo -e "\033[1;37;43mPLEASE START make.sh again by:
	cd "$MAINDIR/oscam-svn"
	./make.sh\033[0m"
				sleep 3
				exit
			else
				goback_main
			fi
		fi
	fi
	cd "$OSCAMDIR"
	$0
	exit

### single build
elif [ "$REPLY" == "2" ]; then
	check_myconf
	if [ -z "`cat ./oscam-config.h | grep "//#define WITH_PCSC"`" ]; then
		sed "s@PCSCON=.*@PCSCON=-DHAVE_PCSC@g" -i "$EASYCONF"
		if [ ! -z "`cat ./oscam-config.h | grep "//#define HAVE_LIBUSB"`" ]; then
			sed "s@SMARTREADERON=.*@SMARTREADERON=-DLIBUSB@g" -i "$EASYCONF"
			sed "s@.*#define HAVE_LIBUSB.*@#define HAVE_LIBUSB@g" -i "$OSCAMDIR/oscam-config.h"
		fi
	elif [ ! -z "`cat ./oscam-config.h | grep "//#define WITH_PCSC"`" ] && [ -z "`cat ./oscam-config.h | grep "//#define HAVE_LIBUSB"`" ]; then
		sed "s@PCSCON=.*@PCSCON=@g" -i "$EASYCONF"
		sed "s@SMARTREADERON=.*@SMARTREADERON=-DLIBUSB@g" -i "$EASYCONF"
	elif [ -z "`cat ./oscam-config.h | grep "//#define WITH_PCSC"`" ] && [ ! -z "`cat ./oscam-config.h | grep "//#define HAVE_LIBUSB"`" ]; then
		sed "s@PCSCON=.*@PCSCON=-DHAVE_PCSC@g" -i "$EASYCONF"
		sed "s@SMARTREADERON=.*@SMARTREADERON=@g" -i "$EASYCONF"
	else
		sed "s@PCSCON=.*@PCSCON=@g" -i "$EASYCONF"
		sed "s@SMARTREADERON=.*@SMARTREADERON=@g" -i "$EASYCONF"
	fi
	if [ -z "`cat ./oscam-config.h | grep "//#define WITH_WEBLOGO"`" ] && [ -z "`cat ./oscam-http.h | grep "streamboard.gmc.to/wbb2"`" ]; then
		sed "s@<BODY ##ONLOADSCRIPT##.*@<BODY ##ONLOADSCRIPT##>\\\\n\\\\\n\t<DIV CLASS=\\\\\"header\\\\\"><a href=\\\\\"http://streamboard.gmc.to/wbb2/portal.php\\\\\" target=\\\\\"_blank\\\\\"><img src=\\\\\"$MYWEBIFLOGO\\\\\" title=\\\\\"Streamboard-Portal\\\\\"/></a></DIV>\\\\n\\\\@g" -i "$OSCAMDIR/oscam-http.h"
	elif [ ! -z "`cat ./oscam-config.h | grep "//#define WITH_WEBLOGO"`" ] && [ ! -z "`cat ./oscam-http.h | grep "streamboard.gmc.to/wbb2"`" ]; then
		sed "/.*streamboard.gmc.to\/wbb2.*/d" -i "$OSCAMDIR/oscam-http.h"
	fi
	#sed "s@\"not found\", \"timeout\",@\"not found\", \"not found\",@g" -i "$OSCAMDIR/oscam.c"
#	if [ -z "`cat ./oscam-config.h | grep "//#define OIA"`" ] && [ -e "$OSCAMDIR/oscam-http.c.save" ]; then
#		sed "s@\"oscam.user\"@\"oscam.conf\"@g" -i "$OSCAMDIR/oscam-http.c"
#		sed "s@\"oscam.server\"@\"oscam.conf\"@g" -i "$OSCAMDIR/oscam-http.c"
#		sed "s@\"oscam.services\"@\"oscam.conf\"@g" -i "$OSCAMDIR/oscam-http.c"
#		sed "s@\"oscam.srvid\"@\"oscam.conf\"@g" -i "$OSCAMDIR/oscam-http.c"
#		sed "s@\"oscam.provid\"@\"oscam.conf\"@g" -i "$OSCAMDIR/oscam-http.c"
#		sed "s@\"oscam.tiers\"@\"oscam.conf\"@g" -i "$OSCAMDIR/oscam-http.c"

		#sed "/.*part=user\\\/d" -i "$OSCAMDIR/oscam-http.h"
		#sed "/.*part=server.*/d" -i "$OSCAMDIR/oscam-http.h"
		#sed "/.*part=services.*/d" -i "$OSCAMDIR/oscam-http.h"
		#sed "/.*part=srvid.*/d" -i "$OSCAMDIR/oscam-http.h"
		#sed "/.*part=provid.*/d" -i "$OSCAMDIR/oscam-http.h"
		#sed "/.*part=tiers.*/d" -i "$OSCAMDIR/oscam-http.h"
#	else
#		if [ -e "$OSCAMDIR/oscam-http.c.save" ]; then
#			rm "$OSCAMDIR/oscam-http.c"
#			cp "$OSCAMDIR/oscam-http.c.save" "$OSCAMDIR/oscam-http.c"
#		fi
#		if [ -e "$OSCAMDIR/oscam-http.h.save" ]; then
#			rm "$OSCAMDIR/oscam-http.h"
#			cp "$OSCAMDIR/oscam-http.h.save" "$OSCAMDIR/oscam-http.h"
#		fi
#	fi
	if [ -n "$2" ]; then
		REPLY=$2
	else
		clear
		echo "#####################################"
		echo -e "     \033[1;37;44mOSCam-Easy-Script $EASYVERSION\033[0m"
		echo -e "         \033[1;37;44mSingle-Build-Menu\033[0m"
		echo "#####################################"

		if [ "$SHOWDREAMBUILD" == "ON" ]; then
			echo -e "\033[1;37;42m 1) Build MIPSEL-DREAMBOX\033[0m"
		fi
		if [ "$SHOWFRITZBUILD" == "ON" ]; then
			echo -e "\033[1;37;42m 2) Build MIPS(EL)-ROUTER-FRITZBOX\033[0m"
		fi
		if [ "$SHOWDVBAPIBUILD" == "ON" ]; then
			echo -e "\033[1;37;42m 3) Build SH4-DVBAPI(E2)\033[0m"
		fi
		if [ "$SHOWSTAPIBUILD" == "ON" ]; then
			echo -e "\033[1;37;42m 4) Build SH4-STAPI\033[0m"
		fi
		if [ "$SHOWPPCDREAMBUILD" == "ON" ]; then
			echo -e "\033[1;37;42m 5) Build PPC-DREAMBOX\033[0m"
		fi
		if [ "$SHOWCOOLIEBUILD" == "ON" ]; then
			echo -e "\033[1;37;42m 6) Build ARM-Coolstream\033[0m"
		fi
		if [ "$SHOWNSLU2UNSLUNGBUILD" == "ON" ]; then
			echo -e "\033[1;37;42m 7) Build NSLU2-UNSLUNG\033[0m"
		fi
		if [ "$SHOWAZBUILD" == "ON" ]; then
			echo -e "\033[1;37;42m 8) Build MIPSEL-AZBOX\033[0m"
		fi
		if [ "$SHOWDDWRTBUILD" == "ON" ]; then
			echo -e "\033[1;37;42m 9) Build MIPSEL-ROUTER-DDWRT\033[0m"
		fi
		if [ "$SHOWFONERABUILD" == "ON" ]; then
			echo -e "\033[1;37;42m10) Build MIPSEL-ROUTER-FONERA\033[0m"
		fi
		if [ "$SHOWDOCKSTARBUILD" == "ON" ]; then
			echo -e "\033[1;37;42m11) Build ARM-DOCKSTAR\033[0m"
		fi
		if [ "$SHOWTPLINKBUILD" == "ON" ]; then
			echo -e "\033[1;37;42m12) Build MIPS-AR71xx-TP-LINK\033[0m"
		fi
		if [ "$SHOWASUSWLBUILD" == "ON" ]; then
			echo -e "\033[1;37;42m13) Build MIPSEL-ASUS-WL\033[0m"
		fi
		if [ "$SHOWPPCDB2DREAMOLDBUILD" == "ON" ]; then
			echo -e "\033[1;37;42m14) Build PPC-DBOX2/DREAMBOX-OLD\033[0m"
		fi
		if [ "$SHOWPCBUILD" == "ON" ]; then
			echo -e "\033[1;37;42m15) Build i386/x64 LINUX-PC\033[0m"
		fi
		echo -e "\033[1;37;46m *) Back To Main-Menu\033[0m"
		echo ""

		read -p "Select target (1-15)? "
	fi
	### DREAMBOX ###
	if [ "$REPLY" == "1" ]; then
		FOR_PLATFORM="DREAMBOX"
		MYHOST_TARGET="mipsel-unknown-linux-gnu"
		MYCROSS="cross-mipsel-tuxbox-linux-glibc"
		GO_TO="2"
		check_myconf
		. "$EASYCONF"
		MYCHAINPATH="$DREAMCHAIN"
		sed "s@CS_CONFDIR = .*@CS_CONFDIR = '\\\\\"$DREAMBOXCONFIG\\\\\"'@g" -i "$OSCAMDIR/Makefile"
		make clean >/dev/null 2>&1
		if [ ! -e "$MYCHAINS/mipsel-unknown-linux-gnu" ] && [ "$BUILDALL" == "0" ]; then
			chain_error
		fi
		if [ ! -e "$MYCHAINS/mipsel-unknown-linux-gnu" ] && [ "$BUILDALL" != "0" ]; then
			goto
		fi
		install_openssl
		cd "$OSCAMDIR"
		prepare_build
		make clean >/dev/null 2>&1
		COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME" | cut -d "-" -f2 | cut -d n -f2`
		if [ -z "$COPIED" ]; then
			prepare_ext
			turn_api ON
			check_ssl
			do_it
			turn_api OFF
			do_reset
		else
			allready_exist
		fi
		check_build_all
	### FRITZBOX ###
	elif [ "$REPLY" == "2" ]; then
		check_myconf
		. "$EASYCONF"
		MYHOST_TARGET="$FRITZUCLIBC-linux-uclibc"
		MYCROSS="cross-mipsel-router-linux-uclibc929"
		GO_TO="3"
		if [ "$FB7390" == "y" ]; then
			FOR_PLATFORM="FRITZBOX_7390"
			FREETZPATH7390="$MYLIBS/$FOR_PLATFORM"
			LIBSPATH="$FREETZPATH7390"
			MYFREETZ="freetz-trunk7390"
			sed "s@FRITZCHAIN=.*@FRITZCHAIN=$MYCHAINS/$MYFREETZ/toolchain/build/mips_gcc-$FRITZGCCVERSION-0.9.29/"$MYHOST_TARGET"/bin@g" -i "$EASYCONF"
		else
			FOR_PLATFORM="FRITZBOX"
			FREETZPATH="$MYLIBS/$FOR_PLATFORM"
			LIBSPATH="$FREETZPATH"
			MYFREETZ="freetz-trunk"
			sed "s@FRITZCHAIN=.*@FRITZCHAIN=$MYCHAINS/$MYFREETZ/toolchain/build/mipsel_gcc-$FRITZGCCVERSION-0.9.29/"$MYHOST_TARGET"/bin@g" -i "$EASYCONF"
		fi
		. "$EASYCONF"
		MYCHAINPATH="$FRITZCHAIN"
		# set default config path
		sed "s@CS_CONFDIR = .*@CS_CONFDIR = '\\\\\"$FRITZBOXCONFIG\\\\\"'@g" -i "$OSCAMDIR/Makefile"
		make clean >/dev/null 2>&1
		if [ ! -e "$MYCHAINS/$MYFREETZ" ] && [ "$BUILDALL" == "0" ]; then
			chain_error
		fi
		if [ ! -e "$MYCHAINS/$MYFREETZ" ] && [ "$BUILDALL" != "0" ]; then
			goto
		fi
		if [ ! -e "$MYCHAINS/$MYFREETZ/toolchain/.target" ]; then
			cd "$MYCHAINS/$MYFREETZ"
			echo -e "\033[1;37;42mBUILD $FOR_PLATFORM (FREETZ) TOOLCHAIN\033[0m"
			ln -sf "$MYDLDIR" "$MYCHAINS/$MYFREETZ/dl"
			#### pcsc patch ###
			wget -q -c http://tinyurl.com/2w6x86w
			if [ -e "$MYCHAINS/$MYFREETZ/2w6x86w" ]; then
				mv "$MYCHAINS/$MYFREETZ/2w6x86w" "$MYCHAINS/$MYFREETZ/pcsc-lite.patch"
			fi
			chmod 755 "$MYCHAINS/$MYFREETZ/pcsc-lite.patch"
			patch -p 0 < pcsc-lite.patch >/dev/null 2>&1
			sed "s@source make/xmail/Config.in@source make/xmail/Config.in\nsource make/pcsc-lite/Config.in@g" -i "$MYCHAINS/$MYFREETZ/make/Config.in"
			sed "s@source make/wput/external.in@source make/wput/external.in\nsource make/pcsc-lite/external.in@g" -i "$MYCHAINS/$MYFREETZ/make/external.in"
			### fritzbox.config ###
			if [ "$FB7390" == "y" ]; then
				wget -q -c http://tinyurl.com/2vvgf4b
				if [ -e "$MYCHAINS/$MYFREETZ/.config" ]; then
					rm "$MYCHAINS/$MYFREETZ/.config"
				fi
				if [ -e "$MYCHAINS/$MYFREETZ/2vvgf4b" ]; then
					mv "$MYCHAINS/$MYFREETZ/2vvgf4b" "$MYCHAINS/$MYFREETZ/config.fritz7390"
				fi
				mv ./config.fritz7390 ./.config
			else
				wget -q -c http://tinyurl.com/237s8rb
				if [ -e "$MYCHAINS/$MYFREETZ/.config" ]; then
					rm "$MYCHAINS/$MYFREETZ/.config"
				fi
				if [ -e "$MYCHAINS/$MYFREETZ/237s8rb" ]; then
					mv "$MYCHAINS/$MYFREETZ/237s8rb" "$MYCHAINS/$MYFREETZ/config.fritz"
				fi
				mv ./config.fritz ./.config
			fi
			echo -e "\033[1;37;42mON NEXT WINDOW 'MENUCONFIG' SELECT 'EXIT'-'YES'\033[0m"
			sleep 5
			make menuconfig
			make
			if [ -e "$MYCHAINS/$MYFREETZ/toolchain/.target" ]; then
				echo -e "\033[1;37;42mFRITZBOX (FREETZ) TOOLCHAIN SUCCESSFULL BUILD!!!\033[0m"
				sed "s@FRITZBOXTOOLCHAINBUILD=.*@FRITZBOXTOOLCHAINBUILD=y@g" -i "$EASYCONF"
				cd "$OSCAMDIR"
			else
				error
			fi
		fi
		if [ ! -e "$MYCHAINS/$MYFREETZ/make/pcsc-lite" ]; then
			sed "s@FRITZBOXTOOLCHAINBUILD=.*@FRITZBOXTOOLCHAINBUILD=n@g" -i "$EASYCONF"
			sed "s@BUILDALL=.*@BUILDALL=0@g" -i "$EASYCONF"
			error_chain
		fi

			if [ ! -e "$LIBSPATH/lib/libcrypto.a" ]; then
				prepare_openssl
				install_openssl
			fi
		cd "$OSCAMDIR"
		prepare_build
	. "$EASYCONF"
		COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME" | cut -d "-" -f2 | cut -d n -f2`
		if [ -z "$COPIED" ]; then
			prepare_ext
			turn_api OFF
			check_ssl
			do_it
			do_reset
			if [ -e "$INSTALLDIR/oscam-svn$VERSION-$MYHOST_TARGET" ]; then
				rm "$INSTALLDIR/oscam-svn$VERSION-$MYHOST_TARGET"
			fi
		else
			allready_exist
		fi
		check_build_all
	### SH4-DVBAPI ###
	elif [ "$REPLY" == "3" ]; then
		FOR_PLATFORM="SH4-DVBAPI"
		MYHOST_TARGET="sh4-linux"
		MYCHAINPATH="$SH4CHAIN"
		MYCROSS="cross-sh4-linux"
		GO_TO="4"
		check_myconf
		. "$EASYCONF"
		# set default config path
		sed "s@CS_CONFDIR = .*@CS_CONFDIR = '\\\\\"$SH4_DVBAPICONFIG\\\\\"'@g" -i "$OSCAMDIR/Makefile"
		make clean >/dev/null 2>&1
		if [ ! -e "$MYCHAINS/devkit_sh4" ] && [ "$BUILDALL" == "0" ]; then
			chain_error
		fi
		if [ ! -e "$MYCHAINS/devkit_sh4" ] && [ "$BUILDALL" != "0" ]; then
			goto
		fi

		make clean >/dev/null 2>&1
		if [ ! -e "$MYCHAINS/devkit_sh4" ]; then
			note_chain
		fi
		if [ -e "$MYCHAINS/devkit_sh4" ] && [ "$SH4TOOLCHAINBUILD" == "n" ] && [ ! -e "$MYCHAINS/devkit_sh4/tdt/tdt/cvs/cdk/.deps/libstdc++" ]; then
			clear
			cd "$MYCHAINS/devkit_sh4/tdt/tdt/cvs/cdk"
			echo "#####################################"
			echo -e "We build now Toolchain"
			echo -e "please select the following options when asked:"
			echo -e "1 (ufs910)"
			echo -e "1 (kernel stm22"
			echo -e "n (no debug)"
			echo -e "1 (player 131)"
			echo -e "multicom: presse enter"
			echo -e "we won't build any img, we only build devkit!!!"
			echo -e "GO SHOPPING WHATEVER... IT TAKES NOW 2 - 6 HOURS!!"
			echo "#####################################"
			sleep 5
			./make.sh
			if [ -e "$MYCHAINS/devkit_sh4/tdt/tdt/Archive" ] ; then
				rm -rf "$MYCHAINS/devkit_sh4/tdt/tdt/Archive"
				ln -sf "$MYDLDIR" "$MYCHAINS/devkit_sh4/tdt/tdt/Archive"
			fi
			make bootstrap
			if [ ! -e "$MYCHAINS/devkit_sh4/tdt/tdt/cvs/cdk/.deps/libstdc++" ]; then
				error
			else
				echo -e "\033[1;37;42mTOOLCHAIN SUCCESSFULL BUILD\033[0m"
				sed "s/SH4TOOLCHAINBUILD=.*/SH4TOOLCHAINBUILD=y/g" -i "$EASYCONF"
			fi
		else
			echo -e "\033[1;37;42mFOUND DUCKBOX-SH4-TOOLCHAIN\033[0m"
		fi
		install_openssl
		cd "$OSCAMDIR"
		prepare_build
		make clean >/dev/null 2>&1
		COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME" | cut -d "-" -f2 | cut -d n -f2`
		if [ -z "$COPIED" ]; then
			prepare_ext
			turn_api ON
			check_ssl
			do_it
			turn_api OFF
			do_reset
		else
			allready_exist
		fi
		check_build_all
	### SH4-STAPI ###
	elif [ "$REPLY" == "4" ]; then
		FOR_PLATFORM="SH4-STAPI"
		MYHOST_TARGET="sh4-linux"
		MYCHAINPATH="$SH4CHAIN"
		MYCROSS="cross-sh4-linux-stapi"
		MYTINY="5ur2mhn"
		GO_TO="5"
		if [ ! -e "$OSCAMDIR/stapi/liboscam_stapi.$LIBOSCAM_STAPIVER.a" ]; then
			if [ -e "$MYDLDIR/$LIBSTAPIFILE" ]; then
				rm "$MYDLDIR/$LIBSTAPIFILE"
			fi
			cd "$MYDLDIR"
			if [ ! -e "$MYDLDIR/$LIBSTAPIFILE" ]; then
				echo -e "\033[1;37;44mDOWNLOAD LIBSTAPI\033[0m"
				spinner
				wget -q -c http://tinyurl.com/$MYTINY &
				spinner $! 
			fi
			if [ ! -e "$OSCAMDIR/stapi" ]; then
				mkdir "$OSCAMDIR/stapi"
			fi
			if [ -e "$MYDLDIR/$MYTINY" ]; then
				mv "$MYDLDIR/$MYTINY" "$MYDLDIR/$LIBSTAPIFILE"
				tar -xzvf "$MYDLDIR/$LIBSTAPIFILE" -C "$OSCAMDIR/stapi" >/dev/null 2>&1
			fi
			if [ -e "$MYDLDIR/$LIBSTAPIFILE" ]; then
				tar -xzvf "$MYDLDIR/$LIBSTAPIFILE" -C "$OSCAMDIR/stapi" >/dev/null 2>&1
			fi
			cd "$OSCAMDIR"
		fi
		check_myconf			
		if [ -z "`cat ./oscam-config.h | grep "//#define liboscam_stapi_v0_06b4"`" ]; then
			LIBSTAPI="liboscam_stapi.v0.06.beta4.a"
			ln -sf "$OSCAMDIR/stapi/$LIBSTAPI" "$OSCAMDIR/stapi/liboscam_stapi.a"
		elif [ -z "`cat ./oscam-config.h | grep "//#define liboscam_stapi_v0_07"`" ]; then
			LIBSTAPI="liboscam_stapi.v0.07.a"
			ln -sf "$OSCAMDIR/stapi/$LIBSTAPI" "$OSCAMDIR/stapi/liboscam_stapi.a"
		elif [ -z "`cat ./oscam-config.h | grep "//#define liboscam_stapi_v0_07c"`" ]; then
			LIBSTAPI="liboscam_stapi.v0.07c.a"
			ln -sf "$OSCAMDIR/stapi/$LIBSTAPI" "$OSCAMDIR/stapi/liboscam_stapi.a"
		elif [ -z "`cat ./oscam-config.h | grep "//#define liboscam_stapi_v0_07e"`" ]; then
			LIBSTAPI="liboscam_stapi.v0.07e.a"
			ln -sf "$OSCAMDIR/stapi/$LIBSTAPI" "$OSCAMDIR/stapi/liboscam_stapi.a"
		elif [ -z "`cat ./oscam-config.h | grep "//#define liboscam_stapi_v0_08"`" ]; then
			LIBSTAPI="liboscam_stapi.v0.08.a"
			ln -sf "$OSCAMDIR/stapi/$LIBSTAPI" "$OSCAMDIR/stapi/liboscam_stapi.a"
		elif [ -z "`cat ./oscam-config.h | grep "//#define liboscam_stapi_v0_08a"`" ]; then
			LIBSTAPI="liboscam_stapi.v0.08a.a"
			ln -sf "$OSCAMDIR/stapi/$LIBSTAPI" "$OSCAMDIR/stapi/liboscam_stapi.a"
		elif [ -z "`cat ./oscam-config.h | grep "//#define liboscam_stapi_AMINO_old"`" ]; then
			LIBSTAPI="liboscam_stapi_v.NON-UFS_old.a"
			ln -sf "$OSCAMDIR/stapi/$LIBSTAPI" "$OSCAMDIR/stapi/liboscam_stapi.a"
		elif [ -z "`cat ./oscam-config.h | grep "//#define liboscam_stapi_UFS_old"`" ]; then
			LIBSTAPI="liboscam_stapi_v.UFS_old.a"
			ln -sf "$OSCAMDIR/stapi/$LIBSTAPI" "$OSCAMDIR/stapi/liboscam_stapi.a"
		elif [ -z "`cat ./oscam-config.h | grep "//#define liboscam_stapi_OWN"`" ]; then
			LIBSTAPI="liboscam_stapi_OWN.a"
			ln -sf "$OSCAMDIR/stapi/$LIBSTAPI" "$OSCAMDIR/stapi/liboscam_stapi.a"
		fi

		. "$EASYCONF"
		# set default config path
		sed "s@CS_CONFDIR = .*@CS_CONFDIR = '\\\\\"$SH4_STAPICONFIG\\\\\"'@g" -i "$OSCAMDIR/Makefile"
		make clean >/dev/null 2>&1
		if [ ! -e "$MYCHAINS/devkit_sh4" ] && [ "$BUILDALL" == "0" ]; then
			chain_error
		fi
		if [ ! -e "$MYCHAINS/devkit_sh4" ] && [ "$BUILDALL" != "0" ]; then
			goto
		fi
		cd "$OSCAMDIR"
		if [ ! -e "$OSCAMDIR/stapi/liboscam_stapi.$LIBOSCAM_STAPIVER.a" ]; then
			if [ -e "$MYDLDIR/$LIBSTAPIFILE" ]; then
				rm "$MYDLDIR/$LIBSTAPIFILE"
			fi
			echo -e "\033[1;37;42mDOWNLOAD/EXTRACT LIBSTAPI\033[0m"
			cd "$MYDLDIR"
			spinner
			wget -q -c http://tinyurl.com/4obxoqr &
			spinner $! 
		fi
		if [ -e "$MYDLDIR/4obxoqr" ]; then
			mv "$MYDLDIR/4obxoqr" "$MYDLDIR/$LIBSTAPIFILE"
		fi
		cd "$OSCAMDIR"
		if [ ! -e "$OSCAMDIR/stapi/liboscam_stapi.$LIBOSCAM_STAPIVER.a" ]; then
			mkdir "$OSCAMDIR/stapi"
			tar -xzvf "$MYDLDIR/$LIBSTAPIFILE" -C "$OSCAMDIR/stapi" >/dev/null 2>&1
			ln -sf "$OSCAMDIR/stapi/liboscam_stapi.$LIBOSCAM_STAPIVER.a" "$OSCAMDIR/stapi/liboscam_stapi.a"
		fi
		chmod 755 "$OSCAMDIR/stapi"
		cd "$OSCAMDIR"
		if [ -e "$MYCHAINS/devkit_sh4" ] && [ "$SH4TOOLCHAINBUILD" == "n" ] && [ ! -e "$MYCHAINS/devkit_sh4/tdt/tdt/cvs/cdk/.deps/libstdc++" ]; then
			cd "$MYCHAINS/devkit_sh4/tdt/tdt/cvs/cdk"
			echo "#####################################"
			echo -e "We build now Toolchain"
			echo -e "please select the following options when asked:"
			echo -e "1 (ufs910)"
			echo -e "1 (kernel stm22"
			echo -e "n (no debug)"
			echo -e "1 (player 131)"
			echo -e "multicom: presse enter"
			echo -e "we won't build any img, we only build devkit!!!"
			echo -e "GO SHOPPING WHATEVER... IT TAKES NOW 2 - 6 HOURS!!"
			echo "#####################################"
			sleep 5
			./make.sh
			if [ -e "$MYCHAINS/devkit_sh4/tdt/tdt/Archive" ] ; then
				rm -rf "$MYCHAINS/devkit_sh4/tdt/tdt/Archive"
				ln -sf "$MYDLDIR" "$MYCHAINS/devkit_sh4/tdt/tdt/Archive"
			fi
			echo -e "BUILD TOOLCHAIN NOW, TAKES 2-6 Hours!"
			make bootstrap
			if [ ! -e "$MYCHAINS/devkit_sh4/tdt/tdt/cvs/cdk/.deps/libstdc++" ]; then
				error
			else
				echo -e "\033[1;37;42mTOOLCHAIN SUCCESSFULL FINISHED\033[0m"
				sed "s/SH4TOOLCHAINBUILD=.*/SH4TOOLCHAINBUILD=y/g" -i "$EASYCONF"
			fi
		else
			echo -e "\033[1;37;42mFOUND DUCKBOX-SH4-TOOLCHAIN\033[0m"
		fi
		install_openssl
		cd "$OSCAMDIR"
		prepare_build
		make clean >/dev/null 2>&1
		COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME" | cut -d "-" -f2 | cut -d n -f2`
		if [ -z "$COPIED" ]; then
			prepare_ext
			turn_api ON
			DEBUGVALUE=`cat "$OSCAMDIR/oscam-config.h" | grep "#define WITH_DEBUG"`
			sed "s@.*#define WITH_DEBUG@#define WITH_DEBUG@g" -i "$OSCAMDIR/oscam-config.h"
			if [ "$LBUSB" == "y" ]; then
				if [ "$SMARTREADER" == "y" ]; then
					sed "s@OS_PTLI=.* \\\@OS_PTLI=\"-lpthread -lpcsclite -lusb-1.0 -lrt -ldl\" \\\\@g" -i "$OSCAMDIR/Makefile"
					sed "s@DS_CFLAGS=.* \\\@DS_CFLAGS=\"-c -I$MYLIBS/$FOR_PLATFORM/include -I$MYLIBS/$FOR_PLATFORM/include/PCSC\" \\\\@g" -i "$OSCAMDIR/Makefile"
					sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"-L$MYLIBS/$FOR_PLATFORM/lib -I$MYLIBS/$FOR_PLATFORM/include/PCSC -I$MYLIBS/$FOR_PLATFORM/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
				else
					sed "s@OS_PTLI=.* \\\@OS_PTLI=\"-lpthread -lusb-1.0 -lrt -ldl\" \\\\@g" -i "$OSCAMDIR/Makefile"
					sed "s@DS_CFLAGS=\"-c\" \\\@DS_CFLAGS=\"-c -I$MYLIBS/$FOR_PLATFORM/include -I$MYLIBS/$FOR_PLATFORM/include/libusb-1.0\" \\\\@g" -i "$OSCAMDIR/Makefile"
					sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"-L$MYLIBS/$FOR_PLATFORM/lib -I$MYLIBS/$FOR_PLATFORM/include -I$MYLIBS/$FOR_PLATFORM/include/libusb-1.0\" \\\\@g" -i "$OSCAMDIR/Makefile"
				fi
				check_ssl
				make $MYCROSS
			else
				sed "s@DS_CFLAGS=.* \\\@DS_CFLAGS=\"-c -I$MYLIBS/$FOR_PLATFORM/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
				sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"-L$MYLIBS/$FOR_PLATFORM/lib $ISSTATIC -I$MYLIBS/$FOR_PLATFORM/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
				check_ssl
				make $MYCROSS
			fi
			sed "s@.*#define WITH_DEBUG@$DEBUGVALUE@g" -i "$OSCAMDIR/oscam-config.h"
			turn_api OFF
			do_reset
		else
			allready_exist
		fi
		check_build_all
	### PPC DREAMBOX ###
	elif [ "$REPLY" == "5" ]; then
		FOR_PLATFORM="PPC_DREAM"
		MYHOST_TARGET="powerpc-linux"
		MYCHAINPATH="$PPCDMCHAIN"
		MYCROSS="cross-powerpc-tuxbox-linux"
		GO_TO="6"
		check_myconf
		. "$EASYCONF"
		# set default config path
		sed "s@CS_CONFDIR = .*@CS_CONFDIR = '\\\\\"$PPC_DREAMCONFIG\\\\\"'@g" -i "$OSCAMDIR/Makefile"
		make clean >/dev/null 2>&1
		echo ""
		if [ ! -e $MYCHAINS/powerpc-tuxbox-linux-gnu ] && [ "$BUILDALL" == "0" ]; then
			error_chain
		fi
		if [ ! -e $MYCHAINS/powerpc-tuxbox-linux-gnu ] && [ "$BUILDALL" != "0" ]; then
			goto
		fi
		install_openssl
		cd "$OSCAMDIR"
		prepare_build
		make clean >/dev/null 2>&1
		COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME" | cut -d "-" -f2 | cut -d n -f2`
		if [ -z "$COPIED" ]; then
			prepare_ext
			turn_api ON
			check_ssl
			do_it
			turn_api OFF
			do_reset
		else
			allready_exist
		fi
		check_build_all
	### COOLSTREAM ###
	elif [ "$REPLY" == "6" ]; then
		FOR_PLATFORM="COOLSTREAM"
		MYHOST_TARGET="arm-cx2450x-linux-gnueabi"
		MYCHAINPATH="$COOLSTREAMCHAIN"
		MYCROSS="cross-armLE-coolstream-linux"
		GO_TO="7"
		check_myconf
		. "$EASYCONF"
		sed "s@CS_CONFDIR = .*@CS_CONFDIR = '\\\\\"$COOLSTREAMCONFIG\\\\\"'@g" -i "$OSCAMDIR/Makefile"
		make clean >/dev/null 2>&1
		if [ ! -e $MYCHAINS/COOLSTREAM-git ] && [ "$BUILDALL" == "0" ]; then
			chain_error
		fi
		if [ ! -e "$MYCHAINS/COOLSTREAM-git" ] && [ "$BUILDALL" != "0" ]; then
			goto
		fi
		if [ -e "$MYCHAINS/COOLSTREAM-git" ] && [ ! -e "$MYCHAINS/COOLSTREAM-git/cross/bin/arm-nevis-strip" ]; then
			cd "$OSCAMDIR"
				echo -e "\033[1;37;42mBUILD COOLSTREAM-TOOLCHAIN\033[0m"
				cd "$MYCHAINS/COOLSTREAM-git"
					make preqs
					make crosstool
					mkdir -p $MYCHAINS/COOLSTREAM-git/root/bin
					rm -rf $MYCHAINS/COOLSTREAM-git/build_tmp/crosstool-ng*
					ln -sf $MYDLDIR/libnxp.so $MYCHAINS/COOLSTREAM-git/cross/arm-cx2450x-linux-gnueabi/sys-root/lib/libnxp.so
					if [ ! -e $MYCHAINS/COOLSTREAM-git/cross/bin/arm-nevis-strip ]; then
						error
					else
						echo -e "\033[1;37;42mTOOLCHAIN SUCCESSFULL BUILD\033[0m"
						sed "s/COOLSTREAMTOOLCHAINBUILD=.*/COOLSTREAMTOOLCHAINBUILD=y/g" -i "$EASYCONF"
						sleep 2
					fi
		fi
		if [ -e "$MYCHAINS/COOLSTREAM-git/cross/arm-cx2450x-linux-gnueabi/sys-root/lib" ] && [ ! -e "$MYDLDIR/libnxp.so" ]; then
			cd "$MYDLDIR"
			wget -c -q http://streamboard.gmc.to:8001/raw-attachment/wiki/crosscompiling/libnxp.so.gz
			gunzip libnxp.so.gz
			ln -sf $MYDLDIR/libnxp.so $MYCHAINS/COOLSTREAM-git/cross/arm-cx2450x-linux-gnueabi/sys-root/lib/libnxp.so
		fi
		cd "$OSCAMDIR"
		install_openssl
		cd "$OSCAMDIR"
		prepare_build
		make clean >/dev/null 2>&1
		COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME" | cut -d "-" -f2 | cut -d n -f2`
		if [ -z "$COPIED" ]; then
			prepare_ext
			ln -sf $MYDLDIR/libnxp.so $MYCHAINS/COOLSTREAM-git/cross/arm-cx2450x-linux-gnueabi/sys-root/lib/libnxp.so
			turn_api ON
			check_ssl
			do_it
			turn_api OFF
			do_reset
		else
			allready_exist
		fi
		check_build_all
	### NSLU2 unslung ###
	elif [ "$REPLY" == "7" ]; then
		FOR_PLATFORM="NSLU2UNSLUNG"
		MYHOST_TARGET="armv5b-softfloat-linux"
		MYCHAINPATH="$NSLU2UNSLUNGCHAIN"
		MYCROSS="cross-arm-nslu2-linux"
		GO_TO="8"
		check_myconf
		. "$EASYCONF"
		# set default config path
		sed "s@CS_CONFDIR = .*@CS_CONFDIR = '\\\\\"$NSLU2UNSLUNGCONFIG\\\\\"'@g" -i "$OSCAMDIR/Makefile"
		make clean >/dev/null 2>&1
		echo ""
		if [ ! -e $MYCHAINS/armv5b-softfloat-linux ] && [ "$BUILDALL" == "0" ]; then
			error_chain
		fi
		if [ ! -e $MYCHAINS/armv5b-softfloat-linux ] && [ "$BUILDALL" != "0" ]; then
			goto
		fi
		install_openssl
		cd "$OSCAMDIR"
		prepare_build
		make clean >/dev/null 2>&1
		COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME" | cut -d "-" -f2 | cut -d n -f2`
		if [ -z "$COPIED" ]; then
			prepare_ext
			turn_api OFF
			if [ "$LBUSB" == "y" ]; then
				if [ "$SMARTREADER" == "y" ]; then
					sed "s@OS_PTLI=.* \\\@OS_PTLI=\"-lpthread -lpcsclite -lusb-1.0 -lrt -ldl\" \\\\@g" -i "$OSCAMDIR/Makefile"
					sed "s@DS_CFLAGS=.* \\\@DS_CFLAGS=\"-c -I$MYLIBS/$FOR_PLATFORM/include -I$MYLIBS/$FOR_PLATFORM/include/PCSC\" \\\\@g" -i "$OSCAMDIR/Makefile"
					sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"-L$MYLIBS/$FOR_PLATFORM/lib $ISSTATIC -I$MYLIBS/$FOR_PLATFORM/include/PCSC -I$MYLIBS/$FOR_PLATFORM/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
				else
					sed "s@OS_PTLI=.* \\\@OS_PTLI=\"-lpthread -lusb-1.0 -lrt -ldl\" \\\\@g" -i "$OSCAMDIR/Makefile"
					sed "s@DS_CFLAGS=\"-c\" \\\@DS_CFLAGS=\"-c -I$MYLIBS/$FOR_PLATFORM/include -I$MYLIBS/$FOR_PLATFORM/include/libusb-1.0\" \\\\@g" -i "$OSCAMDIR/Makefile"
					sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"-L$MYLIBS/$FOR_PLATFORM/lib $ISSTATIC -I$MYLIBS/$FOR_PLATFORM/include -I$MYLIBS/$FOR_PLATFORM/include/libusb-1.0\" \\\\@g" -i "$OSCAMDIR/Makefile"
				fi
				check_ssl
				make $MYCROSS
			else
				sed "s@DS_CFLAGS=.* \\\@DS_CFLAGS=\"-c -I$MYLIBS/$FOR_PLATFORM/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
				sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"-L$MYLIBS/$FOR_PLATFORM/lib $ISSTATIC -I$MYLIBS/$FOR_PLATFORM/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
				check_ssl
				make $MYCROSS
			fi
			do_reset
		else
			allready_exist
		fi
		check_build_all
	### AZBOX ###
	elif [ "$REPLY" == "8" ]; then
		FOR_PLATFORM="AZBOX"
		MYHOST_TARGET="mipsel-linux-uclibc"
		MYCHAINPATH="$AZBOXCHAIN"
		MYCROSS="cross-mipsel-azbox-uclibc927"
		GO_TO="9"
		check_myconf
		. "$EASYCONF"
		# set default config path
		sed "s@CS_CONFDIR = .*@CS_CONFDIR = '\\\\\"$AZBOXCONFIG\\\\\"'@g" -i "$OSCAMDIR/Makefile"
		make clean >/dev/null 2>&1
		echo ""
		if [ ! -e $MYCHAINS/AZBOX-git ] && [ "$BUILDALL" == "0" ]; then
			error_chain
		fi
		if [ ! -e $MYCHAINS/AZBOX-git ] && [ "$BUILDALL" != "0" ]; then
			goto
		fi
		make clean >/dev/null 2>&1
		if [ -e "$MYCHAINS/AZBOX-git" ] && [ ! -e "$MYCHAINS/AZBOX-git/smp86xx_toolchain.20080505/build_mipsel_nofpu/staging_dir/bin/mipsel-linux-gcc" ]; then
			cd "$MYCHAINS/AZBOX-git/smp86xx_toolchain.20080505"
			export CC=gcc-3.4
			echo "######################################################"
			echo -e "\033[1;37;42mWe build now Toolchain\033[0m"
			echo -e "\033[1;37;42mYou don't need to change anything in the config\033[0m"
			echo -e "\033[1;37;42mjust select 'exit' on next menu!\033[0m"
			echo "######################################################"
			sleep 5
			make menuconfig
			make
			source toolchain-path.env
			cd $MYCHAINS/AZBOX-git/Plugins-SDK/samples
			make install
			echo "toolchain build finished"
			sed "s@AZBOXTOOLCHAINBUILD=.*@AZBOXTOOLCHAINBUILD=y@g" -i "$EASYCONF"
			sleep 2
		fi
		cd "$OSCAMDIR"
		install_openssl
		cd "$OSCAMDIR"
		prepare_build
		make clean >/dev/null 2>&1
		COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME" | cut -d "-" -f2 | cut -d n -f2`
		if [ -z "$COPIED" ]; then
			prepare_ext_spec
			turn_api ON
			check_ssl
			do_it
			turn_api OFF
			do_reset
		else
			allready_exist
		fi
		check_build_all
	### DDWRT ###
	elif [ "$REPLY" == "9" ]; then
		FOR_PLATFORM="DDWRT"
		MYHOST_TARGET="mipsel-linux-uclibc"
		MYCROSS="cross-mipsel-router-linux-uclibc928"
		GO_TO="10"
		check_myconf
		. "$EASYCONF"
		# set default config path
		sed "s@CS_CONFDIR = .*@CS_CONFDIR = '\\\\\"$DDWRTCONFIG\\\\\"'@g" -i "$OSCAMDIR/Makefile"
		make clean >/dev/null 2>&1
		echo ""
		if [ ! -e "$MYCHAINS/$FOR_PLATFORM" ] && [ "$BUILDALL" == "0" ]; then
			error_chain
		fi
		if [ ! -e "$MYCHAINS/$FOR_PLATFORM" ] && [ "$BUILDALL" != "0" ]; then
			goto
		fi
		if [ "$DDWRT346" == "y" ]; then
			sed "s@FRITZCHAIN=.*@FRITZCHAIN=$MYCHAINS/$FOR_PLATFORM/toolchains/3.4.6-uclibc-0.9.28/bin@g" -i "$EASYCONF"
			DDWRTPATH="3.4.6"
			. "$EASYCONF"
		else
			sed "s@FRITZCHAIN=.*@FRITZCHAIN=$MYCHAINS/$FOR_PLATFORM/toolchains/4.1.0-uclibc-0.9.28/bin@g" -i "$EASYCONF"
			DDWRTPATH="4.1.0"
			. "$EASYCONF"
		fi
		MYCHAINPATH="$FRITZCHAIN"
		if [ ! -e "$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/lib/libcrypto.a" ]; then
			prepare_openssl
			export PATH="$MYCHAINPATH:$PATH"
			echo -e "\033[1;37;42m$FOR_PLATFORM-$DDWRTPATH:\033[0m"
			echo -e "\033[1;37;42mBUILD LIBCRYPTO-$OPENSSLVER\033[0m"
			./config --prefix="$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt" shared no-asm >/dev/null 2>&1
			sed "s@^CFLAG= .*@CFLAG= -O -fPIC@g" -i Makefile
			sed "s@^SHARED_LDFLAGS=-m64@SHARED_LDFLAGS=@g" -i Makefile
			sed "s@CC= gcc@CC= $MYHOST_TARGET-gcc@g" -i Makefile
			sed "s@AR=ar.*@AR= $MYHOST_TARGET-ar \$\(ARFLAGS) r@g" -i Makefile
			sed "s@RANLIB= \/usr.*@RANLIB= $MYHOST_TARGET-ranlib@g" -i Makefile
			sed "s@MAKEDEPPROG= gcc@MAKEDEPPROG= $MYHOST_TARGET-gcc@g" -i Makefile
			make_install
			if [ -e "$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/lib/libcrypto.a" ]; then
				ok_openssl
			else
				error_openssl
			fi
		fi
		cd "$OSCAMDIR"
		if [ "$WEBIF" == "y" ] && [ "$LBUSB" == "y" ] && [ "$SMARTREADER" == "n" ] && [ "$ONEINALLCONF" == "n" ]; then
			echo -e "\033[1;37;42mBuild $FOR_PLATFORM-$DDWRTPATH-libusb-Webif-Default\033[0m"
			INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/DEFAULT/LIBUSB/WEBIF"
			CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-$DDWRTPATH-DEFAULT-LIBUSB-WEBIF"

		elif [ "$WEBIF" == "y" ] && [ "$SMARTREADER" == "y" ] && [ "$ONEINALLCONF" == "n" ]; then
			echo -e "\033[1;37;42mBuild $FOR_PLATFORM-$DDWRTPATH-pcsc-Webif-Default\033[0m"
			INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/DEFAULT/PCSC/WEBIF"
			CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-$DDWRTPATH-DEFAULT-PCSC-WEBIF"

		elif [ "$WEBIF" == "y" ] && [ "$LBUSB" == "y" ] && [ "$SMARTREADER" == "n" ] && [ "$ONEINALLCONF" == "y" ]; then
			echo -e "\033[1;37;42mBuild $FOR_PLATFORM-$DDWRTPATH-libusb-Webif-OneInAll\033[0m"
			INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/ONEINALL/LIBUSB/WEBIF"
			CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-$DDWRTPATH-ONEINALL-LIBUSB-WEBIF"

		elif [ "$WEBIF" == "y" ] && [ "$SMARTREADER" == "y" ] && [ "$ONEINALLCONF" == "y" ]; then
			echo -e "\033[1;37;42mBuild $FOR_PLATFORM-$DDWRTPATH-pcsc-Webif-OneInAll\033[0m"
			INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/ONEINALL/PCSC/WEBIF"
			CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-$DDWRTPATH-ONEINALL-PCSC-WEBIF"

		elif [ "$WEBIF" == "n" ] && [ "$LBUSB" == "y" ] && [ "$SMARTREADER" == "n" ] && [ "$ONEINALLCONF" == "n" ]; then
			echo -e "\033[1;37;42mBuild $FOR_PLATFORM-$DDWRTPATH-libusb-Default\033[0m"
			INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/DEFAULT/LIBUSB"
			CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-$DDWRTPATH-DEFAULT-LIBUSB"

		elif [ "$WEBIF" == "n" ] && [ "$SMARTREADER" == "y" ] && [ "$ONEINALLCONF" == "n" ]; then
			echo -e "\033[1;37;42mBuild $FOR_PLATFORM-$DDWRTPATH-pcsc-Default\033[0m"
			INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/DEFAULT/PCSC"
			CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-$DDWRTPATH-DEFAULT-PCSC"

		elif [ "$WEBIF" == "n" ] && [ "$LBUSB" == "y" ] && [ "$SMARTREADER" == "n" ] && [ "$ONEINALLCONF" == "y" ]; then
			echo -e "\033[1;37;42mBuild $FOR_PLATFORM-$DDWRTPATH-libusb-OneInAll\033[0m"
			INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/ONEINALL/LIBUSB"
			CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-$DDWRTPATH-ONEINALL-LIBUSB"

		elif [ "$WEBIF" == "n" ] && [ "$SMARTREADER" == "y" ] && [ "$ONEINALLCONF" == "y" ]; then
			echo -e "\033[1;37;42mBuild $FOR_PLATFORM-$DDWRTPATH-pcsc-OneInAll\033[0m"
			INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/ONEINALL/PCSC"
			CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-$DDWRTPATH-ONEINALL-PCSC"

		elif [ "$WEBIF" == "y" ] && [ "$LBUSB" == "n" ] && [ "$ONEINALLCONF" == "n" ]; then
			echo -e "\033[1;37;42mBuild $FOR_PLATFORM-$DDWRTPATH-Webif-Default\033[0m"
			INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/DEFAULT/WEBIF"
			CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-$DDWRTPATH-DEFAULT-WEBIF"

		elif [ "$WEBIF" == "y" ] && [ "$LBUSB" == "n" ] && [ "$ONEINALLCONF" == "y" ]; then
			echo -e "\033[1;37;42mBuild $FOR_PLATFORM-$DDWRTPATH-Webif-OneInAll\033[0m"
			INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/ONEINALL/WEBIF"
			CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-$DDWRTPATH-ONEINALL-WEBIF"

		elif [ "$WEBIF" == "n" ] && [ "$LBUSB" == "n" ] && [ "$ONEINALLCONF" == "y" ]; then
			echo -e "\033[1;37;42mBuild $FOR_PLATFORM-$DDWRTPATH-Default-OneInAll\033[0m"
			INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/ONEINALL"
			CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-$DDWRTPATH-ONEINALL"
		else
			echo -e "\033[1;37;42mBuild $FOR_PLATFORM-$DDWRTPATH-Default\033[0m"
			INSTALLDIR="$MYBUILDDIR/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/DEFAULT"
			CAMNAME="oscam-svn$VERSION-$FOR_PLATFORM-$DDWRTPATH-DEFAULT"
		fi
		make clean >/dev/null 2>&1
		COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME" | cut -d "-" -f2 | cut -d n -f2`
		if [ -z "$COPIED" ]; then
			if [ "$LBUSB" == "y" ]; then
				if [ ! -e "$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/$MYLIBUSBFILE" ]; then
					prepare_libusb
				fi
				if [ "$SMARTREADER" == "y" ]; then
					if [ ! -e "$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/$MYPCSCFILE" ]; then
						prepare_pcsc_special
					fi
				fi
				if [ ! -e "$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/$MYCCIDFILE" ]; then
					prepare_ccid_special
				fi
			fi
			cd "$OSCAMDIR"
			turn_api OFF
			FRITZUCLIBCOLD="$FRITZUCLIBC"
			sed "s/FRITZUCLIBC=.*/FRITZUCLIBC=mipsel/g" -i "$EASYCONF"
			if [ "$LBUSB" == "y" ]; then
				if [ "$SMARTREADER" == "y" ]; then
					sed "s@OS_PTLI=.* \\\@OS_PTLI=\"-lpthread -lpcsclite -lusb-1.0 -lrt -ldl\" \\\\@g" -i "$OSCAMDIR/Makefile"
					sed "s@DS_CFLAGS=.* \\\@DS_CFLAGS=\"-c -I$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/include -I$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/include/PCSC\" \\\\@g" -i "$OSCAMDIR/Makefile"
					sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"-L$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/lib $ISSTATIC -I$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/include/PCSC -I$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
				else
					sed "s@OS_PTLI=.* \\\@OS_PTLI=\"-lpthread -lusb-1.0 -lrt -ldl\" \\\\@g" -i "$OSCAMDIR/Makefile"
					sed "s@DS_CFLAGS=\"-c\" \\\@DS_CFLAGS=\"-c -I$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/include -I$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/include/libusb-1.0\" \\\\@g" -i "$OSCAMDIR/Makefile"
					sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"-L$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/lib $ISSTATIC -I$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/include -I$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/include/libusb-1.0\" \\\\@g" -i "$OSCAMDIR/Makefile"
				fi
				sed "s@linux-uclibc-gcc \\\@linux-uclibc-gcc-$DDWRTPATH \\\\@g" -i "$OSCAMDIR/Makefile"
				check_ssl
				make $MYCROSS
			else
				sed "s@linux-uclibc-gcc \\\@linux-uclibc-gcc-$DDWRTPATH \\\\@g" -i "$OSCAMDIR/Makefile"
				sed "s@OS_PTLI=.* \\\@OS_PTLI=\"-lpthread -lrt -ldl\" \\\\@g" -i "$OSCAMDIR/Makefile"
				sed "s@DS_CFLAGS=.* \\\@DS_CFLAGS=\"-c -I$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
				sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"-L$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/lib $ISSTATIC -I$MYLIBS/$FOR_PLATFORM/$DDWRTPATH-uclibc-0.9.28/opt/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
				check_ssl
				make $MYCROSS
			fi
			do_reset
		else
			allready_exist
		fi
		COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME"`
		OSCAMPATH="${INSTALLDIR##*$HOME}"
		if [ ! -z "$COPIED" ]; then
			success
			sed "s@FRITZCHAIN=.*@FRITZCHAIN=$MYCHAINS/$MYFREETZ/toolchain/build/mipsel_gcc-$FRITZGCCVERSION-0.9.29/mipsel-linux-uclibc/bin@g" -i "$EASYCONF"
			. "$EASYCONF"
			if [ "$BUILDALL" == "1" ] || [ "$BUILDALL" == "2" ] || [ "$BUILDALL" == "3" ] || [ "$BUILDALL" == "4" ] || [ "$BUILDALL" == "5" ] || [ "$BUILDALL" == "6" ] || [ "$BUILDALL" == "7" ] || [ "$BUILDALL" == "8" ] || [ "$BUILDALL" == "9" ] || [ "$BUILDALL" == "10" ] || [ "$BUILDALL" == "11" ] || [ "$BUILDALL" == "12" ] || [ "$BUILDALL" == "13" ] || [ "$BUILDALL" == "14" ]; then
				. "$EASYCONF"
				cd "$OSCAMDIR"
				$0 2 10
				exit
			else
				goback
			fi
		else
			sed "s@FRITZCHAIN=.*@FRITZCHAIN=$MYCHAINS/$MYFREETZ/toolchain/build/mipsel_gcc-$FRITZGCCVERSION-0.9.29/mipsel-linux-uclibc/bin@g" -i "$EASYCONF"
			error
		fi
	### MIPS FONERA ###
	elif [ "$REPLY" == "10" ]; then
		FOR_PLATFORM="FONERA"
		MYHOST_TARGET="mips-linux"
		MYCHAINPATH="$FONERACHAIN"
		MYCROSS="cross-mipsel-fonera2"
		GO_TO="11"
		check_myconf
		. "$EASYCONF"
		# set default config path
		sed "s@CS_CONFDIR = .*@CS_CONFDIR = '\\\\\"$FONERACONFIG\\\\\"'@g" -i "$OSCAMDIR/Makefile"
		make clean >/dev/null 2>&1
		echo ""
		if [ ! -e $MYCHAINS/"OpenWrt-SDK-atheros-2.6-for-Linux-i686" ] && [ "$BUILDALL" == "0" ]; then
			error_chain
		fi
		if [ ! -e $MYCHAINS/"OpenWrt-SDK-atheros-2.6-for-Linux-i686" ] && [ "$BUILDALL" != "0" ]; then
			goto
		fi
		install_openssl
		cd "$OSCAMDIR"
		prepare_build
		make clean >/dev/null 2>&1
		COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME" | cut -d "-" -f2 | cut -d n -f2`
		if [ -z "$COPIED" ]; then
			prepare_ext_spec
			turn_api OFF
			check_ssl
			do_it
			do_reset
		else
			allready_exist
		fi
		check_build_all
	### ARM-DOCKSTAR ###
	elif [ "$REPLY" == "11" ]; then
		FOR_PLATFORM="DOCKSTAR"
		MYHOST_TARGET="arm-openwrt-linux"
		MYCHAINPATH="$DOCKSTARCHAIN"
		MYCROSS="cross-openwrt-linux"
		GO_TO="12"
		check_myconf
		. "$EASYCONF"
		# set default config path
		sed "s@CS_CONFDIR = .*@CS_CONFDIR = '\\\\\"$DOCKSTARCONFIG\\\\\"'@g" -i "$OSCAMDIR/Makefile"
		make clean >/dev/null 2>&1
		if [ ! -e "$MYCHAINS/DockStar/backfire" ] && [ "$BUILDALL" == "0" ]; then
			chain_error
		fi
		if [ ! -e "$MYCHAINS/DockStar/backfire" ] && [ "$BUILDALL" != "0" ]; then
			goto
		fi
		make clean >/dev/null 2>&1
		if [ ! -e "$MYCHAINS/DockStar/backfire" ]; then
			note_chain
		fi
		cd "$OSCAMDIR"
		if [ -e "$MYCHAINS/DockStar/backfire" ] && [ "$DOCKSTARTOOLCHAINBUILD" == "n" ] && [ ! -e "$MYCHAINS/DockStar/backfire/staging_dir/toolchain-arm_v5te_gcc-4.3.3+cs_uClibc-0.9.30.1_eabi/usr/bin/arm-openwrt-linux-uclibcgnueabi-gcc-4.3.3" ]; then
			echo ""
			cd "$MYCHAINS/DockStar/backfire"
			echo -e "\033[1;37;42mUPDATING DOCKSTAR-FEEDS...\033[0m"
			spinner
			./scripts/feeds update >/dev/null 2>&1 &
			spinner $!
			./scripts/feeds install libpcsclite
			make defconfig
			### dockstar.config ###
			wget -q -c http://tinyurl.com/2vq7r3m
			if [ -e "$MYCHAINS/DockStar/backfire/.config" ]; then
				rm "$MYCHAINS/DockStar/backfire/.config"
			fi
			if [ -e "$MYCHAINS/DockStar/backfire/2vq7r3m" ]; then
				mv "$MYCHAINS/DockStar/backfire/2vq7r3m" "$MYCHAINS/DockStar/backfire/config.dockstar"
			fi
			mv ./config.dockstar ./.config
			if [ -e "$MYCHAINS/DockStar/backfire/dl" ] ; then
				rm -rf "$MYCHAINS/DockStar/backfire/dl"
			fi
			ln -sf "$MYDLDIR" "$MYCHAINS/DockStar/backfire/dl"
			make
			if [ ! -e "$MYCHAINS/DockStar/backfire/staging_dir/toolchain-arm_v5te_gcc-4.3.3+cs_uClibc-0.9.30.1_eabi/usr/bin/arm-openwrt-linux-uclibcgnueabi-gcc-4.3.3" ]; then
				error
			else
				echo -e "\033[1;37;42mTOOLCHAIN SUCCESSFULL BUILD\033[0m"
				sed "s/DOCKSTARTOOLCHAINBUILD=.*/DOCKSTARTOOLCHAINBUILD=y/g" -i "$EASYCONF"
			fi
		else
			echo -e "\033[1;37;42mFOUND ARM-DOCKSTAR-TOOLCHAIN\033[0m"
		fi
		if [ ! -e "$MYCHAINS/DockStar/backfire/staging_dir/target-arm_v5te_uClibc-0.9.30.1_eabi/usr/lib/libpcsclite.a" ]; then
			sed "s@DOCKSTARTOOLCHAINBUILD=.*@DOCKSTARTOOLCHAINBUILD=n@g" -i "$EASYCONF"
			sed "s@BUILDALL=.*@BUILDALL=0@g" -i "$EASYCONF"
			error_chain
		fi
		install_openssl
		cd "$OSCAMDIR"
		prepare_build
		make clean >/dev/null 2>&1
		COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME" | cut -d "-" -f2 | cut -d n -f2`
		if [ -z "$COPIED" ]; then
			prepare_ext
			turn_api OFF
			check_ssl
			do_it
			do_reset
		else
			allready_exist
		fi
		check_build_all
	### TP-LINK ###
	elif [ "$REPLY" == "12" ]; then
		FOR_PLATFORM="TPLINK"
		MYHOST_TARGET="mips-openwrt-linux-uclibc"
		MYCHAINPATH="$TPLINKCHAIN"
		MYCROSS="cross-mips-router-linux-uclibc930"
		GO_TO="13"
		check_myconf
		. "$EASYCONF"
		sed "s@CS_CONFDIR = .*@CS_CONFDIR = '\\\\\"$TPLINKCONFIG\\\\\"'@g" -i "$OSCAMDIR/Makefile"
		make clean >/dev/null 2>&1
		if [ ! -e "$MYCHAINS"/"OpenWrt-SDK-ar71xx" ] && [ "$BUILDALL" == "0" ]; then
			chain_error
		fi
		if [ ! -e "$MYCHAINS"/"OpenWrt-SDK-ar71xx" ] && [ "$BUILDALL" != "0" ]; then
			goto
		fi
		install_openssl
		cd "$OSCAMDIR"
		prepare_build
		make clean >/dev/null 2>&1
		COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME" | cut -d "-" -f2 | cut -d n -f2`
		if [ -z "$COPIED" ]; then
			prepare_ext
			turn_api OFF
			check_ssl
			do_it
			do_reset
		else
			allready_exist
		fi
		check_build_all
	### ASUS-WL ###
	elif [ "$REPLY" == "13" ]; then
		FOR_PLATFORM="ASUSWL"
		MYHOST_TARGET="mipsel-linux-uclibc"
		MYCHAINPATH="$ASUSWLCHAIN"
		MYCROSS="cross-mipsel-asuswl-linux"
		GO_TO="14"
		check_myconf
		. "$EASYCONF"
		sed "s@CS_CONFDIR = .*@CS_CONFDIR = '\\\\\"$ASUSWLCONFIG\\\\\"'@g" -i "$OSCAMDIR/Makefile"
		make clean >/dev/null 2>&1
		if [ ! -e "$MYCHAINS/ASUSWL/MYASUS/bin" ] && [ "$BUILDALL" == "0" ]; then
			chain_error
		fi
		if [ ! -e "$MYCHAINS/ASUSWL/MYASUS/bin" ] && [ "$BUILDALL" != "0" ]; then
			goto
		fi
		if [ -z "`cat ./oscam-config.h | grep "//#define ASUSWL_K26"`" ]; then
			ln -sf "$MYCHAINS"/ASUSWL/"hndtools-mipsel-uclibc-4.3.5-K26" "$MYCHAINS/ASUSWL/MYASUS"
		else
			ln -sf "$MYCHAINS"/ASUSWL/"gcc-4.1.1-uclibc-0.9.28" "$MYCHAINS/ASUSWL/MYASUS"
		fi
		install_openssl
		cd "$OSCAMDIR"
		prepare_build
		make clean >/dev/null 2>&1
		COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME" | cut -d "-" -f2 | cut -d n -f2`
		if [ -z "$COPIED" ]; then
			prepare_ext_spec
			turn_api OFF
			check_ssl
			do_it
			do_reset
		else
			allready_exist
		fi
		check_build_all
	### PPC DBOX2/DREAMBOX OLD ###
	elif [ "$REPLY" == "14" ]; then
		FOR_PLATFORM="PPC_DB2_DREAM_OLD"
		MYHOST_TARGET="powerpc-tuxbox-linux-gnu"
#		sed "s@PPCDMCHAIN=.*@PPCDMCHAIN=$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2/bin@g" -i "$EASYCONF"
		MYCHAINPATH="$PPCDMOLDCHAIN"
		MYCROSS="cross-powerpc-tuxbox-linux-dbox2"
		GO_TO="15"
		check_myconf
		. "$EASYCONF"
		# set default config path
		sed "s@CS_CONFDIR = .*@CS_CONFDIR = '\\\\\"$PPC_DB2_DREAM_OLDCONFIG\\\\\"'@g" -i "$OSCAMDIR/Makefile"
		make clean >/dev/null 2>&1
		cd "$OSCAMDIR"
		echo ""
		if [ -e "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2" ] && [ "$PPCDB2DREAMBOXOLDTOOLCHAINBUILD" == "n" ] && [ ! -e "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2/dbox2/cdk/bin/powerpc-tuxbox-linux-gnu-gcc" ]; then
			cd "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2/cdk"
			MYCHAINDIR="$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2" 
			LOGODIR=$MYCHAINDIR/Logos 
			CP=$MYCHAINDIR/tuxbox-cvs 
			DB=$MYCHAINDIR/dbox2 
			export CVS_RSH=ssh 
			./autogen.sh 
			./configure --prefix="$DB" --with-cvsdir="$CP" --with-hostappsdir="$MYCHAINDIR/hostapps" --enable-flashrules --enable-ccache --with-checkImage=rename --with-logosdir="$LOGODIR" 
			make bootstrap
			sed "s/PPCDB2DREAMBOXOLDTOOLCHAINBUILD=.*/PPCDB2DREAMBOXOLDTOOLCHAINBUILD=y/g" -i "$EASYCONF"
		fi
		if [ -e "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2" ] && [ ! -e "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2/dbox2/cdk/bin/powerpc-tuxbox-linux-gnu-gcc" ]; then
			sed "s/PPCDB2DREAMBOXOLDTOOLCHAINBUILD=.*/PPCDB2DREAMBOXOLDTOOLCHAINBUILD=n/g" -i "$EASYCONF"
			error_chain
		fi
		if [ ! -e $MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2 ] && [ "$BUILDALL" != "0" ]; then
			goto
		fi
		OPENSSLVERDBOX2OLD="0.9.7"
		OPENSSLVERDEFAULT="$OPENSSLVER"
		OPENSSLVER="$OPENSSLVERDBOX2OLD"
		install_openssl
		OPENSSLVER="$OPENSSLVERDEFAULT"
		cd "$OSCAMDIR"
		prepare_build
		make clean >/dev/null 2>&1
		COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME" | cut -d "-" -f2 | cut -d n -f2`
		if [ -z "$COPIED" ]; then
			prepare_ext
			turn_api ON
			check_ssl
			do_it
			turn_api OFF
			do_reset
		else
			allready_exist
		fi
#		sed "s@PPCDMCHAIN=.*@PPCDMCHAIN=$MYCHAINS/powerpc-tuxbox-linux-gnu/bin@g" -i "$EASYCONF"
		check_build_all
	### I386 PC ###
	elif [ "$REPLY" == "15" ]; then
		check_myconf
		. "$EASYCONF"
		# set default config path
		sed "s@CS_CONFDIR = .*@CS_CONFDIR = '\\\\\"$PCCONFIG\\\\\"'@g" -i "$OSCAMDIR/Makefile"
		PLATFORM=`uname -m`
		make clean >/dev/null 2>&1
		echo ""
		if [ `which arch > /dev/null 2>&1 && arch || uname -m` == x86_64 ]; then
			LIBCRYPTOPATH="/usr/lib64"
		else
			LIBCRYPTOPATH="/usr/lib"
		fi
		if [ ! -e "$LIBCRYPTOPATH/libcrypto.a" ] && [ "$BUILDALL" == "0" ]; then
			echo -e "\033[1;37;43mDO FIRST install libssl-dev/openssl-static\033[0m"
			echo -e "\033[1;37;43mGO BACK TO MAIN-MENU NOW...\033[0m"
			sleep 2
			$0
			exit
		fi
		if [ ! -e "$LIBCRYPTOPATH/libcrypto.a" ] && [ "$BUILDALL" != "0" ] || [ "$SHOWPCBUILD" == "OFF" ]; then
			. "$EASYCONF"
	############### DEFAULT BUILD #####################################################################
	######################## 0 run : 	oia=n	webif=	lbusb=	ddwrt346=n	###################
			if [ "$BUILDALL" == "1" ]; then
				sed "s@.*#define WEBIF@#define WEBIF@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=2@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "2" ]; then
				sed "s@.*#define HAVE_LIBUSB@#define HAVE_LIBUSB@g" -i "$OSCAMDIR/oscam-config.h"
				sed "s@SMARTREADERON=.*@SMARTREADERON=-DLIBUSB@g" -i "$EASYCONF"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=3@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "3" ]; then
				sed "s@.*#define WITH_PCSC@#define WITH_PCSC@g" -i "$OSCAMDIR/oscam-config.h"
				sed "s@PCSCON=.*@PCSCON=-DHAVE_PCSC@g" -i "$EASYCONF"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=4@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "4" ]; then
				sed "s@.*#define WEBIF@\/\/#define WEBIF@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=5@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "5" ]; then
				sed "s@.*#define WITH_PCSC@\/\/#define WITH_PCSC@g" -i "$OSCAMDIR/oscam-config.h"
				sed "s@PCSCON=.*@PCSCON=@g" -i "$EASYCONF"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=6@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "6" ]; then
				sed "s@.*#define HAVE_LIBUSB@\/\/#define HAVE_LIBUSB@g" -i "$OSCAMDIR/oscam-config.h"
				sed "s@SMARTREADERON=.*@SMARTREADERON=@g" -i "$EASYCONF"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=7@g" -i "$EASYCONF"
				$0 2 1
				exit
	############### ONINALL BUILD ############################################################################
			elif [ "$BUILDALL" == "7" ]; then
				sed "s@.*#define OIA@#define OIA@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=8@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "8" ]; then
				sed "s@.*#define WEBIF@#define WEBIF@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=9@g" -i "$EASYCONF"
				$0 2 1
				exit

			elif [ "$BUILDALL" == "9" ]; then
				sed "s@.*#define HAVE_LIBUSB@#define HAVE_LIBUSB@g" -i "$OSCAMDIR/oscam-config.h"
				sed "s@SMARTREADERON=.*@SMARTREADERON=-DLIBUSB@g" -i "$EASYCONF"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=10@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "10" ]; then
				sed "s@.*#define WITH_PCSC@#define WITH_PCSC@g" -i "$OSCAMDIR/oscam-config.h"
				sed "s@PCSCON=.*@PCSCON=-DHAVE_PCSC@g" -i "$EASYCONF"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=11@g" -i "$EASYCONF"
				$0 2 1
				exit

			elif [ "$BUILDALL" == "11" ]; then
				sed "s@.*#define WEBIF@\/\/#define WEBIF@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=12@g" -i "$EASYCONF"
				$0 2 1
				exit

			elif [ "$BUILDALL" == "12" ]; then
				sed "s@.*#define WITH_PCSC@\/\/#define WITH_PCSC@g" -i "$OSCAMDIR/oscam-config.h"
				sed "s@PCSCON=.*@PCSCON=@g" -i "$EASYCONF"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=13@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "13" ]; then
				sed "s@.*#define HAVE_LIBUSB@\/\/#define HAVE_LIBUSB@g" -i "$OSCAMDIR/oscam-config.h"
				sed "s@SMARTREADERON=.*@SMARTREADERON=@g" -i "$EASYCONF"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=14@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "14" ]; then
				sed "s@BUILDALL=.*@BUILDALL=0@g" -i "$EASYCONF"
				sed "s@.*#define WEBIF@\/\/#define WEBIF@g" -i "$OSCAMDIR/oscam-config.h"
				sed "s@.*#define OIA@\/\/#define OIA@g" -i "$OSCAMDIR/oscam-config.h"
				sed "s@.*#define HAVE_LIBUSB@\/\/#define HAVE_LIBUSB@g" -i "$OSCAMDIR/oscam-config.h"
				sed "s@.*#define WITH_PCSC@\/\/#define WITH_PCSC@g" -i "$OSCAMDIR/oscam-config.h"
				sed "s@SMARTREADERON=.*@SMARTREADERON=@g" -i "$EASYCONF"
				sed "s@PCSCON=.*@PCSCON=@g" -i "$EASYCONF"
				echo -e "\033[1;37;42mALL OSCAM(S) BUILD, GO BACK TO MAIN-MENU
	PLEASE CHECK MAIN-MENU: EASY-CONFIG
	EASY-STANDARD-CFG ACTIVATED!\033[0m"
				sleep 2
				cd "$OSCAMDIR"
				$0
				exit
			else
				goback
			fi
		fi
		FOR_PLATFORM="$PLATFORM-PC"
		prepare_build
		COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME" | cut -d "-" -f2 | cut -d n -f2`
		if [ -z "$COPIED" ]; then
			turn_api OFF
			if [ "$LBUSB" == "y" ] && [ "$SMARTREADER" == "n" ]; then
				if [ `which arch > /dev/null 2>&1 && arch || uname -m` == x86_64 ]; then
					LIBCRYPTOPATH="/usr/lib64"
				else
					LIBCRYPTOPATH="/usr/lib"
				fi
				if [ ! -e "$LIBCRYPTOPATH/libusb-1.0.a" ] && [ "$BUILDALL" == "0" ]; then
					echo -e "\033[1;37;43mDO FIRST install libusb-1.0\033[0m"
					echo -e "\033[1;37;43mGO BACK TO MAIN-MENU NOW...\033[0m"
					sleep 2
					$0
					exit
				fi
				sed "s@OS_PTLI=.* \\\@OS_PTLI=\"-lpthread -lusb-1.0 -lrt -ldl\" \\\\@g" -i "$OSCAMDIR/Makefile"
				sed "s@DS_CFLAGS=.* \\\@DS_CFLAGS=\"-c -I/usr/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
				sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"-L/usr/lib -I/usr/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
				cd "$OSCAMDIR"
				make clean >/dev/null 2>&1
				make i386-pc-linux-libusb
				cd "$OSCAMDIR"
			elif [ "$SMARTREADER" == "y" ]; then
				if [ ! -e /usr/local/$MYPCSCFILE ]; then
					prepare_pcsc
					cd "$OSCAMDIR/pcsc-lite-$PCSCVERSION"
					if [ "$PCSCVERSION" == "1.7.0" ] || [ "$PCSCVERSION" == "1.7.2" ]; then
						./configure --disable-libudev LIBUSB_CFLAGS=-I/usr/include/libusb-1.0 LIBUSB_LIBS=/usr/lib/libusb-1.0.so >/dev/null 2>&1
					else
						./configure --disable-libhal LIBUSB_CFLAGS=-I/usr/include LIBUSB_LIBS=/usr/lib/libusb-1.0.so >/dev/null 2>&1
					fi
					make
					$USERS make install
					make clean >/dev/null 2>&1
				fi
				cd "$OSCAMDIR"
				sed "s@OS_PTLI=.* \\\@OS_PTLI=\"-lpthread -lpcsclite -lusb-1.0 -lrt -ldl\" \\\\@g" -i "$OSCAMDIR/Makefile"
				sed "s@DS_CFLAGS=.* \\\@DS_CFLAGS=\"-c -I/usr/include -I/usr/local/include -I/usr/include/PCSC\" \\\\@g" -i "$OSCAMDIR/Makefile"
				sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"-L$LIBCRYPTOPATH -L/usr/local/lib -I/usr/include/PCSC -I/usr/local/include -I/usr/include\" \\\\@g" -i "$OSCAMDIR/Makefile"
				make i386-pc-linux-pcsc-libusb
			else
				sed "s@OS_PTLI=.* \\\@OS_PTLI=\"-lpthread\" \\\\@g" -i "$OSCAMDIR/Makefile"
				sed "s@DS_CFLAGS=.* \\\@DS_CFLAGS=\"-c\" \\\\@g" -i "$OSCAMDIR/Makefile"
				sed "s@DS_LDFLAGS=.* \\\@DS_LDFLAGS=\"\" \\\\@g" -i "$OSCAMDIR/Makefile"
				make i386-pc-linux
			fi
			do_reset
		else
			allready_exist
		fi
		COPIED=`ls "$INSTALLDIR" | grep "$CAMNAME"`
		OSCAMPATH="${INSTALLDIR##*$HOME}"
		if [ ! -z "$COPIED" ]; then
			success
			. "$EASYCONF"
	############### DEFAULT BUILD #####################################################################
	######################## 0 run : 	oia=n	webif=	lbusb=	ddwrt346=n	###################
			if [ "$BUILDALL" == "1" ]; then
				sed "s@.*#define WEBIF@#define WEBIF@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=2@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "2" ]; then
				sed "s@.*#define HAVE_LIBUSB@#define HAVE_LIBUSB@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=3@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "3" ]; then
				sed "s@.*#define WITH_PCSC@#define WITH_PCSC@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=4@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "4" ]; then
				sed "s@.*#define WEBIF@\/\/#define WEBIF@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=5@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "5" ]; then
				sed "s@.*#define WITH_PCSC@\/\/#define WITH_PCSC@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=6@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "6" ]; then
				sed "s@.*#define HAVE_LIBUSB@\/\/#define HAVE_LIBUSB@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=7@g" -i "$EASYCONF"
				$0 2 1
				exit
	############### ONINALL BUILD ############################################################################
			elif [ "$BUILDALL" == "7" ]; then
				sed "s@.*#define OIA@#define OIA@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=8@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "8" ]; then
				sed "s@.*#define WEBIF@#define WEBIF@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=9@g" -i "$EASYCONF"
				$0 2 1
				exit

			elif [ "$BUILDALL" == "9" ]; then
				sed "s@.*#define HAVE_LIBUSB@#define HAVE_LIBUSB@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=10@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "10" ]; then
				sed "s@.*#define WITH_PCSC@#define WITH_PCSC@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=11@g" -i "$EASYCONF"
				$0 2 1
				exit

			elif [ "$BUILDALL" == "11" ]; then
				sed "s@.*#define WEBIF@\/\/#define WEBIF@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=12@g" -i "$EASYCONF"
				$0 2 1
				exit

			elif [ "$BUILDALL" == "12" ]; then
				sed "s@.*#define WITH_PCSC@\/\/#define WITH_PCSC@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=13@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "13" ]; then
				sed "s@.*#define HAVE_LIBUSB@\/\/#define HAVE_LIBUSB@g" -i "$OSCAMDIR/oscam-config.h"
				make clean >/dev/null 2>&1
				sed "s@BUILDALL=.*@BUILDALL=14@g" -i "$EASYCONF"
				$0 2 1
				exit
			elif [ "$BUILDALL" == "14" ]; then
				sed "s@BUILDALL=.*@BUILDALL=0@g" -i "$EASYCONF"
				sed "s@.*#define WEBIF@\/\/#define WEBIF@g" -i "$OSCAMDIR/oscam-config.h"
				sed "s@.*#define OIA@\/\/#define OIA@g" -i "$OSCAMDIR/oscam-config.h"
				sed "s@.*#define HAVE_LIBUSB@\/\/#define HAVE_LIBUSB@g" -i "$OSCAMDIR/oscam-config.h"
				sed "s@.*#define WITH_PCSC@\/\/#define WITH_PCSC@g" -i "$OSCAMDIR/oscam-config.h"
				echo -e "\033[1;37;42mALL OSCAM(S) BUILD, GO BACK TO MAIN-MENU
	PLEASE CHECK MAIN-MENU: EASY-CONFIG
	EASY-STANDARD-CFG ACTIVATED!\033[0m"
				sleep 2
				cd "$OSCAMDIR"
				$0
				exit
			else
				goback
			fi
		else
			error
		fi
	else
		$0
		exit
	fi
### BUILD ALL OSCAM ###
elif [ "$REPLY" == "3" ]; then
. "$EASYCONF"
	read -p "Start build ALL OSCams now (y/N) ? "
	if [ "$REPLY" == "y" ] || [ "$REPLY" == "Y" ]; then
		clear
		echo -e "\033[1;37;42mBUILD NOW ALL OSCAM'S...\033[0m"
		check_ssl
		sed "s@BUILDALL=.*@BUILDALL=1@g" -i "$EASYCONF"
		sed "s@.*#define WEBIF@\/\/#define WEBIF@g" -i "$OSCAMDIR/oscam-config.h"
		sed "s@.*#define OIA@\/\/#define OIA@g" -i "$OSCAMDIR/oscam-config.h"
		sed "s@.*#define HAVE_LIBUSB@\/\/#define HAVE_LIBUSB@g" -i "$OSCAMDIR/oscam-config.h"
		sed "s@.*#define CS_WITH_DOUBLECHECK@\/\/#define CS_WITH_DOUBLECHECK@g" -i "$OSCAMDIR/oscam-config.h"
		sed "s@.*#define BUILD_STATIC@\/\/#define BUILD_STATIC@g" -i "$OSCAMDIR/oscam-config.h"
		sed "s@.*#define WITH_PCSC@\/\/#define WITH_PCSC@g" -i "$OSCAMDIR/oscam-config.h"
		sed "s@.*#define DDWRT346@\/\/#define DDWRT346@g" -i "$OSCAMDIR/oscam-config.h"
		sed "s@.*#define MODULE_GBOX@\/\/#define MODULE_GBOX@g" -i "$OSCAMDIR/oscam-config.h"
		if [ -z "`cat "$OSCAMDIR/oscam-config.h" | grep "//#define FB7390"`" ]; then
			MYFREETZ="freetz-trunk7390"
			sed "s@FRITZCHAIN=.*@FRITZCHAIN=$MYCHAINS/$MYFREETZ/toolchain/build/mipsel_gcc-$FRITZGCCVERSION-0.9.29/mips-linux-uclibc/bin@g" -i "$EASYCONF"
		else
			MYFREETZ="freetz-trunk"
			sed "s@FRITZCHAIN=.*@FRITZCHAIN=$MYCHAINS/$MYFREETZ/toolchain/build/mipsel_gcc-$FRITZGCCVERSION-0.9.29/mipsel-linux-uclibc/bin@g" -i "$EASYCONF"
		fi
		$0 2 1
		exit
	else
		$0
		exit
	fi
### GET TOOLCHAINS
elif [ "$REPLY" == "4" ]; then
. "$EASYCONF"
	make clean >/dev/null 2>&1
	if [ ! -e "$OSCAMDIR/openssl-$OPENSSLVER/compiled" ]; then
		prepare_openssl
	fi
# Fritzbox #
	if [ -z "`cat "$OSCAMDIR/oscam-config.h" | grep "//#define FB7390"`" ]; then
		MYFREETZ="freetz-trunk7390"
	else
		MYFREETZ="freetz-trunk"
	fi
	if [ -e "$MYCHAINS/$MYFREETZ" ] && [ ! -e "$MYCHAINS/$MYFREETZ/toolchain/.target" ]; then
		INSTALLED1="INSTALLED"
	elif [ -e "$MYCHAINS/$MYFREETZ/toolchain/.target" ]; then
		INSTALLED1="BUILD"
	else
		INSTALLED1=""
	fi
# Dreambox #
	if [ -e "$MYCHAINS/mipsel-unknown-linux-gnu" ]; then
		INSTALLED2="BUILD"
	else
		INSTALLED2=""
	fi
# sh4 #
	if [ -e "$MYCHAINS/devkit_sh4/tdt/tdt/cvs/cdk/make.sh" ] && [ "$SH4TOOLCHAINBUILD" == "n" ]; then
		INSTALLED3="INSTALLED"
	elif [ -e "$MYCHAINS/devkit_sh4/tdt/tdt/cvs/cdk/make.sh" ] && [ -e "$MYCHAINS/devkit_sh4/tdt/tdt/cvs/cdk/.deps/libstdc++" ] && [ "$SH4TOOLCHAINBUILD" == "y" ]; then
		INSTALLED3="BUILD"
	else
		INSTALLED3=""
	fi
# coolstream #
	if [ -e "$MYCHAINS/COOLSTREAM-git" ] && [ "$COOLSTREAMTOOLCHAINBUILD" == "n" ]; then
		INSTALLED4="INSTALLED"
	elif [ -e "$MYCHAINS/COOLSTREAM-git" ] && [ -e "$MYCHAINS/COOLSTREAM-git/cross/bin/arm-nevis-strip" ] && [ "$COOLSTREAMTOOLCHAINBUILD" == "y" ]; then
		INSTALLED4="BUILD"
	else
		INSTALLED4=""
	fi
# azbox #
	if [ -e "$MYCHAINS/AZBOX-git" ] && [ "$AZBOXTOOLCHAINBUILD" == "n" ]; then
		INSTALLED5="INSTALLED"
	elif [ -e "$MYCHAINS/AZBOX-git" ] && [ "$AZBOXTOOLCHAINBUILD" == "y" ]; then
		INSTALLED5="BUILD"
	else
		INSTALLED5=""
	fi
# DDWRT #
	if [ -e "$MYDLDIR/Toolchain_MIPS-Router-uclib-0.9.28" ] && [ -e "$MYCHAINS/DDWRT" ]; then
		INSTALLED6="BUILD"
	else
		INSTALLED6=""
	fi
# NSLU2 unslung #
	if [ -e "$MYCHAINS/armv5b-softfloat-linux" ]; then
		INSTALLED7="BUILD"
	else
		INSTALLED7=""
	fi
# PPC DREAMBOX #
	if [ -e "$MYCHAINS/powerpc-tuxbox-linux-gnu" ]; then
		INSTALLED8="BUILD"
	else
		INSTALLED8=""
	fi
# MIPS FONERA #
	if [ -e $MYCHAINS/"OpenWrt-SDK-atheros-2.6-for-Linux-i686" ]; then
		INSTALLED9="BUILD"
	else
		INSTALLED9=""
	fi
# dockstar #
	if [ -e "$MYCHAINS/DockStar/backfire" ] && [ "$DOCKSTARTOOLCHAINBUILD" == "n" ]; then
		INSTALLED10="INSTALLED"
	elif [ -e "$MYCHAINS/DockStar/backfire" ] && [ "$DOCKSTARTOOLCHAINBUILD" == "y" ]; then
		INSTALLED10="BUILD"
	else
		INSTALLED10=""
	fi
# tplink #
	if [ -e "$MYCHAINS"/"OpenWrt-SDK-ar71xx/staging_dir" ]; then
		INSTALLED11="BUILD"
	else
		INSTALLED11=""
	fi
# asus-wl #
	if [ -e "$MYCHAINS/ASUSWL/MYASUS/bin" ]; then
		INSTALLED12="BUILD"
	else
		INSTALLED12=""
	fi
# PPC DBOX2/DREAMBOX OLD #
	if [ -e "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2/cdk" ] && [ "$PPCDB2DREAMBOXOLDTOOLCHAINBUILD" == "n" ]; then
		INSTALLED13="INSTALLED"
	elif [ -e "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2/cdk" ] && [ -e "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2/dbox2/cdk/bin/powerpc-tuxbox-linux-gnu-gcc" ] && [ "$PPCDB2DREAMBOXOLDTOOLCHAINBUILD" == "y" ]; then
		INSTALLED13="BUILD"
	else
		INSTALLED13=""
	fi
	clear
	echo "#####################################"
	echo -e "     \033[1;37;44mOSCam-Easy-Script $EASYVERSION\033[0m"
	echo -e "         \033[1;37;44mGet Toolchain(s)\033[0m"
	echo "#####################################"
	if [ "$SHOWFRITZBUILD" == "ON" ]; then
		echo -e "\033[1;37;44m 1) Fritzbox-Toolchain ?         ($INSTALLED1)\033[0m"
	fi
	if [ "$SHOWDREAMBUILD" == "ON" ]; then
		echo -e "\033[1;37;44m 2) MIPSEL-Dreambox-Toolchain ?  ($INSTALLED2)\033[0m"
	fi
	if [ "$SHOWDVBAPIBUILD" == "ON" ] || [ "$SHOWSTAPIBUILD" == "y" ]; then
		echo -e "\033[1;37;44m 3) Duckbox-SH4-Toolchain ?      ($INSTALLED3)\033[0m"
	fi
	if [ "$SHOWCOOLIEBUILD" == "ON" ]; then
		echo -e "\033[1;37;44m 4) Coolstream-Toolchain ?       ($INSTALLED4)\033[0m"
	fi
	if [ "$SHOWAZBUILD" == "ON" ]; then
		echo -e "\033[1;37;44m 5) Azbox-Toolchain ?            ($INSTALLED5)\033[0m"
	fi
	if [ "$SHOWDDWRTBUILD" == "ON" ]; then
		echo -e "\033[1;37;44m 6) DDWRT-Toolchain ?            ($INSTALLED6)\033[0m"
	fi
	if [ "$SHOWNSLU2UNSLUNGBUILD" == "ON" ]; then
		echo -e "\033[1;37;44m 7) NSLU2UNSLUNG-Toolchain ?     ($INSTALLED7)\033[0m"
	fi
	if [ "$SHOWPPCDREAMBUILD" == "ON" ]; then
		echo -e "\033[1;37;44m 8) PPC DREAM-Toolchain ?        ($INSTALLED8)\033[0m"
	fi
	if [ "$SHOWFONERABUILD" == "ON" ]; then
		echo -e "\033[1;37;44m 9) MIPS-FONERA-Toolchain ?      ($INSTALLED9)\033[0m"
	fi
	if [ "$SHOWDOCKSTARBUILD" == "ON" ]; then
		echo -e "\033[1;37;44m10) ARM-DOCKSTAR-Toolchain ?     ($INSTALLED10)\033[0m"
	fi
	if [ "$SHOWTPLINKBUILD" == "ON" ]; then
		echo -e "\033[1;37;44m11) MIPS-TP-LINK-Toolchain ?     ($INSTALLED11)\033[0m"
	fi
	if [ "$SHOWASUSWLBUILD" == "ON" ]; then
		echo -e "\033[1;37;44m12) MIPSEL-ASUS-WL-Toolchain ?   ($INSTALLED12)\033[0m"
	fi
	if [ "$SHOWPPCDB2DREAMOLDBUILD" == "ON" ]; then
		echo -e "\033[1;37;44m13) PPC DB2/DREAM-OLD-Toolchain ?($INSTALLED13)\033[0m"
	fi
	echo -e "\033[1;37;46m *) Back to MAIN-MENU ?\033[0m"
	echo ""

	read -p "Select target (1-13)? "

	if [ "$REPLY" == "1" ]; then
		if [ -z "`cat "$OSCAMDIR/oscam-config.h" | grep "//#define FB7390"`" ]; then
			MYFREETZ="freetz-trunk7390"
			FB7390="y"
		else
			MYFREETZ="freetz-trunk"
		fi
		if [ ! -e "$MYCHAINS/$MYFREETZ" ]; then
			if [ "$FB7390" == "y" ]; then
				echo -e "\033[1;37;42mGet FRITZBOX7390(FREETZ)-TOOLCHAIN\033[0m"
			else
				echo -e "\033[1;37;42mGet FRITZBOX(FREETZ)-TOOLCHAIN\033[0m"
			fi
			cd $MYCHAINS
			svn co http://svn.freetz.org/trunk "$MYFREETZ"
			if [ -e "$MYCHAINS/$MYFREETZ" ]; then
				echo -e "\033[1;37;42mFRITZBOX(FREETZ)-TOOLCHAIN SUCCESSFULL CHECKED\033[0m"
				if [ ! -e "$MYCHAINS/$MYFREETZ/toolchain/.target" ]; then
					sed "s@FRITZBOXTOOLCHAINBUILD=.*@FRITZBOXTOOLCHAINBUILD=n@g" -i "$EASYCONF"
				fi
				sleep 2
			else
				echo -e "\033[1;37;41mE   R   R   O   R\033[0m"
				echo -e "\033[1;37;41mPlease try again later!\033[0m"
				sleep 2
				$0
			fi
		fi
		cd "$OSCAMDIR"
		make clean >/dev/null 2>&1
		$0 4
		exit


	elif [ "$REPLY" == "2" ]; then
		if [ ! -e "$MYCHAINS/mipsel-unknown-linux-gnu" ] || [ ! -e "$MYDLDIR/Toolchain_mipsel-tuxbox-linux.Dreambox.tar.bz2" ]; then
			cd "$MYDLDIR"
			echo -e "\033[1;37;42mDOWNLOAD/EXTRACT DREAMBOX-TOOLCHAIN\033[0m"
			echo -e "\033[1;37;42m....... 65 MB ...........\033[0m"
			if [ ! -z "$STREAMSVNONLINE" ]; then
				spinner
				wget -q -c http://www.streamboard.gmc.to/wbb2/tut-pics/toolchains/Toolchain_mipsel-tuxbox-linux.Dreambox.tar.bz2 &
				spinner $! 
			else
				spinner
				wget -q -c http://tinyurl.com/5sb5vgq &
				spinner $! 
				mv $MYDLDIR/5sb5vgq $MYDLDIR/Toolchain_mipsel-tuxbox-linux.Dreambox.tar.bz2
			fi
			if [ ! -e "$MYCHAINS/mipsel-unknown-linux-gnu" ]; then
				if [ ! -z "$ISONLINE" ]; then
					spinner
					tar -xjf $MYDLDIR/Toolchain_mipsel-tuxbox-linux.Dreambox.tar.bz2 -C "$MYCHAINS/" >/dev/null 2>&1 &
					spinner $! 
				else
					spinner
					tar -xjf $MYDLDIR/Toolchain_mipsel-tuxbox-linux.Dreambox.tar.bz2 -C "$MYCHAINS/" >/dev/null 2>&1 &
					spinner $! 
				fi
				chmod 777 -R $MYCHAINS/mipsel-unknown-linux-gnu/lib/gcc/mipsel-unknown-linux-gnu/4.3.2/
			fi
			chmod 755 -R $MYCHAINS/mipsel-unknown-linux-gnu
			echo -e "\033[1;37;42mDOWNLOAD/EXTRACT DREAMBOX-TOOLCHAIN FINISHED\033[0m"
			sleep 2
		else
			echo -e "\033[1;37;42mFOUND DREAMBOX-TOOLCHAIN\033[0m"
		fi
		cd "$OSCAMDIR"
		make clean >/dev/null 2>&1
		$0 4
		exit


	elif [ "$REPLY" == "3" ]; then
		if [ ! -e "$MYCHAINS/devkit_sh4" ]; then
			if [ ! -e "$OSCAMDIR/stapi/liboscam_stapi.$LIBOSCAM_STAPIVER.a" ]; then
				if [ -e "$MYDLDIR/$LIBSTAPIFILE" ]; then
					rm "$MYDLDIR/$LIBSTAPIFILE"
				fi
				cd "$MYDLDIR"
				if [ ! -e "$MYDLDIR/$LIBSTAPIFILE" ]; then
					echo -e "\033[1;37;42mDOWNLOAD LIBSTAPI\033[0m"
					spinner
					wget -q -c http://tinyurl.com/4obxoqr &
					spinner $! 
				fi
				if [ ! -e "$OSCAMDIR/stapi" ]; then
					mkdir "$OSCAMDIR/stapi"
				fi
				if [ -e "$MYDLDIR/4obxoqr" ]; then
					mv "$MYDLDIR/4obxoqr" "$MYDLDIR/$LIBSTAPIFILE"
				fi
				tar -xzvf "$MYDLDIR/$LIBSTAPIFILE" -C "$OSCAMDIR/stapi" >/dev/null 2>&1
				ln -sf "$OSCAMDIR/stapi/liboscam_stapi.$LIBOSCAM_STAPIVER.a" "$OSCAMDIR/stapi/liboscam_stapi.a"
				cd "$OSCAMDIR"
			fi
			cd "$MYDLDIR"
			echo -e "\033[1;37;42mGET SH4-GIT\033[0m"
			mkdir -p "$MYCHAINS/devkit_sh4"
			chmod 755 -R "$MYCHAINS/devkit_sh4"
			cd "$MYCHAINS/devkit_sh4"
			while [ ! -e "$MYCHAINS/devkit_sh4/tdt/tdt/cvs/cdk/make.sh" ] ; do 
			git clone git://gitorious.org/open-duckbox-project-sh4/tdt.git
			done
			echo -e "\033[1;37;42mDOWNLOAD/GET GIT SH4-TOOLCHAIN FINISHED\033[0m"
			sleep 2
		else
			echo -e "\033[1;37;42mFOUND DUCKBOX-SH4-TOOLCHAIN\033[0m"
		fi
		cd "$OSCAMDIR"
		make clean >/dev/null 2>&1
		$0 4
		exit


	elif [ "$REPLY" == "4" ]; then
		if [ ! -e "$MYCHAINS/COOLSTREAM-git" ]; then
			cd "$MYDLDIR"
			echo -e "\033[1;37;42mGET COOLSTREAM-GIT\033[0m"
			cd "$MYCHAINS"
			if [ -e "$MYCHAINS/COOLSTREAM-git" ]; then
				rm -rf "$MYCHAINS/COOLSTREAM-git"
			fi
			git clone git://gitorious.org/neutrino-hd/buildsystem-cs.git "COOLSTREAM-git"
			cd "$MYCHAINS/COOLSTREAM-git"
			ln -sf "$MYDLDIR" "$MYCHAINS/COOLSTREAM-git/download"
			if [ ! -e "$MYCHAINS/COOLSTREAM-git/download" ]; then
				mkdir "$MYCHAINS/COOLSTREAM-git/download"
			fi
			sed "s@TARGET      ?=.*@TARGET      ?= arm-cx2450x-linux-gnueabi@g" -i "$MYCHAINS/COOLSTREAM-git/make/environment.mk"
			sed "s@FLAVOUR     ?=.*@FLAVOUR     ?= neutrino-hd@g" -i "$MYCHAINS/COOLSTREAM-git/make/environment.mk"
			sed "s@BOXARCH      =.*@BOXARCH      = arm@g" -i "$MYCHAINS/COOLSTREAM-git/make/environment.mk"
			sed "s@PLATFORM    ?=.*@PLATFORM    ?= coolstream@g" -i "$MYCHAINS/COOLSTREAM-git/make/environment.mk"
			echo -e "\033[1;37;42mDOWNLOAD/GET SVN COOLSTREAM-TOOLCHAIN FINISHED\033[0m"
			sleep 2
		else
			echo -e "\033[1;37;42mFOUND COOLSTREAM-TOOLCHAIN\033[0m"
		fi
		cd "$OSCAMDIR"
		make clean >/dev/null 2>&1
		$0 4
		exit


	elif [ "$REPLY" == "5" ]; then
		if [ ! -e "$MYCHAINS/AZBOX-git" ]; then
			echo -e "\033[1;37;42mDOWNLOAD/EXTRACT AZBOX-TOOLCHAIN\033[0m"
			echo -e "\033[1;37;42m....... 73 MB ...........\033[0m"
			cd "$MYDLDIR"
			spinner
			if [ ! -e "$MYDLDIR/smp86xx_toolchain.20080505.tar.bz2" ]; then
				wget -q -c http://www.networkedmediatank.com/download/firmware/nmt/gpl/smp86xx_toolchain.20080505.tar.bz2 &
			fi
			spinner $! 
			mkdir -p "$MYCHAINS/AZBOX-git"
			spinner
			if [ -e "$MYDLDIR/smp86xx_toolchain.20080505.tar.bz2" ] && [ ! -e "$MYCHAINS/AZBOX-git/smp86xx_toolchain.20080505" ]; then
				tar -xjsf "$MYDLDIR/smp86xx_toolchain.20080505.tar.bz2" -C "$MYCHAINS/AZBOX-git/" &
			fi
			spinner $!
			mv "$MYCHAINS/AZBOX-git/smp86xx_toolchain.20080505/dl/*" "$MYDLDIR/" >/dev/null 2>&1
			rm -rf "$MYCHAINS/AZBOX-git/smp86xx_toolchain.20080505/dl" >/dev/null 2>&1
			ln -sf "$MYDLDIR" "$MYCHAINS/AZBOX-git/smp86xx_toolchain.20080505/dl" >/dev/null 2>&1
			spinner
			wget -q -c http://www.azupd.com/SDK/Plugins-SDK-0.1.1.tgz &
			spinner $! 
			tar -xzf $MYDLDIR/Plugins-SDK-0.1.1.tgz -C $MYCHAINS/AZBOX-git/ >/dev/null 2>&1
			mkdir -p $MYCHAINS/AZBOX-git/smp86xx_toolchain.20080505/build_tmp \
				$MYCHAINS/AZBOX-git/smp86xx_toolchain.20080505/build_mipsel_nofpu/staging_dir/lib/gcc/mipsel-linux-uclibc/3.4.2/
. "$EASYCONF"
			if [ "$DAPPERSRC" == "n" ]; then
				. /etc/lsb-release
				UBU=`echo $DISTRIB_DESCRIPTION | cut -d " " -f1`
				if [ "$UBU" != "Ubuntu" ] && [ ! -e /usr/bin/gcc-3.4 ]; then
					echo "AZBOX-BUILD ONLY WITH OLD GCC-3.4.2 POSSIBLE!"
					echo "Please manual install gcc-3.4.2-devel"
					sleep 2
					$0
					exit
				elif [ "$UBU" == "Ubuntu" ] && [ ! -e /usr/bin/gcc-3.4 ]; then
					SOURCES=`cat /etc/apt/sources.list | grep -m1 "dapper main restricted" | cut -d " " -f3`
					if [ "$SOURCES" != "dapper" ] && [ "$DAPPERSRC" == "n" ]; then
						read -p "add dapper source to apt and install gcc-3.4.2 ? (y/N) "
						if [ "$REPLY" == "y" ] ||"$REPLY" == "Y" ]; then
							$USERS chmod 777 /etc/apt/sources.list
							$USERS echo "deb http://de.archive.ubuntu.com/ubuntu/ dapper main restricted" >> /etc/apt/sources.list
							$USERS echo "deb-src http://de.archive.ubuntu.com/ubuntu/ dapper main restricted" >> /etc/apt/sources.list
							$USERS apt-get update >/dev/null 2>&1
							sed "s@DAPPERSRC=.*@DAPPERSRC=y@g" -i "$EASYCONF"
							$USERS apt-get update >/dev/null 2>&1
							$USERS apt-get install gcc-3.4
							$USERS sed "/deb http:\/\/de.archive.ubuntu.com\/ubuntu\/ dapper/d" -i /etc/apt/sources.list
							$USERS sed "/deb-src http:\/\/de.archive.ubuntu.com\/ubuntu\/ dapper/d" -i /etc/apt/sources.list
							$USERS apt-get update >/dev/null 2>&1
						fi
					fi
				fi

			fi
			echo -e "\033[1;37;42mDOWNLOAD/EXTRACT AZBOX-TOOLCHAIN FINISHED\033[0m"
			sleep 2
		else
			echo -e "\033[1;37;42mFOUND AZBOX-TOOLCHAIN\033[0m"
		fi
		cd "$OSCAMDIR"
		make clean >/dev/null 2>&1
		$0 4
		exit

	elif [ "$REPLY" == "6" ]; then
		if [ ! -e "$MYCHAINS/DDWRT" ]; then
			cd "$MYDLDIR"
			echo -e "\033[1;37;42mDOWNLOAD/EXTRACT DDWRT-TOOLCHAIN\033[0m"
			echo -e "\033[1;37;42m....... 69 MB ...........\033[0m"
			if [ ! -e "$MYDLDIR/Toolchain_MIPS-Router-uclib-0.9.28" ]; then
				if [ ! -z "$STREAMSVNONLINE" ]; then
					spinner
					wget -q -c http://www.streamboard.gmc.to/wbb2/tut-pics/toolchains/Toolchain_MIPS-Router-uclib-0.9.28.bz2 &
					spinner $! 
				else
					spinner
					wget -q -c http://tinyurl.com/62dvtcf &
					spinner $! 
					mv $MYDLDIR/62dvtcf $MYDLDIR/Toolchain_MIPS-Router-uclib-0.9.28.bz2
				fi
			fi
			if [ ! -e "$MYCHAINS/DDWRT" ]; then
				mkdir -p "$MYCHAINS/DDWRT"
				spinner
				bzip2 -d -f "$MYDLDIR/Toolchain_MIPS-Router-uclib-0.9.28.bz2" >/dev/null 2>&1 &
				spinner $! 
				if [ -e "$MYDLDIR/Toolchain_MIPS-Router-uclib-0.9.28.bz2" ]; then
					rm "$MYDLDIR/Toolchain_MIPS-Router-uclib-0.9.28.bz2"
				fi
				tar -xvf "$MYDLDIR/Toolchain_MIPS-Router-uclib-0.9.28" -C "$MYCHAINS/DDWRT/" >/dev/null 2>&1
			fi
			chmod 755 -R "$MYCHAINS/DDWRT/"
			echo -e "\033[1;37;42mDOWNLOAD/EXTRACT DDWRT-TOOLCHAIN FINISHED...\033[0m"
			sleep 2
		else
			echo -e "\033[1;37;42mFOUND DDWRT-TOOLCHAIN\033[0m"
		fi
		cd "$OSCAMDIR"
		make clean >/dev/null 2>&1
		$0 4
		exit

	elif [ "$REPLY" == "7" ]; then
		if [ ! -e "$MYCHAINS/armv5b-softfloat-linux" ] || [ ! -e "$MYDLDIR/Toolchain_armv5b-softfloat-linux_Unslug.tar.bz2" ]; then
			cd "$MYDLDIR"
			echo -e "\033[1;37;42mDOWNLOAD/EXTRACT NSLU2UNSLUNG-TOOLCHAIN\033[0m"
			echo -e "\033[1;37;42m....... 35 MB ...........\033[0m"
			if [ ! -z "$STREAMSVNONLINE" ]; then
				spinner
				wget -q -c http://www.streamboard.gmc.to/wbb2/tut-pics/toolchains/Toolchain_armv5b-softfloat-linux_Unslug.tar.bz2 &
				spinner $! 
			else
				spinner
				wget -q -c http://tinyurl.com/4oh8c29 &
				spinner $! 
				mv $MYDLDIR/4oh8c29 $MYDLDIR/Toolchain_armv5b-softfloat-linux_Unslug.tar.bz2
			fi
			if [ ! -e "$MYCHAINS/armv5b-softfloat-linux" ]; then
				spinner
				tar -xjf $MYDLDIR/Toolchain_armv5b-softfloat-linux_Unslug.tar.bz2 -C "$MYCHAINS/" >/dev/null 2>&1 &
				spinner $! 
				chmod 777 -R $MYCHAINS/armv5b-softfloat-linux/gcc-3.3.5-glibc-2.2.5/lib/gcc-lib/armv5b-softfloat-linux/3.3.5/
#				ln -sf $OSCAMDIR/libcrypto/arm-nslu2unslung/libcrypto.a $MYCHAINS/armv5b-softfloat-linux/gcc-3.3.5-glibc-2.2.5/lib/gcc-lib/armv5b-softfloat-linux/3.3.5/libcrypto.a
			fi
			chmod 755 -R $MYCHAINS/armv5b-softfloat-linux
			echo -e "\033[1;37;42mDOWNLOAD/EXTRACT NSLU2UNSLUNG-TOOLCHAIN FINISHED\033[0m"
			sleep 2
		else
			echo -e "\033[1;37;42mFOUND NSLU2UNSLUNG-TOOLCHAIN\033[0m"
		fi
		cd "$OSCAMDIR"
		make clean >/dev/null 2>&1
		$0 4
		exit
	elif [ "$REPLY" == "8" ]; then
		if [ ! -e "$MYCHAINS/toolchains/powerpc-tuxbox-linux-gnu" ]; then
			cd "$MYDLDIR"
			echo -e "\033[1;37;42mDOWNLOAD/EXTRACT PPC-DREAMBOX-TOOLCHAIN\033[0m"
			echo -e "\033[1;37;42m....... 66 MB ...........\033[0m"
			if [ ! -e "$MYDLDIR/Toolchain_powerpc-tuxbox-linux_DreamboxPPC.tar" ]; then
				if [ ! -z "$STREAMSVNONLINE" ]; then
					spinner
					wget -q -c http://www.streamboard.gmc.to/wbb2/tut-pics/toolchains/Toolchain_powerpc-tuxbox-linux_DreamboxPPC.tar.bz2 &
					spinner $! 
				else
					spinner
					wget -q -c http://tinyurl.com/49gv3tg &
					spinner $! 
					mv $MYDLDIR/49gv3tg $MYDLDIR/Toolchain_powerpc-tuxbox-linux_DreamboxPPC.tar.bz2
				fi
			fi
			if [ ! -e "$MYCHAINS/powerpc-tuxbox-linux-gnu" ]; then
				spinner
				bzip2 -d -f "$MYDLDIR/Toolchain_powerpc-tuxbox-linux_DreamboxPPC.tar.bz2" >/dev/null 2>&1 &
				spinner $! 
				if [ -e "$MYDLDIR/Toolchain_powerpc-tuxbox-linux_DreamboxPPC.tar.bz2" ]; then
					rm "$MYDLDIR/Toolchain_powerpc-tuxbox-linux_DreamboxPPC.tar.bz2"
				fi
				tar -xvf "$MYDLDIR/Toolchain_powerpc-tuxbox-linux_DreamboxPPC.tar" -C "$MYCHAINS/" >/dev/null 2>&1
			fi
			chmod 755 -R "$MYCHAINS/powerpc-tuxbox-linux-gnu/"
			echo -e "\033[1;37;42mDOWNLOAD/EXTRACT PPC-DREAMBOX-TOOLCHAIN FINISHED...\033[0m"
			sleep 2
		else
			echo -e "\033[1;37;42mFOUND PPC-DREAMBOX-TOOLCHAIN\033[0m"
		fi
		cd "$OSCAMDIR"
		make clean >/dev/null 2>&1
		$0 4
		exit
	elif [ "$REPLY" == "9" ]; then
		if [ ! -e "$MYCHAINS"/toolchains/"OpenWrt-SDK-atheros-2.6-for-Linux-i686" ]; then
			cd "$MYDLDIR"
			echo -e "\033[1;37;42mDOWNLOAD/EXTRACT MIPS-FONERA-TOOLCHAIN\033[0m"
			echo -e "\033[1;37;42m....... 40 MB ...........\033[0m"
			if [ ! -e "$OSCAMDIR"/Download/"OpenWrt-SDK-atheros-2.6-for-Linux-i686.tar" ]; then
				spinner
				wget -q -c http://downloads.openwrt.org/kamikaze/7.09/atheros-2.6/"OpenWrt-SDK-atheros-2.6-for-Linux-i686.tar.bz2" &
				spinner $! 
			fi
			if [ ! -e "$MYCHAINS"/"OpenWrt-SDK-atheros-2.6-for-Linux-i686" ]; then
				spinner
				bzip2 -d -f "$OSCAMDIR"/Download/"OpenWrt-SDK-atheros-2.6-for-Linux-i686.tar.bz2" >/dev/null 2>&1 &
				spinner $! 
				if [ -e "$OSCAMDIR"/Download/"OpenWrt-SDK-atheros-2.6-for-Linux-i686.tar.bz2" ]; then
					rm "$OSCAMDIR"/Download/"OpenWrt-SDK-atheros-2.6-for-Linux-i686.tar.bz2"
				fi
				tar -xvf "$OSCAMDIR"/Download/"OpenWrt-SDK-atheros-2.6-for-Linux-i686.tar" -C "$MYCHAINS/" >/dev/null 2>&1
			fi
			chmod 755 -R "$MYCHAINS"/"OpenWrt-SDK-atheros-2.6-for-Linux-i686"/
			echo -e "\033[1;37;42mDOWNLOAD/EXTRACT MIPS-FONERA-TOOLCHAIN FINISHED...\033[0m"
			sleep 2
		else
			echo -e "\033[1;37;42mFOUND MIPS-FONERA-TOOLCHAIN\033[0m"
		fi
		cd "$OSCAMDIR"
		make clean >/dev/null 2>&1
		$0 4
		exit
	elif [ "$REPLY" == "10" ]; then
		if [ ! -e "$MYCHAINS/DockStar/backfire" ]; then
			echo -e "\033[1;37;42mGet ARM-DOCKSTAR-TOOLCHAIN\033[0m"
			if [ ! -e "$MYCHAINS/DockStar" ]; then
				mkdir -p "$MYCHAINS/DockStar"
			fi
			cd "$MYCHAINS/DockStar"
			svn co svn://svn.openwrt.org/openwrt/branches/backfire
			if [ -e "$MYCHAINS/DockStar/backfire" ]; then
				echo -e "\033[1;37;42mARM-DOCKSTAR-TOOLCHAIN SUCCESSFULL CHECKED\033[0m"
				sleep 2
			else
				echo -e "\033[1;37;41mE   R   R   O   R\033[0m"
				echo -e "\033[1;37;41mPlease try again later!\033[0m"
				sleep 2
				$0
			fi
		fi
		cd "$OSCAMDIR"
		make clean >/dev/null 2>&1
		$0 4
		exit
	elif [ "$REPLY" == "11" ]; then
		if [ ! -e "$MYCHAINS"/"OpenWrt-SDK-ar71xx/staging_dir" ] || [ ! -e "$MYDLDIR"/"OpenWrt-SDK-ar71xx.tar.gz" ]; then
			cd "$MYDLDIR"
			echo -e "\033[1;37;42mDOWNLOAD/EXTRACT TP-LINK-TOOLCHAIN\033[0m"
			echo -e "\033[1;37;42m....... 23 MB ...........\033[0m"
			if [ ! -e "$MYDLDIR"/"OpenWrt-SDK-ar71xx.tar.gz" ]; then
				spinner
				wget -q -c http://tinyurl.com/5wvmkew &
				spinner $! 
				mv "$MYDLDIR/5wvmkew" "$MYDLDIR"/"OpenWrt-SDK-ar71xx.tar.gz"
			fi
			if [ ! -e "$MYCHAINS"/"OpenWrt-SDK-ar71xx" ]; then
				spinner
				tar -xzvf "$MYDLDIR"/"OpenWrt-SDK-ar71xx.tar.gz" -C "$MYCHAINS/" >/dev/null 2>&1 &
				spinner $! 
				chmod 777 -R "$MYCHAINS"/"OpenWrt-SDK-ar71xx/"
			fi
			chmod 755 -R "$MYCHAINS"/"OpenWrt-SDK-ar71xx/"
			echo -e "\033[1;37;42mDOWNLOAD/EXTRACT TP-LINK-TOOLCHAIN FINISHED\033[0m"
			sleep 2
		else
			echo -e "\033[1;37;42mFOUND TP-LINK-TOOLCHAIN\033[0m"
		fi
		cd "$OSCAMDIR"
		make clean >/dev/null 2>&1
		$0 4
		exit
	elif [ "$REPLY" == "12" ]; then
		if [ ! -e "$MYCHAINS/ASUS" ]; then
			mkdir -p "$MYCHAINS/ASUSWL"
		fi
		if [ ! -e "$MYCHAINS/ASUSWL/MYASUS/bin" ] || [ ! -e "$MYDLDIR"/"hndtools-mipsel-uclibc-4.3.5-K26-2.tar.bz2" ] || [ ! -e "$MYDLDIR"/"optware_asuswl500.tgz" ]; then
			cd "$MYDLDIR"
			echo -e "\033[1;37;42mDOWNLOAD/EXTRACT ASUS-WL-TOOLCHAIN\033[0m"
			echo -e "\033[1;37;42m....... 46 MB ...........\033[0m"
			if [ -z "`cat "$OSCAMDIR/oscam-config.h" | grep "//#define ASUSWL_K26"`" ]; then
				if [ ! -e "$MYDLDIR"/"hndtools-mipsel-uclibc-4.3.5-K26-2.tar.bz2" ]; then
					spinner
					wget -q -c http://wl500g.googlecode.com/files/hndtools-mipsel-uclibc-4.3.5-K26-2.tar.bz2 &
					spinner $! 
				fi
				if [ ! -e "$MYCHAINS"/"ASUSWL/hndtools-mipsel-uclibc-4.3.5-K26" ]; then
					spinner
					tar -xjf "$MYDLDIR"/"hndtools-mipsel-uclibc-4.3.5-K26-2.tar.bz2" -C "$MYCHAINS"/"ASUSWL/" >/dev/null 2>&1 &
					spinner $!
					chmod 777 -R "$MYCHAINS"/"ASUSWL/hndtools-mipsel-uclibc-4.3.5-K26/"
				fi
				ln -sf "$MYCHAINS"/ASUSWL/"hndtools-mipsel-uclibc-4.3.5-K26" "$MYCHAINS/ASUSWL/MYASUS"
			else
				if [ ! -e "$MYDLDIR/optware_asuswl500.tgz" ]; then
					spinner
					wget -q -c http://tinyurl.com/6cpt8w2 &
					spinner $! 
					mv "6cpt8w2" "optware_asuswl500.tgz"
				fi
				if [ ! -e "$MYCHAINS/ASUSWL/optware_asuswl500" ]; then
					spinner
					tar -xzvf "$MYDLDIR/optware_asuswl500.tgz" -C "$MYCHAINS/ASUSWL/" >/dev/null 2>&1 &
					spinner $! 
					chmod 777 -R "$MYCHAINS/ASUSWL/gcc-4.1.1-uclibc-0.9.28/"
				fi
					ln -sf "$MYCHAINS/ASUSWL/gcc-4.1.1-uclibc-0.9.28" "$MYCHAINS/ASUSWL/MYASUS"
			fi
			echo -e "\033[1;37;42mDOWNLOAD/EXTRACT ASUS-WL-TOOLCHAIN FINISHED\033[0m"
			sleep 2
		else
			echo -e "\033[1;37;42mFOUND ASUS-WL-TOOLCHAIN\033[0m"
		fi
		cd "$OSCAMDIR"
		make clean >/dev/null 2>&1
		$0 4
		exit
	elif [ "$REPLY" == "13" ]; then
		if [ ! -e "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2" ]; then
			mkdir -p "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2"
			cd "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2"
			cvs -d anoncvs@cvs.tuxbox.org:/cvs/tuxbox -z3 co -P . 
			cd "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2/cdk"
			ln -sf "$MYDLDIR" Archive
			chmod 755 -R $MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2
			echo -e "\033[1;37;42mDOWNLOAD PPC-OLD-TOOLCHAIN FINISHED\033[0m"
			sleep 2
		else
			echo -e "\033[1;37;42mFOUND PPC-OLD-TOOLCHAIN\033[0m"
		fi
		cd "$OSCAMDIR"
		make clean >/dev/null 2>&1
		$0 4
		exit
	else
		cd "$OSCAMDIR"
		$0
		exit
	fi
### CHECK PACKAGES ###
elif [ "$REPLY" == "5" ]; then
. "$EASYCONF"
	if [ "$PACKAGES" != "y" ]; then
		echo ""
		echo -e "\033[1;37;44mcheck your linux installed packages now...
maybe you must fill in your sudo/su pw if aksed!\033[0m"
		echo ""
		read -p "Install packages now? (y/N) "
		if [ "$REPLY" == "y" ] || [ "$REPLY" == "Y" ]; then
			# still not detected, display error and let the USERS manually install
			if [ -z "$FEDORA$SUSE$UBUNTU" ]; then
				echo
				echo -e "\033[1;37;44mCannot determine which OS distribution you use,\033[0m" 
				echo -e "\033[1;37;44mor your distribution is not (yet) supported.\033[0m" 
				echo
				echo -e "\033[1;37;44mTry installing the following packages: \033[0m"
				# determine probable distribution, based on package system, 
				# Suse should be last because the others may also have rpm installed.
				{ `which apt-get > /dev/null 2>&1` && UBUNTU=1; } || \
				{ `which yum     > /dev/null 2>&1` && FEDORA=1; } || \
				SUSE=2
				INSTALL="echo "
			fi

			# NOT sure if "genromfs" till "cmake" correct for all linux distris, please test!
			PACKAGES="\
				genromfs \
				help2man \
				diffstat \
				monotone \
				rar \
				unrar \
				cvs \
				gzip \
				cmake \
				subversion \
				ccache \
				flex \
				bison \
				texinfo \
				libtool \
				swig \
				dialog \
				bzip2 \
				jam \
				wget \
				${UBUNTU:+rpm}                                          ${FEDORA:+rpm-build} \
				${UBUNTU:+squashfs-tools}                               ${FEDORA:+squashfs-tools} \
				${UBUNTU:+mtd-utils}                                    ${FEDORA:+mtd-utils} \
				${UBUNTU:+bitbake}                                      ${FEDORA:+bitbake} \
				${UBUNTU:+texi2html}                                    ${FEDORA:+texi2html} \
				${UBUNTU:+libssl-dev}       ${SUSE:+openssl-devel}      ${FEDORA:+openssl-devel openssl-static} \
				${UBUNTU:+lsb-release}      ${SUSE:+lsb-release}        ${FEDORA:+redhat-lsb} \
				${UBUNTU:+git-core}         ${SUSE:+git-core}           ${FEDORA:+git} \
				${UBUNTU:+libncurses5-dev}  ${SUSE:+ncurses-devel}      ${FEDORA:+ncurses-devel} \
				${UBUNTU:+gettext}          ${SUSE:+gettext-devel}      ${FEDORA:+gettext-devel} \
				${UBUNTU:+zlib1g-dev}       ${SUSE:+zlib-devel}         ${FEDORA:+zlib-devel} \
				${UBUNTU:+libpcsclite1}     ${SUSE:+pcsc-lite}          ${FEDORA:+pcsc-lite} \
				${UBUNTU:+libpcsclite-dev}  ${SUSE:+pcsc-lite-devel}    ${FEDORA:+pcsc-lite-devel} \
				${UBUNTU:+libusb-1.0-0-dev} ${SUSE:+libusb-1_0-devel}   ${FEDORA:+libusb1-devel libusb1-static} \
				${UBUNTU:+g++}              ${SUSE:+gcc}                ${FEDORA:+gcc-c++} \
				${UBUNTU:+automake}         ${SUSE:+automake} \
				${UBUNTU:+make}             ${SUSE:+make} \
				${UBUNTU:+xfslibs-dev}      ${SUSE:+xfsprogs-devel} \
				${UBUNTU:+pkg-config}       ${SUSE:+pkg-config} \
				                            ${SUSE:+patch} \
							    ${SUSE:+gcc-c++} \
				${UBUNTU:+cfv} \
				${UBUNTU:+fakeroot} \
				${UBUNTU:+gawk} \
			";

			if [ `which arch > /dev/null 2>&1 && arch || uname -m` == x86_64 ]; then
				# ST changed to the -m32 option for their gcc compiler build
				# we might need to install more 32bit versions of some packages
				PACKAGES="$PACKAGES \
				${UBUNTU:+gcc-multilib}    ${SUSE:+gcc-32bit} \
				                                                   ${FEDORA:+libstdc++-devel.i686} \
				                                                   ${FEDORA:+glibc-devel.i686 glibc-devel} \
				";
			fi
			DEBIAN=
			# Try to detect the distribution
			if `which lsb_release > /dev/null 2>&1`; then 
				case `lsb_release -s -i` in
					Debian*) DEBIAN=1;;
					Ubuntu*) DEBIAN=0;;
				esac
			fi
			# Not detected by lsb_release, try release files
			if [ -z "$DEBIAN" ]; then
				if [ -f /etc/debian_version ]; then DEBIAN=1;
				fi
			fi
			if [ -z "$FEDORA" ]; then
				if [ -f /etc/fedora-release ]; then 
					FEDORA=1
					su
					UMASKCORRECT=`cat /etc/profile | grep "umask 022"`
					if [ -z "$UMASKCORRECT" ]; then					
						echo "umask 022" >> /etc/profile
					fi
					USERISSUDO=`cat /etc/sudoers | grep $USER`
					if [ -z "$USERISSUDO" ]; then
						chmod +w /etc/sudoers
						echo "$USER ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
						chmod -w /etc/sudoers
						exit
					fi
				fi
			fi
			if [ "$FEDORA" == "1" ]; then
				FEDORAVERSION=`cat /etc/fedora-release | cut -d " " -f3`
				if [ "$FEDORAVERSION" == "11" ]; then
					iVERSION="i586"
				else
					iVERSION="i686"
				fi
				$USERS rpm -Uvh http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-stable.noarch.rpm
				if [ "$iVERSION" == "i686" ]; then
					$USERS curl http://ftp-stud.hs-esslingen.de/pub/fedora/linux/updates/13/i386/nss-softokn-freebl-3.12.7-6.fc13.i686.rpm -o nss-softokn-freebl-3.12.7-6.fc13.i686.rpm
					$USERS $INSTALL nss-softokn-freebl-3.12.7-6.fc13.i686.rpm
				else
					$USERS curl http://ftp-stud.hs-esslingen.de/pub/fedora/linux/updates/11/i386/nss-softokn-freebl-3.12.6-1.2.fc11.i586.rpm -o nss-softokn-freebl-3.12.6-1.2.fc11.i586.rpm
					$USERS $INSTALL nss-softokn-freebl-3.12.6-1.2.fc11.i586.rpm
				fi
				$USERS $INSTALL alsa-lib.$iVERSION dbus-libs.$iVERSION e2fsprogs-libs.$iVERSION expat.$iVERSION fontconfig.$iVERSION freetype.$iVERSION glib2.$iVERSION glibc.$iVERSION keyutils-libs.$iVERSION krb5-libs.$iVERSION libcap.$iVERSION libgcc.$iVERSION libICE.$iVERSION libpng.$iVERSION libselinux.$iVERSION libSM.$iVERSION libstdc++.$iVERSION libX11.$iVERSION libXau.$iVERSION libxcb.$iVERSION libXcursor.$iVERSION libXdmcp.$iVERSION libXext.$iVERSION libXfixes.$iVERSION libXi.$iVERSION libXinerama.$iVERSION libXrandr.$iVERSION libXrender.$iVERSION libXScrnSaver.$iVERSION libXv.$iVERSION openssl.$iVERSION qt.$iVERSION qt-x11.$iVERSION libv4l.$iVERSION zlib.$iVERSION libXv.$iVERSION libXScrnSaver.$iVERSION qt.$iVERSION qt-x11.$iVERSION pulseaudio-libs.$iVERSION pulseaudio-libs-glib2.$iVERSION alsa-plugins-pulseaudio.$iVERSION
			fi
			if [ "$DEBIAN" == "1" ]; then
				$USERS "$INSTALL $PACKAGES"
			else
				$USERS $INSTALL $PACKAGES
			fi
			sed "s@PACKAGES=.*@PACKAGES=y@g" -i "$EASYCONF"
			echo -e "\033[1;37;44mALL NEEDED PACKAGES INSTALLED!\033[0m"
			echo -e "\033[1;37;44mIF USING FEDORA PLEASE
RESTART FEDORA WHEN FINISHED!\033[0m"

			# Link sh to bash instead of dash on Ubuntu (and possibly others)
			/bin/sh --version 2>/dev/null | grep bash -s -q
			if [ ! "$?" -eq "0" ]; then
				echo
				read -p "/bin/sh should link to /bin/bash, adjust it (Y/n) ? "
				if [ -z "$REPLY" ] || [ "$REPLY" == "Y" ] || ["$REPLY" == "y" ]; then
					if [ "$DEBIAN" == "1" ]; then
						$USERS "rm -f /bin/sh"
						$USERS "ln -s /bin/bash /bin/sh"
					else
						$USERS rm -f /bin/sh
						$USERS ln -s /bin/bash /bin/sh
					fi
				fi
			fi
			if [ -z "$FEDORA" ]; then
				. /etc/lsb-release
			fi
			OLDUBU=`echo $DISTRIB_DESCRIPTION | cut -d " " -f2`
			if [ "$OLDUBU" == "9.10" ]; then
				SOURCES=`cat /etc/apt/sources.list | grep -m1 "jaunty main restricted" | cut -d " " -f3`
				if [ "$SOURCES" != "jaunty" ] && [ "$JAUNTYSRC" == "n" ]; then
					$USERS chmod 777 /etc/apt/sources.list
					read -p "add jaunty source to apt? (y/N) "
					if [ "$REPLY" == "y" ] ||"$REPLY" == "Y" ]; then
						$USERS echo "deb http://de.archive.ubuntu.com/ubuntu/ jaunty main restricted" >> /etc/apt/sources.list
						$USERS echo "deb-src http://de.archive.ubuntu.com/ubuntu/ jaunty main restricted" >> /etc/apt/sources.list
						$USERS apt-get update >/dev/null 2>&1
						sed "s@JAUNTYSRC=.*@JAUNTYSRC=y@g" -i "$EASYCONF"
					fi
				fi
				. "$EASYCONF"
				if [ "$SOURCES" == "jaunty" ] && [ "$JAUNTYSRC" == "y" ]; then
					# install old rpm
					echo ""
					read -p "rpm downgrade? (y/N) "
					if [ "$REPLY" == "y" ] ||"$REPLY" == "Y" ]; then
						# Note: Only works #if rpm has been never installed before
						$USERS apt-get remove rpm
						$USERS apt-get install rpm=4.4.2.3-2ubuntu1
						echo -e "\033[1;37;43mtake care to lock 'rpm' in synaptics soon!
run synaptics, search 'rpm' select and:
topmenu: package - lock version
if you dont do... next sys-autoupdate will
replace it with actual version again!\033[0m"
						sleep 2
					fi
					# bash downgrade
					echo ""
					read -p "bash downgrade? (y/N) "
					if [ "$REPLY" == "y" ] ||"$REPLY" == "Y" ]; then
						$USERS apt-get -y install bash=3.2-5ubuntu1
						echo -e "\033[1;37;43mtake care to lock 'bash' in synaptics soon!
			run synaptics, search 'bash' select and:
			topmenu: package - lock version
			if you dont do... next sys-autoupdate will
			replace it with actual version again!\033[0m"
						sleep 2
					fi
				fi
			fi
			cd "$OSCAMDIR"
			$0
			exit
		else
			echo -e "\033[1;37;43mNOTHING INSTALLED!
GO BACK TO MAIN-MENU\033[0m"
			sleep 2
			cd "$OSCAMDIR"
			$0
			exit
		fi
	else
		echo -e "\033[1;37;44mALLREADY INSTALLED!
GO BACK TO MAIN-MENU\033[0m"
		sleep 2
		cd "$OSCAMDIR"
		$0
		exit
	fi

### EASY-INFO ###
elif [ "$REPLY" == "6" ]; then
. "$EASYCONF"
	INFOFILE="$EASYDIR/ESAYINFO/EasyInfo.$(date '+%Y%m%d').txt"
	WITH_OIA=`cat ./oscam-config.h | grep "//#define OIA"`
	if [ -z "$WITH_OIA" ]; then
		INPUT7="ON"
	else
		INPUT7="OFF"
	fi
	WITH_WEBIF=`cat ./oscam-config.h | grep "//#define WEBIF"`
	if [ -z "$WITH_WEBIF" ]; then
		INPUT8="ON"
	else
		INPUT8="OFF"
	fi

	T=`readlink -f "$OSCAMDIR/stapi/liboscam_stapi.a"`
	INPUT9=`echo ${T##*v} | cut -d . -f2`

	WITH_SMARTREADER=`cat ./oscam-config.h | grep "//#define HAVE_LIBUSB"`
	if [ -z "$WITH_SMARTREADER" ]; then
		INPUT10="ON"
	else
		INPUT10="OFF"
	fi
	WITH_PCSCREADER=`cat ./oscam-config.h | grep "//#define WITH_PCSC"`
	if [ -z "$WITH_PCSCREADER" ]; then
		INPUT11="ON"
	else
		INPUT11="OFF"
	fi
# Fritzbox #
	if [ -z "`cat "$OSCAMDIR/oscam-config.h" | grep "//#define FB7390"`" ]; then
		MYFREETZ="freetz-trunk7390"
	else
		MYFREETZ="freetz-trunk"
	fi
	if [ -e "$MYCHAINS/$MYFREETZ" ] && [ "$FRITZBOXTOOLCHAINBUILD" == "n" ]; then
		INSTALLED1="INSTALLED"
	elif [ -e "$MYCHAINS/$MYFREETZ" ] && [ "$FRITZBOXTOOLCHAINBUILD" == "y" ]; then
		INSTALLED1="BUILD"
	else
		INSTALLED1=""
	fi
# Dreambox #
	if [ -e "$MYCHAINS/mipsel-unknown-linux-gnu" ]; then
		INSTALLED2="BUILD"
	else
		INSTALLED2=""
	fi
# sh4 #
	if [ -e "$MYCHAINS/devkit_sh4" ] && [ "$SH4TOOLCHAINBUILD" == "n" ]; then
		INSTALLED3="INSTALLED"
	elif [ -e "$MYCHAINS/devkit_sh4" ] && [ -e "$MYCHAINS/devkit_sh4/tdt/tdt/cvs/cdk/.deps/libstdc++" ] && [ "$SH4TOOLCHAINBUILD" == "y" ]; then
		INSTALLED3="BUILD"
	else
		INSTALLED3=""
	fi
# coolstream #
	if [ -e "$MYCHAINS/COOLSTREAM-git" ] && [ "$COOLSTREAMTOOLCHAINBUILD" == "n" ]; then
		INSTALLED4="INSTALLED"
	elif [ -e "$MYCHAINS/COOLSTREAM-git" ] && [ -e "$MYCHAINS/COOLSTREAM-git/cross/bin/arm-nevis-strip" ] && [ "$COOLSTREAMTOOLCHAINBUILD" == "y" ]; then
		INSTALLED4="BUILD"
	else
		INSTALLED4=""
	fi
# azbox #
	if [ -e "$MYCHAINS/AZBOX-git" ] && [ "$AZBOXTOOLCHAINBUILD" == "n" ]; then
		INSTALLED5="INSTALLED"
	elif [ -e "$MYCHAINS/AZBOX-git" ] && [ "$AZBOXTOOLCHAINBUILD" == "y" ]; then
		INSTALLED5="BUILD"
	else
		INSTALLED5=""
	fi
# DDWRT #
	if [ -e "$MYCHAINS/DDWRT" ]; then
		INSTALLED6="BUILD"
	else
		INSTALLED6=""
	fi
# NSLU2unslung #
	if [ -e "$MYCHAINS/armv5b-softfloat-linux" ]; then
		INSTALLED7="BUILD"
	else
		INSTALLED7=""
	fi
# PPC Dreambox #
	if [ -e "$MYCHAINS/powerpc-tuxbox-linux-gnu" ]; then
		INSTALLED8="BUILD"
	else
		INSTALLED8=""
	fi
# MIPS FONERA #
	if [ -e "$MYCHAINS"/"OpenWrt-SDK-atheros-2.6-for-Linux-i686" ]; then
		INSTALLED9="BUILD"
	else
		INSTALLED9=""
	fi
# DOCKSTAR #
	if [ -e "$MYCHAINS/DockStar/backfire" ] && [ "$DOCKSTARTOOLCHAINBUILD" == "n" ]; then
		INSTALLED10="INSTALLED"
	elif [ -e "$MYCHAINS/DockStar/backfire" ] && [ -e "$MYCHAINS/DockStar/backfire/staging_dir/toolchain-arm_v5te_gcc-4.3.3+cs_uClibc-0.9.30.1_eabi/usr/bin/arm-openwrt-linux-uclibcgnueabi-gcc-4.3.3" ] && [ "$DOCKSTARTOOLCHAINBUILD" == "y" ]; then
		INSTALLED10="BUILD"
	else
		INSTALLED10=""
	fi
# MIPS TP-LINK #
	if [ -e "$MYCHAINS"/"OpenWrt-SDK-atheros-2.6-for-Linux-i686" ]; then
		INSTALLED12="BUILD"
	else
		INSTALLED12=""
	fi
# ASUSWL #
	if [ -e "$MYCHAINS/ASUSWL/MYASUS/bin" ]; then
		INSTALLED13="BUILD"
	else
		INSTALLED13=""
	fi
# PPC DB2 Dreambox OLD#
	if [ -e "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2" ]; then
		INSTALLED14="BUILD"
	else
		INSTALLED14=""
	fi
# oscam build list
	if [ -e "$EASYDIR/ESAYINFO/mybuildlist.txt" ]; then
		rm "$EASYDIR/ESAYINFO/mybuildlist.txt"
	fi
	for i in $MYPLATFORMS
	do
		for x in $MYFINISHEDCAMFOLDER
		do
			if [ "$i" == "DDWRT" ]; then
				for z in $MYDDWRT
				do
					MYBUILD_LIST=`ls "$MYBUILDDIR/$i/$z/$x" | grep svn | cut -d n -f2 | cut -d - -f1`
				done
			else
				MYBUILD_LIST=`ls "$MYBUILDDIR/$i/$x" | grep svn | cut -d n -f2 | cut -d - -f1`
			fi
			if [ ! -z "$MYBUILD_LIST" ]; then
				MYBUILD=`echo $MYBUILD_LIST | sed -r 's/([0-9]{4,4})/\1,/g;s/.$//'`
				BUILDREADY="$i/$x:$MYBUILD"
			fi
			echo "$BUILDREADY" >> "$EASYDIR/ESAYINFO/mybuildlist.txt"
		done
	done



	if [ `which arch > /dev/null 2>&1 && arch || uname -m` == x86_64 ]; then
		LIBCRYPTOPATH="/usr/lib64"
	else
		LIBCRYPTOPATH="/usr/lib"
	fi
	clear
	echo "#####################################" > "$INFOFILE"
	echo -e "     \033[1;37;44mOSCam-Easy-Script $EASYVERSION\033[0m" >> "$INFOFILE"
	echo -e "             \033[1;37;44mEasy-Info\033[0m" >> "$INFOFILE"
	echo "#####################################" >> "$INFOFILE"
	echo "" >> "$INFOFILE"
	echo -e "         \033[4;37;44mMain-Settings:\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mOSCam SVN-Version #:       $VERSION\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mONEINALL-CONFIG:           $INPUT7\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mWEBIF:                     $INPUT8\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mLIB-STAPI:                 v0.$INPUT9\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mLIBUSB:                    $INPUT10\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mPCSC:                      $INPUT11\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mLIBCRYPTO:                 v.$OPENSSLVER\033[0m" >> "$INFOFILE"
	if [ -e "$MYCHAINS/DDWRT" ]; then
		echo -e "\033[1;37;44mLIBCRYPTO-DDWRT:           v.$OPENSSLDDWRTVER\033[0m" >> "$INFOFILE"
	fi
	echo "" >> "$INFOFILE"
	echo -e "         \033[4;37;44mToolchains:\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mFritzbox-ToolChain:        $INSTALLED1\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mDreambox-ToolChain:        $INSTALLED2\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mSH4-ToolChain:             $INSTALLED3\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mCoolstream-ToolChain:      $INSTALLED4\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mAzbox-ToolChain:           $INSTALLED5\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mDDWRT-ToolChain:           $INSTALLED6\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mNSLU2-UNSLUNG-ToolChain:   $INSTALLED7\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mPPC-DREAM-ToolChain:   	 $INSTALLED8\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mMIPS-FONERA-ToolChain:     $INSTALLED9\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mARM-DOCKSTAR-ToolChain:    $INSTALLED11\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mMIPS-TPLINK-ToolChain:     $INSTALLED12\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mASUSWL-ToolChain:		 $INSTALLED13\033[0m" >> "$INFOFILE"
	echo -e "\033[1;37;44mPPC-DB2/DREAM-OLD-TChain:  $INSTALLED14\033[0m" >> "$INFOFILE"
	if [ -e "$LIBCRYPTOPATH/libcrypto.a" ]; then
		echo -e "\033[1;37;44mPC-ToolChain:              BUILD\033[0m" >> "$INFOFILE"
	else
		echo -e "\033[1;37;44mPC-ToolChain:              \033[0m" >> "$INFOFILE"
	fi
	echo "" >> "$INFOFILE"
	cat "$INFOFILE"
	read -p "Show site 2 OSCam build info? (y/N) "
	if [ "$REPLY" == "y" ] || [ "$REPLY" == "Y" ]; then
		clear
		echo "#####################################" >> "$INFOFILE"
		echo -e "     \033[1;37;44mOSCam-Easy-Script $EASYVERSION\033[0m" >> "$INFOFILE"
		echo -e "        \033[1;37;44mOSCam(s) Build-Info\033[0m" >> "$INFOFILE"
		echo "#####################################" >> "$INFOFILE"
		echo "" >> "$INFOFILE"
		for i in $MYBUILDS
		do
			for x in $MYFINISHEDCAMFOLDER
			do
				echo  -e "\033[1;37;44m`cat "$EASYDIR/ESAYINFO/mybuildlist.txt" | grep "$i/$x":`\033[0m"
				echo  -e "\033[1;37;44m`cat "$EASYDIR/ESAYINFO/mybuildlist.txt" | grep "$i/$x" | cut -d ":" -f2`\033[0m"
				echo ""
			done
		done
		echo "" >> "$INFOFILE"
		echo "MY BUILD_OSCAMS:" >> "$INFOFILE"
		cat "$EASYDIR/ESAYINFO/mybuildlist.txt" >> "$INFOFILE"
		rm "$EASYDIR/ESAYINFO/mybuildlist.txt"
		echo ""
		read -p "Press 'ENTER' key to continue..."
		if [ "$REPLY" == "1" ]; then
			$0
			exit
		else
			$0
			exit
		fi
	else
		$0
		exit
	fi
### easy-setup
elif [ "$REPLY" == "7" ]; then
	. "$EASYCONF"
	INPUT7=$VERSION
	if [ -n "$2" ]; then
		REPLY=$2
	else
		clear
		echo "#####################################"
		echo -e "     \033[1;37;44mOSCam-Easy-Script $EASYVERSION\033[0m"
		echo -e "             \033[1;37;44mEasy-Config\033[0m"
		echo "#####################################"
		echo -e "\033[1;37;44m 1) SVN CHEKOUT OLDER REV ?    actual:  ($INPUT7)\033[0m"
		echo -e "\033[1;37;44m 2) UPDATE EASY-SCRIPT ?\033[0m"
		echo -e "\033[1;37;44m 3) HowTo's / Changelog Menu ?\033[0m"
		echo -e "\033[1;37;43m 4) Cleanup 'BUILD-Folder' ?\033[0m"
		echo -e "\033[1;37;43m 5) Delete ALL Logfiles+EasyInfo ? "
		echo -e "\033[1;37;41m 6) DistClean OSCAM-SVN ?\033[0m"
		echo -e "\033[1;37;44m 7) Get Oscam-SVN-BACKUP ?\033[0m"
		echo -e "\033[1;37;44m 8) Create MY_OSCAMS-megapack ?\033[0m"
		echo -e "\033[1;37;44m *) Back to MAIN-MENU\033[0m"
		echo "#####################################"
		echo ""

		read -p "Select target (1-8) ? "
	fi

		if [ "$REPLY" == "1" ]; then
			if [ -e "$OSCAMDIR/Makefile.save" ]; then
				rm "$OSCAMDIR/Makefile"
				mv "$OSCAMDIR/Makefile.save" "$OSCAMDIR/Makefile"
			fi
			if [ -e "$OSCAMDIR/Maketype.save" ]; then
				rm "$OSCAMDIR/Maketype"
				mv "$OSCAMDIR/Maketype.save" "$OSCAMDIR/Maketype"
			fi
			if [ -e "$OSCAMDIR/oscam-config.c.save" ]; then
				rm "$OSCAMDIR/oscam-config.c"
				mv "$OSCAMDIR/oscam-config.c.save" "$OSCAMDIR/oscam-config.c"
			fi
			if [ -e "$OSCAMDIR/oscam-config.h.save" ]; then
				rm "$OSCAMDIR/oscam-config.h"
				mv "$OSCAMDIR/oscam-config.h.save" "$OSCAMDIR/oscam-config.h"
			fi
			if [ -e "$OSCAMDIR/oscam-http.c.save" ]; then
				rm "$OSCAMDIR/oscam-http.c"
				mv "$OSCAMDIR/oscam-http.c.save" "$OSCAMDIR/oscam-http.c"
			fi
			if [ -e "$OSCAMDIR/globals.h.save" ]; then
				rm "$OSCAMDIR/globals.h"
				mv "$OSCAMDIR/globals.h.save" "$OSCAMDIR/globals.h"
			fi
			if [ -e "$OSCAMDIR/utils/list_smargo.c.save" ]; then
				rm "$OSCAMDIR/utils/list_smargo.c"
				mv "$OSCAMDIR/utils/list_smargo.c.save" "$OSCAMDIR/utils/list_smargo.c"
			fi
			if [ -e "$OSCAMDIR/csctapi/ifd_smartreader.h.save" ]; then
				rm "$OSCAMDIR/csctapi/ifd_smartreader.h"
				mv "$OSCAMDIR/csctapi/ifd_smartreader.h.save" "$OSCAMDIR/csctapi/ifd_smartreader.h"
			fi
			echo ""
			read -p "checkout rev# (f.e. 2902): ? "
			echo -e "\033[1;37;41mCheckout now $REPLY ...\033[0m"
			svn co http://streamboard.gmc.to/svn/oscam/$MYSVN . -r "$REPLY"
			echo -e "\033[1;37;41mSVN checkout finished!\033[0m"
			echo -e "\033[1;37;41mGo back to Easy-Config-Menu\033[0m"
			sleep 2
			$0 7
			exit

		elif [ "$REPLY" == "2" ]; then
			echo ""
			read -p "Watch online for EASY-UPDATE (y/N) ? "
				if [ "$REPLY" == "y" ] || [ "$REPLY" == "Y" ]; then
					if [ -e "$EASYDIR/easy_version.txt" ]; then
						rm "$EASYDIR/easy_version.txt"
					fi
					cd "$EASYDIR/"
					wget -q -c http://tinyurl.com/23cu9dy
					if [ -e "$EASYDIR/23cu9dy" ]; then
						mv "$EASYDIR/23cu9dy" "$EASYDIR/easy_version.txt"
					fi
					. "$EASYDIR/easy_version.txt"
					if [ "$ONLINEVERSION" != "$EASYVERSION" ]; then
						echo ""
						echo -e "\033[1;37;42mVERSION-ONLINE=$ONLINEVERSION\033[0m, \033[1;37;44mLOCAL-VERSION=$EASYVERSION\033[0m"
						read -p "UPDATE EASY SCRIPT WITH ONLINE-VERSION (y/N) ? "
							if [ "$REPLY" == "y" ] || [ "$REPLY" == "Y" ]; then
								cd "$OSCAMDIR"
								rm "$OSCAMDIR/make.sh"
								wget -q -c http://tinyurl.com/37yglh5
								if [ -e "$OSCAMDIR/37yglh5" ]; then
									mv "$OSCAMDIR/37yglh5" "$OSCAMDIR/make.sh"
								fi
								chmod 755 "$OSCAMDIR/make.sh"
								read -p "Activate DEFAULT EasyBuild.conf ? 
(N maybe build not working!) (y/N) ? "
								if [ "$REPLY" == "Y" ] || [ "$REPLY" == "y" ]; then
									rm "$EASYCONF"
								fi
								echo ""
								echo -e "\033[1;37;42mEasyBuild.conf set to DEFAULT\033[0m"
								if [ -e "$OSCAMDIR/Makefile.save" ]; then
									rm "$OSCAMDIR/Makefile"
									mv "$OSCAMDIR/Makefile.save" "$OSCAMDIR/Makefile"
								fi
								echo -e "\033[1;37;42mUPDATE DONE, restart make.sh...\033[0m"
								sleep 2
								cd "$OSCAMDIR"
								$0
								exit
							else
								cd "$OSCAMDIR"
								$0 7
								exit
							fi
					else
						cd "$OSCAMDIR"
						echo ""
						echo -e "\033[1;37;41mNO UPDATE AVAILABLE!\033[0m"
						sleep 2
						$0
						exit
					fi
				else
					cd "$OSCAMDIR"
					$0 7
					exit
				fi
		elif [ "$REPLY" == "3" ]; then
. "$EASYCONF"
			clear
			echo "#####################################"
			echo -e "     \033[1;37;44mOSCam-Easy-Script $EASYVERSION\033[0m"
			echo -e "       \033[1;37;44mHowTo's / Changelog\033[0m"
			echo "#####################################"
			echo -e "\033[1;37;44m1) Show Changelog ?\033[0m"
			echo -e "\033[1;37;44m2) Show EASY-Manual.pdf ?\033[0m"
			echo -e "\033[1;37;44m3) Show OSCam-Config example ?\033[0m"
			echo -e "\033[1;37;44m4) Show OSCam-WIKI ?\033[0m"
			echo -e "\033[1;37;46m*) Back to EASY-BUILD-CONFIG-MENU\033[0m"
			echo "#####################################"
			echo ""
			read -p "Select target (1-4)? "
			if [ "$REPLY" == "1" ]; then
				if [ -e "$EASYDIR/changelog.txt" ]; then
					rm "$EASYDIR/changelog.txt"
				fi
				cd "$EASYDIR"
				wget -q -c http://tinyurl.com/3aasfdn
				if [ -e "$EASYDIR/3aasfdn" ]; then
					mv "$EASYDIR/3aasfdn" "$EASYDIR/changelog.txt"
				fi
				clear
				cat "$EASYDIR/changelog.txt"
				echo ""
				read -p "Press 'ENTER' to continue..."
				if [ "$REPLY" == "1" ]; then
					cd "$OSCAMDIR"
					$0 7 10
					exit
				else
					cd "$OSCAMDIR"
					$0 7 10
					exit
				fi
			elif [ "$REPLY" == "2" ]; then
				if [ -e "$EASYDIR/manual.pdf" ]; then
					rm "$EASYDIR/manual.pdf"
				fi
				cd "$EASYDIR"
				wget -q -c http://tinyurl.com/25g5jz5
				if [ -e "$EASYDIR/25g5jz5" ]; then
					mv "$EASYDIR/25g5jz5" "$EASYDIR/manual.pdf"
				fi
				clear
				"$PDFVIEWER" "$EASYDIR/manual.pdf"
				cd "$OSCAMDIR"
				$0 7 10
				exit
			elif [ "$REPLY" == "3" ]; then
				if [ -e "$EASYDIR/oscam_config_example.pdf" ]; then
					rm "$EASYDIR/oscam_config_example.pdf"
				fi
				cd "$EASYDIR"
				wget -q -c http://tinyurl.com/2vul53a
				if [ -e "$EASYDIR/2vul53a" ]; then
					mv "$EASYDIR/2vul53a" "$EASYDIR/oscam_config_example.pdf"
				fi
				clear
				"$PDFVIEWER" "$EASYDIR/oscam_config_example.pdf"
				cd "$OSCAMDIR"
				$0 7 10
				exit
			elif [ "$REPLY" == "4" ]; then
				firefox http://streamboard.gmc.to:8001/
				cd "$OSCAMDIR"
				$0 7 10
				exit
			else
				cd "$OSCAMDIR"
				$0 7
				exit
			fi
		elif [ "$REPLY" == "4" ]; then
			read -p "Are you sure delete All build OSCam-Binaries now (y/N) ? "
				if [ "$REPLY" == "y" ] || [ "$REPLY" == "Y" ]; then
					if [ -e "$MYBUILDDIR" ]; then
						rm -rf "$MYBUILDDIR"
					fi
					echo -e "\033[1;37;41mALL build OSCam-Binaries DELETED!\033[0m"
					echo -e "\033[1;37;41mGo back to Easy-Config-Menu\033[0m"
					sleep 2
					$0 7
					exit
				else
					$0 7
					exit
				fi
		elif [ "$REPLY" == "5" ]; then
			read -p "Are you sure delete All logs/info ? "
				if [ "$REPLY" == "y" ] || [ "$REPLY" == "Y" ]; then
					LOGS=`ls $EASYDIR/LOGFILES | grep .log`
					INFOS=`ls $EASYDIR/ESAYINFO | grep .txt`
					if [ ! -z "$LOGS" ]; then
						rm "$EASYDIR/LOGFILES/*.log"
					fi
					if [ ! -z "$INFOS" ]; then
						rm "$EASYDIR/ESAYINFO/*.txt"
					fi
					echo -e "\033[1;37;43mALL Logs/Info DELETED!\033[0m" 
					echo -e "\033[1;37;43mGo back to Easy-Config\033[0m"
					sleep 2
					$0 7
					exit
				else
					$0 7
					exit
				fi
		elif [ "$REPLY" == "6" ]; then
			echo -e "\033[1;37;41mYou selected CLEANUP-FULL\033[0m"
			read -p "Are you sure to do FULL-CLEANUP NOW? (y/N)"
			if [ "$REPLY" == "y" ] || [ "$REPLY" == "Y" ]; then
				echo -e "\033[1;37;41mCleanup OSCam-SVN\033[0m"
				if [ -e "$MYBUILDDIR" ]; then
					rm -rf "$MYBUILDDIR"
				fi
				if [ -e "$MYBUILDDIR_OLD" ]; then
					rm -rf "$MYBUILDDIR_OLD"
				fi
				if [ -e "$MYCHAINS/devkit_sh4" ]; then
					rm -rf "$MYCHAINS/devkit_sh4"
				fi
				if [ -e "$MYCHAINS/COOLSTREAM-git" ]; then
					rm -rf "$MYCHAINS/COOLSTREAM-git"
				fi
				if [ -e "$MYCHAINS/AZBOX-git" ]; then
					rm -rf "$MYCHAINS/AZBOX-git"
				fi
				if [ -e "$MYCHAINS/mipsel-unknown-linux-gnu" ]; then
					rm -rf "$MYCHAINS/mipsel-unknown-linux-gnu"
				fi
				if [ -e "$MYCHAINS/gcc-4.2.1-uClibc-0.9.29" ]; then
					rm -rf "$MYCHAINS/gcc-4.2.1-uClibc-0.9.29"
				fi
				if [ -e "$MYCHAINS/DDWRT" ]; then
					rm -rf "$MYCHAINS/DDWRT"
				fi
				if [ -z "`cat "$OSCAMDIR/oscam-config.h" | grep "//#define FB7390"`" ]; then
					MYFREETZ="freetz-trunk7390"
				else
					MYFREETZ="freetz-trunk"
				fi
				if [ -e "$MYCHAINS/$MYFREETZ" ]; then
					rm -rf "$MYCHAINS/$MYFREETZ"
				fi
				if [ -e "$MYCHAINS/rmv5b-softfloat-linux" ]; then
					rm -rf "$MYCHAINS/rmv5b-softfloat-linux"
				fi
				if [ -e "$MYCHAINS/ASUSWL" ]; then
					rm -rf "$MYCHAINS/ASUSWL"
				fi
				if [ -e "$MYCHAINS"/"OpenWrt-SDK-ar71xx" ]; then
					rm -rf "$MYCHAINS"/"OpenWrt-SDK-ar71xx"
				fi
				if [ -e "$MYCHAINS"/"OpenWrt-SDK-atheros-2.6-for-Linux-i686" ]; then
					rm -rf "$MYCHAINS"/"OpenWrt-SDK-atheros-2.6-for-Linux-i686"
				fi
				if [ -e "$MYCHAINS/powerpc-tuxbox-linux-gnu" ]; then
					rm -rf "$OSCAMDIR/powerpc-tuxbox-linux-gnu"
				fi
				if [ -e "$MYCHAINS/powerpc-tuxbox-linux-gnu-dbox2" ]; then
					rm -rf "$OSCAMDIR/powerpc-tuxbox-linux-gnu-dbox2"
				fi
				if [ -e "$OSCAMDIR/libcrypto" ]; then
					rm -rf "$OSCAMDIR/libcrypto"
				fi
				if [ -e "$OSCAMDIR/openssl-$OPENSSLDDWRTVER" ]; then
					rm -rf "$OSCAMDIR/openssl-$OPENSSLDDWRTVER"
				fi
				if [ -e "$OSCAMDIR/openssl-$OPENSSLVER" ]; then
					rm -rf "$OSCAMDIR/openssl-$OPENSSLVER"
				fi
				if [ -e "$OSCAMDIR/libusb-$LIBUSBVER" ]; then
					rm -rf "$OSCAMDIR/libusb-$LIBUSBVER"
				fi
				if [ -e "$OSCAMDIR/libusb-1.0" ]; then
					rm -rf "$OSCAMDIR/libusb-1.0"
				fi
				if [ -e "$OSCAMDIR/stapi" ]; then
					rm -rf "$OSCAMDIR/stapi"
				fi
				if [ -e "$OSCAMDIR/Makefile.save" ]; then
					rm "$OSCAMDIR/Makefile"
					mv "$OSCAMDIR/Makefile.save" "$OSCAMDIR/Makefile"
				fi
				if [ -e "$OSCAMDIR/Maketype.save" ]; then
					rm "$OSCAMDIR/Maketype"
					mv "$OSCAMDIR/Maketype.save" "$OSCAMDIR/Maketype"
				fi
				if [ -e "$OSCAMDIR/oscam-config.c.save" ]; then
					rm "$OSCAMDIR/oscam-config.c"
					mv "$OSCAMDIR/oscam-config.c.save" "$OSCAMDIR/oscam-config.c"
				fi
				if [ -e "$OSCAMDIR/oscam-config.h.save" ]; then
					rm "$OSCAMDIR/oscam-config.h"
					mv "$OSCAMDIR/oscam-config.h.save" "$OSCAMDIR/oscam-config.h"
				fi
				if [ -e "$OSCAMDIR/oscam-http.c.save" ]; then
					rm "$OSCAMDIR/oscam-http.c"
					mv "$OSCAMDIR/oscam-http.c.save" "$OSCAMDIR/oscam-http.c"
				fi
				if [ -e "$OSCAMDIR/globals.h.save" ]; then
					rm "$OSCAMDIR/globals.h"
					mv "$OSCAMDIR/globals.h.save" "$OSCAMDIR/globals.h"
				fi
				if [ -e "$OSCAMDIR/utils/list_smargo.c.save" ]; then
					rm "$OSCAMDIR/utils/list_smargo.c"
					mv "$OSCAMDIR/utils/list_smargo.c.save" "$OSCAMDIR/utils/list_smargo.c"
				fi
				if [ -e "$OSCAMDIR/csctapi/ifd_smartreader.h.save" ]; then
					rm "$OSCAMDIR/csctapi/ifd_smartreader.h"
					mv "$OSCAMDIR/csctapi/ifd_smartreader.h.save" "$OSCAMDIR/csctapi/ifd_smartreader.h"
				fi
				if [ -e "$EASYDIR" ]; then
					rm  -rf "$EASYDIR"
				fi
				echo -e "\033[1;37;44mCleanup OSCam-SVN DONE\033[0m"
				sleep 2
				$0
				exit
			else
				echo -e "\033[1;37;44mGO BACK TO MAIN-MENU\033[0m"
				sleep 2
				$0
				exit
			fi
		elif [ "$REPLY" == "7" ]; then
			echo -e "\033[1;37;44mYou selected Get-Oscam-SVN-BACKUP\033[0m"
			read -p "Are you sure to do BACKUP NOW? (y/N)"
			if [ "$REPLY" == "y" ] || [ "$REPLY" == "Y" ]; then
				STREAMSVN="http://streamboard.gmc.to/svn/oscam/$MYSVN"
				STREAMSVNVERSION=`wget --no-cache -q -O- "$STREAMSVN" | head -n 1 | sed "s/.*Revision //" | sed "s/:.*//"`
				if [ ! -z "$STREAMSVNVERSION" ] && [ ! -e "$MAINDIR/oscam-svn$STREAMSVNVERSION-BACKUP.tar.gz" ]; then
					svn co http://streamboard.gmc.to/svn/oscam/$MYSVN "$MAINDIR/oscam-svn$STREAMSVNVERSION-BACKUP" >/dev/null 2>&1
					if [ -e "$MAINDIR/oscam-svn$STREAMSVNVERSION-BACKUP" ]; then
						cd "$MAINDIR/oscam-svn$STREAMSVNVERSION-BACKUP"
						tar -czvf "$MAINDIR/oscam-svn$STREAMSVNVERSION-BACKUP.tar.gz" ./
						rm -rf "$MAINDIR/oscam-svn$STREAMSVNVERSION-BACKUP"
						echo -e "\033[1;37;44mAll done
oscam-svn$STREAMSVNVERSION-BACKUP.tar.gz
can be found in
$MAINDIR\033[0m"
					fi
				fi
				cd "$OSCAMDIR"
				sleep 2
				$0
				exit
			else
				echo -e "\033[1;37;44moscam-svn$STREAMSVNVERSION-BACKUP.tar.gz
already exists!\033[0m"
				echo -e "\033[1;37;44mGO BACK TO MAIN-MENU\033[0m"
				sleep 2
				$0
				exit
			fi
		elif [ "$REPLY" == "8" ]; then
			echo -e "\033[1;37;44mYou selected Create MY_OSCAMS-megapack\033[0m"
			read -p "Are you sure to create megapack NOW? (y/N)"
			if [ "$REPLY" == "y" ] || [ "$REPLY" == "Y" ]; then
				echo -e "\033[1;37;44mCreate pack now...\033[0m"
				if [ -e "$OSCAMDIR/MY_OSCAMS/$VERSION" ]; then
					rm -rf "$OSCAMDIR/MY_OSCAMS/$VERSION"
				fi
				MYBUILDDIRS=`ls $MYBUILDDIR -I "$PLATFORM-PC"`
				MYBUILDDIRS2=`ls $MYBUILDDIR | grep "$PLATFORM-PC"`
				
				for i in $MYBUILDDIRS
				do
					BUILDSDONE=`find "$MYBUILDDIR/$i" | grep "oscam-svn$VERSION"`
					if [ ! -z "$BUILDSDONE" ]; then
						if [ ! -e "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam$VERSION-$i" ]; then
							mkdir -p "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i"
						fi

						if [ ! -e "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/OSCAMS$VERSION-$i.tar.gz" ]; then
							find "$MYBUILDDIR" -name "*$VERSION*-$i*" -exec cp -f {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/" \;
							find "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-FRITZBOX" -name "*7390*" -exec rm {} \;
							if [ ! -e "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/lib/pcsc/drivers/ifd-ccid.bundle/Contents/Linux" ]; then
								mkdir -p "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/lib/pcsc/drivers/ifd-ccid.bundle/Contents/Linux"
							fi
							if [ ! -e "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/sbin" ]; then
								mkdir -p "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/sbin"
							fi
							if [ ! -e "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/bin" ]; then
								mkdir -p "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/bin"
							fi
							find "$MYLIBS/$i" -name "libssl*.so*" -exec cp -dpRf {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/lib/" \;
							find "$MYLIBS/$i" -name "libcrypto*.so*" -exec cp -dpRf {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/lib/" \;
							find "$MYLIBS/$i" -name "libusb*.so*" -exec cp -dpRf {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/lib/" \;
							find "$MYLIBS/$i" -name "libpcsc*.so*" -exec cp -dpRf {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/lib/" \;
							find "$MYLIBS/$i" -name "libccid*.so*" -exec cp -dpRf {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/lib/pcsc/drivers/ifd-ccid.bundle/Contents/Linux/" \;
							find "$MYLIBS/$i" -name "Info.plist" -exec cp -f {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$ix/lib/pcsc/drivers/ifd-ccid.bundle/Contents/" \;
							find "$MYLIBS/$i" -name "pcscd" -exec cp -f {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/sbin/" \;
							find "$MYLIBS/$i" -name "Kobil_mIDentity_switch" -exec cp -f {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/sbin/" \;
							find "$MYLIBS/$i" -name "RSA_SecurID_getpasswd" -exec cp -f {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/bin/" \;
							find "$MYLIBS/$i" -name "c_rehash" -exec cp -f {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/bin/" \;
							cd $OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i
							tar -czvf $OSCAMDIR/OSCAMS$VERSION-$i.tar.gz ./
							rm $OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/oscam-svn*
							mv "$OSCAMDIR/OSCAMS$VERSION-$i.tar.gz" "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i"
							rm -rf "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/lib"
							rm -rf "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/sbin"
							rm -rf "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$i/bin"
							cd "$OSCAMDIR"
						fi
					fi

				done >/dev/null 2>&1

				for x in $MYBUILDDIRS2
				do
					BUILDSDONE=`find "$MYBUILDDIR/$x" | grep "oscam-svn$VERSION"`
					if [ ! -z "$BUILDSDONE" ]; then
						if [ ! -e "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam$VERSION-$x" ]; then
							mkdir -p "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x"
						fi

						if [ ! -e "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/OSCAMS$VERSION-$x.tar.gz" ]; then
							find "$MYBUILDDIR/$PLATFORM-PC" -name "*$VERSION*-$x*" -exec cp -f {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/" \;
							if [ ! -e "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/lib/pcsc/drivers/ifd-ccid.bundle/Contents/Linux" ]; then
								mkdir -p "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/lib/pcsc/drivers/ifd-ccid.bundle/Contents/Linux"
							fi
							if [ ! -e "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/sbin" ]; then
								mkdir -p "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/sbin"
							fi
							if [ ! -e "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/bin" ]; then
								mkdir -p "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/bin"
							fi
							if [ "$PLATFORM" == "x86_64" ]; then
								MYLIBSPATH="/usr/lib64/"
							else
								MYLIBSPATH="/usr/lib/"
							fi
							find "$MYLIBSPATH" -name "libssl*.so*" -exec cp -dpRf {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/lib/" \;
			
							find "$MYLIBSPATH" -name "libcrypto*.so*" -exec cp -dpRf {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/lib/" \;
							find "$MYLIBSPATH" -name "libusb-1*.so*" -exec cp -dpRf {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/lib/" \;
							find "$MYLIBSPATH" -name "libpcsc*.so*" -exec cp -dpRf {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/lib/" \;
							find "$MYLIBSPATH" -name "libccid*.so*" -exec cp -dpRf {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/lib/pcsc/drivers/ifd-ccid.bundle/Contents/Linux/" \;
							find "$MYLIBSPATH" -name "Info.plist" -exec cp -f {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/lib/pcsc/drivers/ifd-ccid.bundle/Contents/" \;
							find /usr/local/sbin -name "pcscd" -exec cp -f {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/sbin/" \;
							find /usr/local/sbin -name "Kobil_mIDentity_switch" -exec cp -f {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/sbin/" \;
							find /usr/local/bin -name "RSA_SecurID_getpasswd" -exec cp -f {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/bin/" \;
							find /usr/local/bin -name "c_rehash" -exec cp -f {} "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/bin/" \;
							cd $OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x
							tar -czvf $OSCAMDIR/OSCAMS$VERSION-$x.tar.gz ./
							rm $OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/oscam-svn*
							mv "$OSCAMDIR/OSCAMS$VERSION-$x.tar.gz" "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x"
							rm -rf "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/lib"
							rm -rf "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/sbin"
							rm -rf "$OSCAMDIR/MY_OSCAMS/$VERSION/OSCam-svn-$VERSION-$x/bin"
							cd "$OSCAMDIR"
						fi
					fi
				done >/dev/null 2>&1
				if [ "$MYSVN" == "trunk" ]; then
					MYDYNUNST="unstable"
				else
					MYDYNUNST="dynamic"
				fi
				if [ ! -e "$OSCAMDIR/MY_OSCAMS/OSCAMS-$MYDYNUNST-$VERSION-megapack.tar.gz" ]; then
					if [ ! -e "$OSCAMDIR/MY_OSCAMS/$VERSION/Doc" ]; then
						mkdir -p "$OSCAMDIR/MY_OSCAMS/$VERSION/Doc"
					fi
					find "$OSCAMDIR/Distribution/doc/txt" -name "*.txt" -exec cp -f {} "$OSCAMDIR/MY_OSCAMS/$VERSION/Doc/" \;
					cd $OSCAMDIR/MY_OSCAMS/$VERSION
					tar -czvf $OSCAMDIR/MY_OSCAMS/OSCAMS-$MYDYNUNST-$VERSION-megapack.tar.gz ./ >/dev/null 2>&1
					echo -e "\033[1;37;44mFINISHED..
OSCAMS-$MYDYNUNST-$VERSION-megapack.tar.gz can be found in:
$OSCAMDIR/MY_OSCAMS\033[0m"
				else
					echo -e "\033[1;37;44mOSCAMS-$MYDYNUNST-$VERSION-megapack.tar.gz
	already exists!\033[0m"
				fi
				echo -e "\033[1;37;44mGO BACK TO MAIN-MENU\033[0m"
				cd "$OSCAMDIR"
				sleep 2
				$0
				exit
			else
				echo -e "\033[1;37;44mGO BACK TO MAIN-MENU\033[0m"
				sleep 2
				$0
				exit
			fi
		else
			$0
			exit
		fi
else

	sed "s/^HAVETESTET=1/HAVETESTET=0/g" -i $0
	exit 
fi
exit

